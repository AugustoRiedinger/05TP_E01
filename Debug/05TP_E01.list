
05TP_E01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005874  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08005a28  08005a28  00015a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005cc0  08005cc0  00015cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000070c  20000000  08005cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002070c  2**0
                  CONTENTS
  8 .bss          00000094  2000070c  2000070c  0002070c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200007a0  200007a0  0002070c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008012  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000129d  00000000  00000000  0002874e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000998  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008e0  00000000  00000000  0002a388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000328f  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000321e  00000000  00000000  0002def7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00031115  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003430  00000000  00000000  00031194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000070c 	.word	0x2000070c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a0c 	.word	0x08005a0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000710 	.word	0x20000710
 80001ec:	08005a0c 	.word	0x08005a0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <NVIC_PriorityGroupConfig+0x24>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60d3      	str	r3, [r2, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]
 8000f08:	230f      	movs	r3, #15
 8000f0a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d039      	beq.n	8000f88 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <NVIC_Init+0xbc>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f1c3 0304 	rsb	r3, r3, #4
 8000f2a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000f2c:	7b7a      	ldrb	r2, [r7, #13]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	fa42 f303 	asr.w	r3, r2, r3
 8000f34:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	789a      	ldrb	r2, [r3, #2]
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <NVIC_Init+0xc0>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <NVIC_Init+0xc0>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f82:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f86:	e00f      	b.n	8000fa8 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f88:	490b      	ldr	r1, [pc, #44]	; (8000fb8 <NVIC_Init+0xc0>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fa0:	f100 0320 	add.w	r3, r0, #32
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000fea:	4313      	orrs	r3, r2
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <ADC_Init+0xa8>)
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800100e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001014:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800101c:	4313      	orrs	r3, r2
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001036:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	7d1b      	ldrb	r3, [r3, #20]
 800103c:	3b01      	subs	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	4313      	orrs	r3, r2
 8001044:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	051b      	lsls	r3, r3, #20
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	c0fff7fd 	.word	0xc0fff7fd

08001068 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	751a      	strb	r2, [r3, #20]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <ADC_CommonInit+0x48>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <ADC_CommonInit+0x4c>)
 80010be:	4013      	ands	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80010ca:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80010d0:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80010d6:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <ADC_CommonInit+0x48>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6053      	str	r3, [r2, #4]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40012300 	.word	0x40012300
 80010f4:	fffc30e0 	.word	0xfffc30e0

080010f8 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8001142:	e005      	b.n	8001150 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f023 0201 	bic.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	70fb      	strb	r3, [r7, #3]
 800116e:	460b      	mov	r3, r1
 8001170:	70bb      	strb	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d923      	bls.n	80011d0 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f1a3 020a 	sub.w	r2, r3, #10
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80011ac:	7879      	ldrb	r1, [r7, #1]
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	f1a3 020a 	sub.w	r2, r3, #10
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	e01e      	b.n	800120e <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80011d6:	78fa      	ldrb	r2, [r7, #3]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80011f0:	7879      	ldrb	r1, [r7, #1]
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	0d1b      	lsrs	r3, r3, #20
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	78ba      	ldrb	r2, [r7, #2]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3302      	adds	r3, #2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	221f      	movs	r2, #31
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4013      	ands	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	78b9      	ldrb	r1, [r7, #2]
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3302      	adds	r3, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	460b      	mov	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800129e:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	051b      	lsls	r3, r3, #20
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
 80012ce:	4613      	mov	r3, r2
 80012d0:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	461a      	mov	r2, r3
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <EXTI_Init+0xe0>)
 8001306:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	799b      	ldrb	r3, [r3, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d04f      	beq.n	80013b0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001310:	4931      	ldr	r1, [pc, #196]	; (80013d8 <EXTI_Init+0xe0>)
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <EXTI_Init+0xe0>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	43db      	mvns	r3, r3
 800131c:	4013      	ands	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <EXTI_Init+0xe0>)
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <EXTI_Init+0xe0>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	43db      	mvns	r3, r3
 800132c:	4013      	ands	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	791b      	ldrb	r3, [r3, #4]
 8001334:	461a      	mov	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800134a:	4923      	ldr	r1, [pc, #140]	; (80013d8 <EXTI_Init+0xe0>)
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <EXTI_Init+0xe0>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	43db      	mvns	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <EXTI_Init+0xe0>)
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <EXTI_Init+0xe0>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	43db      	mvns	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	795b      	ldrb	r3, [r3, #5]
 800136e:	2b10      	cmp	r3, #16
 8001370:	d10e      	bne.n	8001390 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001372:	4919      	ldr	r1, [pc, #100]	; (80013d8 <EXTI_Init+0xe0>)
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <EXTI_Init+0xe0>)
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001380:	4915      	ldr	r1, [pc, #84]	; (80013d8 <EXTI_Init+0xe0>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <EXTI_Init+0xe0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800138e:	e01d      	b.n	80013cc <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <EXTI_Init+0xe0>)
 8001392:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	795b      	ldrb	r3, [r3, #5]
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	e00d      	b.n	80013cc <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	461a      	mov	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6811      	ldr	r1, [r2, #0]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	43d2      	mvns	r2, r2
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40013c00 	.word	0x40013c00

080013dc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <EXTI_GetITStatus+0x30>)
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e001      	b.n	80013fe <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40013c00 	.word	0x40013c00

08001410 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <EXTI_ClearITPendingBit+0x1c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6153      	str	r3, [r2, #20]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40013c00 	.word	0x40013c00

08001430 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e076      	b.n	800153a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800144c:	2201      	movs	r2, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d165      	bne.n	8001534 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2103      	movs	r1, #3
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	4619      	mov	r1, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <GPIO_Init+0x76>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d12e      	bne.n	8001504 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2103      	movs	r1, #3
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	795b      	ldrb	r3, [r3, #5]
 80014c4:	4619      	mov	r1, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	2301      	movs	r3, #1
 80014e0:	408b      	lsls	r3, r1
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	7992      	ldrb	r2, [r2, #6]
 80014f2:	4611      	mov	r1, r2
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	b292      	uxth	r2, r2
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	b292      	uxth	r2, r2
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	b29b      	uxth	r3, r3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2103      	movs	r1, #3
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	79db      	ldrb	r3, [r3, #7]
 8001524:	4619      	mov	r1, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d985      	bls.n	800144c <GPIO_Init+0x1c>
    }
  }
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	71da      	strb	r2, [r3, #7]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	405a      	eors	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	615a      	str	r2, [r3, #20]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	2302      	movs	r3, #2
 80015c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80015c4:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d007      	beq.n	80015e4 <RCC_GetClocksFreq+0x40>
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d009      	beq.n	80015ec <RCC_GetClocksFreq+0x48>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d13d      	bne.n	8001658 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <RCC_GetClocksFreq+0x144>)
 80015e0:	601a      	str	r2, [r3, #0]
      break;
 80015e2:	e03d      	b.n	8001660 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a41      	ldr	r2, [pc, #260]	; (80016ec <RCC_GetClocksFreq+0x148>)
 80015e8:	601a      	str	r2, [r3, #0]
      break;
 80015ea:	e039      	b.n	8001660 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0d9b      	lsrs	r3, r3, #22
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f8:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001600:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <RCC_GetClocksFreq+0x148>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	4a34      	ldr	r2, [pc, #208]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 8001612:	6852      	ldr	r2, [r2, #4]
 8001614:	0992      	lsrs	r2, r2, #6
 8001616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	e00b      	b.n	800163a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001622:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <RCC_GetClocksFreq+0x144>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 800162c:	6852      	ldr	r2, [r2, #4]
 800162e:	0992      	lsrs	r2, r2, #6
 8001630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0c1b      	lsrs	r3, r3, #16
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	3301      	adds	r3, #1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
      break;
 8001656:	e003      	b.n	8001660 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <RCC_GetClocksFreq+0x144>)
 800165c:	601a      	str	r2, [r3, #0]
      break;
 800165e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <RCC_GetClocksFreq+0x14c>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	40da      	lsrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001690:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	0a9b      	lsrs	r3, r3, #10
 8001696:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <RCC_GetClocksFreq+0x14c>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	40da      	lsrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <RCC_GetClocksFreq+0x140>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	0b5b      	lsrs	r3, r3, #13
 80016be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <RCC_GetClocksFreq+0x14c>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60da      	str	r2, [r3, #12]
}
 80016d8:	bf00      	nop
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40023800 	.word	0x40023800
 80016e8:	00f42400 	.word	0x00f42400
 80016ec:	007a1200 	.word	0x007a1200
 80016f0:	20000000 	.word	0x20000000

080016f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <RCC_AHB1PeriphClockCmd+0x3c>)
 800170a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4313      	orrs	r3, r2
 8001710:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001712:	e006      	b.n	8001722 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	43db      	mvns	r3, r3
 800171e:	4013      	ands	r3, r2
 8001720:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001746:	490a      	ldr	r1, [pc, #40]	; (8001770 <RCC_APB1PeriphClockCmd+0x3c>)
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <RCC_APB1PeriphClockCmd+0x3c>)
 800174a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4313      	orrs	r3, r2
 8001750:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001752:	e006      	b.n	8001762 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <RCC_APB1PeriphClockCmd+0x3c>)
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <RCC_APB1PeriphClockCmd+0x3c>)
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	43db      	mvns	r3, r3
 800175e:	4013      	ands	r3, r2
 8001760:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800178a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001792:	e006      	b.n	80017a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001794:	4906      	ldr	r1, [pc, #24]	; (80017b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	43db      	mvns	r3, r3
 800179e:	4013      	ands	r3, r2
 80017a0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80017b4:	b490      	push	{r4, r7}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <SYSCFG_EXTILineConfig+0x80>)
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <SYSCFG_EXTILineConfig+0x80>)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	1c83      	adds	r3, r0, #2
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <SYSCFG_EXTILineConfig+0x80>)
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461c      	mov	r4, r3
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <SYSCFG_EXTILineConfig+0x80>)
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3302      	adds	r3, #2
 8001810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001814:	79f9      	ldrb	r1, [r7, #7]
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	1ca3      	adds	r3, r4, #2
 8001826:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bc90      	pop	{r4, r7}
 8001832:	4770      	bx	lr
 8001834:	40013800 	.word	0x40013800

08001838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <TIM_TimeBaseInit+0xbc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <TIM_TimeBaseInit+0x44>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <TIM_TimeBaseInit+0xc0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00f      	beq.n	800187c <TIM_TimeBaseInit+0x44>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001862:	d00b      	beq.n	800187c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <TIM_TimeBaseInit+0xc4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <TIM_TimeBaseInit+0x44>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <TIM_TimeBaseInit+0xc8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d003      	beq.n	800187c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <TIM_TimeBaseInit+0xcc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d108      	bne.n	800188e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001882:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	885a      	ldrh	r2, [r3, #2]
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4313      	orrs	r3, r2
 800188c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <TIM_TimeBaseInit+0xd0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00c      	beq.n	80018b0 <TIM_TimeBaseInit+0x78>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1c      	ldr	r2, [pc, #112]	; (800190c <TIM_TimeBaseInit+0xd4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d008      	beq.n	80018b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800189e:	89fb      	ldrh	r3, [r7, #14]
 80018a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	891a      	ldrh	r2, [r3, #8]
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	89fa      	ldrh	r2, [r7, #14]
 80018b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <TIM_TimeBaseInit+0xbc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d003      	beq.n	80018d6 <TIM_TimeBaseInit+0x9e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <TIM_TimeBaseInit+0xc0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d104      	bne.n	80018e0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	7a9b      	ldrb	r3, [r3, #10]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	829a      	strh	r2, [r3, #20]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40010400 	.word	0x40010400
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800
 8001904:	40000c00 	.word	0x40000c00
 8001908:	40001000 	.word	0x40001000
 800190c:	40001400 	.word	0x40001400

08001910 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001932:	e007      	b.n	8001944 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	801a      	strh	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	899b      	ldrh	r3, [r3, #12]
 800196a:	b29a      	uxth	r2, r3
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4313      	orrs	r3, r2
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001976:	e009      	b.n	800198c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	899b      	ldrh	r3, [r3, #12]
 800197c:	b29a      	uxth	r2, r3
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	43db      	mvns	r3, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	4013      	ands	r3, r2
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	819a      	strh	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	81bb      	strh	r3, [r7, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	8a1b      	ldrh	r3, [r3, #16]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	4013      	ands	r3, r2
 80019ba:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	899b      	ldrh	r3, [r3, #12]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	4013      	ands	r3, r2
 80019c6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80019c8:	89bb      	ldrh	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <TIM_GetITStatus+0x42>
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	821a      	strh	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <main>:
			{ TLCD_D5, GPIOD, GPIO_Pin_2,  RCC_AHB1Periph_GPIOD, Bit_RESET },
			{ TLCD_D6, GPIOF, GPIO_Pin_6,  RCC_AHB1Periph_GPIOF, Bit_RESET },
			{ TLCD_D7, GPIOF, GPIO_Pin_7,  RCC_AHB1Periph_GPIOF, Bit_RESET }, };

int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8001a14:	f000 ffae 	bl	8002974 <SystemInit>

	//Inicializacion User LED de prueba PB0 como salida digital:
	INIT_DO(GPIOB, GPIO_Pin_0);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0x64>)
 8001a1c:	f000 f93d 	bl	8001c9a <INIT_DO>

	//Inicializacion del DISPLAY LCD:
	INIT_LCD_2x16(LCD_2X16);
 8001a20:	4815      	ldr	r0, [pc, #84]	; (8001a78 <main+0x68>)
 8001a22:	f000 f9d3 	bl	8001dcc <INIT_LCD_2x16>

	//Inicializacion del teclado:
	INIT_DO(F1_Port, F1);
 8001a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <main+0x6c>)
 8001a2c:	f000 f935 	bl	8001c9a <INIT_DO>
	INIT_DO(F2_Port, F2);
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <main+0x64>)
 8001a36:	f000 f930 	bl	8001c9a <INIT_DO>
	INIT_DI(C1_Port, C1);
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	480f      	ldr	r0, [pc, #60]	; (8001a7c <main+0x6c>)
 8001a3e:	f000 f90d 	bl	8001c5c <INIT_DI>
	INIT_DI(C2_Port, C2);
 8001a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <main+0x6c>)
 8001a48:	f000 f908 	bl	8001c5c <INIT_DI>

	//Inicializacion del LM35 como ENTRADA ANALOGICA / ADC1:
	INIT_ADC(LM35_Port, LM35);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <main+0x6c>)
 8001a50:	f000 f942 	bl	8001cd8 <INIT_ADC>

	//Inicializacion de interrupcion por tiempo cada 50 mseg:
	INIT_SYSTICK(TimeINT_Systick);
 8001a54:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001a80 <main+0x70>
 8001a58:	f000 fa12 	bl	8001e80 <INIT_SYSTICK>

	//Inicialización del TIM3:
	INIT_TIM3();
 8001a5c:	f000 fa30 	bl	8001ec0 <INIT_TIM3>
	SET_TIM3(TimeBase, Freq);
 8001a60:	2100      	movs	r1, #0
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <main+0x74>)
 8001a64:	f000 fa44 	bl	8001ef0 <SET_TIM3>

	//Inicializacion de la interrupcion por pulso externo en PA0:
	INIT_EXTINT(GPIOA, GPIO_Pin_0);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <main+0x78>)
 8001a6c:	f000 fa82 	bl	8001f74 <INIT_EXTINT>


/*------------------------------------------------------------------------------
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
    while(1)
 8001a70:	e7fe      	b.n	8001a70 <main+0x60>
 8001a72:	bf00      	nop
 8001a74:	40020400 	.word	0x40020400
 8001a78:	20000010 	.word	0x20000010
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	3d4ccccd 	.word	0x3d4ccccd
 8001a84:	00030d40 	.word	0x00030d40
 8001a88:	40020000 	.word	0x40020000

08001a8c <SysTick_Handler>:
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
//Interrupcion por tiempo - Systick cada 50mseg:
void SysTick_Handler()
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <TIM3_IRQHandler>:

//Interrupcion al vencimiento de cuenta de TIM3:
void TIM3_IRQHandler(void)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b091      	sub	sp, #68	; 0x44
 8001aa0:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_CC1) != RESET) {
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4832      	ldr	r0, [pc, #200]	; (8001b70 <TIM3_IRQHandler+0xd4>)
 8001aa6:	f7ff ff77 	bl	8001998 <TIM_GetITStatus>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05a      	beq.n	8001b66 <TIM3_IRQHandler+0xca>
		TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	482f      	ldr	r0, [pc, #188]	; (8001b70 <TIM3_IRQHandler+0xd4>)
 8001ab4:	f7ff ff9a 	bl	80019ec <TIM_ClearITPendingBit>
		char BufferTemperature[BufferLength];
		char BufferSeg[BufferLength];
		char BufferCont[BufferLength];

		//Refresco del LCD:
		CLEAR_LCD_2x16(LCD_2X16);
 8001ab8:	482e      	ldr	r0, [pc, #184]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001aba:	f000 f9af 	bl	8001e1c <CLEAR_LCD_2x16>

		//Mostrar temperatura:
		PRINT_LCD_2x16(LCD_2X16, 0, 0, "TDII T:");
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <TIM3_IRQHandler+0xdc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	482b      	ldr	r0, [pc, #172]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001ac6:	f000 f9b9 	bl	8001e3c <PRINT_LCD_2x16>
		sprintf(BufferTemperature, "%.1f", TempDegrees);
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <TIM3_IRQHandler+0xe0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd4a 	bl	8000568 <__aeabi_f2d>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001adc:	461a      	mov	r2, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	4927      	ldr	r1, [pc, #156]	; (8001b80 <TIM3_IRQHandler+0xe4>)
 8001ae2:	f001 f899 	bl	8002c18 <sprintf>
		PRINT_LCD_2x16(LCD_2X16, 8, 0, BufferTemperature);
 8001ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aea:	2200      	movs	r2, #0
 8001aec:	2108      	movs	r1, #8
 8001aee:	4821      	ldr	r0, [pc, #132]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001af0:	f000 f9a4 	bl	8001e3c <PRINT_LCD_2x16>
		PRINT_LCD_2x16(LCD_2X16, 13, 0, "^C");
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <TIM3_IRQHandler+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	210d      	movs	r1, #13
 8001afa:	481e      	ldr	r0, [pc, #120]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001afc:	f000 f99e 	bl	8001e3c <PRINT_LCD_2x16>

		//Mostrar segundos:
		PRINT_LCD_2x16(LCD_2X16, 0, 1, "Seg:");
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <TIM3_IRQHandler+0xec>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	2100      	movs	r1, #0
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001b08:	f000 f998 	bl	8001e3c <PRINT_LCD_2x16>
		sprintf(BufferSeg, "%d", Seg);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <TIM3_IRQHandler+0xf0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	491e      	ldr	r1, [pc, #120]	; (8001b90 <TIM3_IRQHandler+0xf4>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 f87e 	bl	8002c18 <sprintf>
		if (Seg < 10) {
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <TIM3_IRQHandler+0xf0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d80d      	bhi.n	8001b40 <TIM3_IRQHandler+0xa4>
			PRINT_LCD_2x16(LCD_2X16, 5, 1, "0");
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <TIM3_IRQHandler+0xf8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4812      	ldr	r0, [pc, #72]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001b2c:	f000 f986 	bl	8001e3c <PRINT_LCD_2x16>
			PRINT_LCD_2x16(LCD_2X16, 6, 1, BufferSeg);
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	2201      	movs	r2, #1
 8001b36:	2106      	movs	r1, #6
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001b3a:	f000 f97f 	bl	8001e3c <PRINT_LCD_2x16>
 8001b3e:	e006      	b.n	8001b4e <TIM3_IRQHandler+0xb2>
		} else
			PRINT_LCD_2x16(LCD_2X16, 5, 1, BufferSeg);
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	2201      	movs	r2, #1
 8001b46:	2105      	movs	r1, #5
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001b4a:	f000 f977 	bl	8001e3c <PRINT_LCD_2x16>

		//Mostrar indicador de pulsaciones:
		PRINT_LCD_2x16(LCD_2X16, 9, 1, "ind:");
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <TIM3_IRQHandler+0xfc>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	2109      	movs	r1, #9
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <TIM3_IRQHandler+0xd8>)
 8001b56:	f000 f971 	bl	8001e3c <PRINT_LCD_2x16>
		sprintf(BufferCont, "%d", 1);
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	490c      	ldr	r1, [pc, #48]	; (8001b90 <TIM3_IRQHandler+0xf4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 f859 	bl	8002c18 <sprintf>
//			PRINT_LCD_2x16(LCD_2X16, 15, 1, BufferCont);
//		}
//		else
//			PRINT_LCD_2x16(LCD_2X16, 14, 1, BufferCont);
	}
}
 8001b66:	bf00      	nop
 8001b68:	3744      	adds	r7, #68	; 0x44
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	20000010 	.word	0x20000010
 8001b78:	08005a28 	.word	0x08005a28
 8001b7c:	2000076c 	.word	0x2000076c
 8001b80:	08005a30 	.word	0x08005a30
 8001b84:	08005a38 	.word	0x08005a38
 8001b88:	08005a3c 	.word	0x08005a3c
 8001b8c:	20000784 	.word	0x20000784
 8001b90:	08005a44 	.word	0x08005a44
 8001b94:	08005a48 	.word	0x08005a48
 8001b98:	08005a4c 	.word	0x08005a4c

08001b9c <EXTI0_IRQHandler>:

//Interrupcion al pulso por linea cero:
void EXTI0_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff fc1b 	bl	80013dc <EXTI_GetITStatus>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <EXTI0_IRQHandler+0x1e>
  {
	GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 8001bac:	2101      	movs	r1, #1
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <EXTI0_IRQHandler+0x24>)
 8001bb0:	f7ff fce6 	bl	8001580 <GPIO_ToggleBits>

    /* Clear the EXTI line 0 pending bit */
    EXTI_ClearITPendingBit(EXTI_Line0);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fc2b 	bl	8001410 <EXTI_ClearITPendingBit>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0b      	bge.n	8001bf0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001bd8:	490d      	ldr	r1, [pc, #52]	; (8001c10 <NVIC_SetPriority+0x4c>)
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	3b04      	subs	r3, #4
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001bee:	e009      	b.n	8001c04 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001bf0:	4908      	ldr	r1, [pc, #32]	; (8001c14 <NVIC_SetPriority+0x50>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c3c:	f7ff ffc2 	bl	8001bc4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <INIT_DI>:
		- Pin	Pin a inicializar. Ej: GPIO_Pin_X
	* @ej
		- INIT_DI(GPIOX, RCC_AHB1Periph_GPIOX, GPIO_Pin_X);
******************************************************************************/
void INIT_DI(GPIO_TypeDef* Port, uint32_t Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	//Estructura de configuracion:
	GPIO_InitTypeDef GPIO_InitStructure;

	//Habilitacion de la senal de reloj para el periferico:
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f9dc 	bl	8002024 <FIND_CLOCK>
 8001c6c:	6178      	str	r0, [r7, #20]
	RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7ff fd3f 	bl	80016f4 <RCC_AHB1PeriphClockCmd>

	//Ahora se configura el pin como entrada (GPI0_MODE_IN):
	GPIO_InitStructure.GPIO_Pin = Pin;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	747b      	strb	r3, [r7, #17]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001c82:	2300      	movs	r3, #0
 8001c84:	74fb      	strb	r3, [r7, #19]

	//Se aplica la configuracion definida anteriormente al puerto:
	GPIO_Init(Port, &GPIO_InitStructure);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fbcf 	bl	8001430 <GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <INIT_DO>:
		- Pin	Pin a inicializar. Ej: GPIO_Pin_X
	* @ej
		- INIT_DO(GPIOX, RCC_AHB1Periph_GPIOX, GPIO_Pin_X);
******************************************************************************/
void INIT_DO(GPIO_TypeDef* Port, uint32_t Pin)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	//Estructura de configuracion
	GPIO_InitTypeDef GPIO_InitStructure;

	//Habilitacion de la senal de reloj para el periferico:
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f9bd 	bl	8002024 <FIND_CLOCK>
 8001caa:	6178      	str	r0, [r7, #20]
	RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8001cac:	2101      	movs	r1, #1
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff fd20 	bl	80016f4 <RCC_AHB1PeriphClockCmd>

	//Se configura el pin como entrada (GPI0_MODE_IN):
	GPIO_InitStructure.GPIO_Pin = Pin;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	747b      	strb	r3, [r7, #17]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	74fb      	strb	r3, [r7, #19]

	//Se aplica la configuracion definida anteriormente al puerto:
	GPIO_Init(Port, &GPIO_InitStructure);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fbb0 	bl	8001430 <GPIO_Init>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <INIT_ADC>:
		- Channel 	Canal del ADC a inicializar. Ej: ADC_Channel_1X
	* @ej
		- INIT_ADC(GPIOX, RCC_AHB1Periph_GPIOX, ADCX, GPIO_Pin_X, RCC_APB2Periph_ADCX, ADC_Channel_1X);
******************************************************************************/
void INIT_ADC(GPIO_TypeDef* Port, uint16_t Pin)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b092      	sub	sp, #72	; 0x48
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f99d 	bl	8002024 <FIND_CLOCK>
 8001cea:	6478      	str	r0, [r7, #68]	; 0x44

	ADC_TypeDef* ADCX;
	ADCX = FIND_ADC_TYPE(Port, Pin);
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f9e1 	bl	80020b8 <FIND_ADC_TYPE>
 8001cf6:	6438      	str	r0, [r7, #64]	; 0x40

	uint32_t RCC_APB;
	RCC_APB = FIND_RCC_APB(ADCX);
 8001cf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001cfa:	f000 fa59 	bl	80021b0 <FIND_RCC_APB>
 8001cfe:	63f8      	str	r0, [r7, #60]	; 0x3c

	uint8_t Channel;
	Channel = FIND_CHANNEL(Port, Pin);
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fa75 	bl	80021f4 <FIND_CHANNEL>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    GPIO_InitTypeDef        GPIO_InitStructure;
    ADC_InitTypeDef         ADC_InitStructure;
    ADC_CommonInitTypeDef   ADC_CommonInitStructure;

    //Habilitacion del Clock para el puerto donde esta conectado el ADC:
    RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8001d10:	2101      	movs	r1, #1
 8001d12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d14:	f7ff fcee 	bl	80016f4 <RCC_AHB1PeriphClockCmd>

    //Configuracion del PIN del ADC como entrada ANALOGICA.
    GPIO_StructInit(&GPIO_InitStructure);
 8001d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fc15 	bl	800154c <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin     = Pin;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AN;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL ;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    GPIO_Init(Port, &GPIO_InitStructure);
 8001d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fb79 	bl	8001430 <GPIO_Init>

    //Activar ADC:
    RCC_APB2PeriphClockCmd(RCC_APB, ENABLE);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d42:	f7ff fd17 	bl	8001774 <RCC_APB2PeriphClockCmd>

    //ADC Common Init:
    ADC_CommonStructInit(&ADC_CommonInitStructure);
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f9d4 	bl	80010f8 <ADC_CommonStructInit>
    ADC_CommonInitStructure.ADC_Mode                = ADC_Mode_Independent;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
    ADC_CommonInitStructure.ADC_Prescaler           = ADC_Prescaler_Div4; // max 36 MHz segun datasheet
 8001d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d58:	60fb      	str	r3, [r7, #12]
    ADC_CommonInitStructure.ADC_DMAAccessMode       = ADC_DMAAccessMode_Disabled;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
    ADC_CommonInitStructure.ADC_TwoSamplingDelay    = ADC_TwoSamplingDelay_5Cycles;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
    ADC_CommonInit(&ADC_CommonInitStructure);
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f99e 	bl	80010a8 <ADC_CommonInit>

    //ADC Init:
    ADC_StructInit (&ADC_InitStructure);
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f979 	bl	8001068 <ADC_StructInit>
    ADC_InitStructure.ADC_Resolution             = ADC_Resolution_12b;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
    ADC_InitStructure.ADC_ScanConvMode           = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	773b      	strb	r3, [r7, #28]
    ADC_InitStructure.ADC_ContinuousConvMode     = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	777b      	strb	r3, [r7, #29]
    ADC_InitStructure.ADC_ExternalTrigConvEdge   = ADC_ExternalTrigConvEdge_None;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    ADC_InitStructure.ADC_DataAlign              = ADC_DataAlign_Right;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
    ADC_InitStructure.ADC_NbrOfConversion        = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ADC_Init(ADCX, &ADC_InitStructure);
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	4619      	mov	r1, r3
 8001d96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d98:	f7ff f910 	bl	8000fbc <ADC_Init>

    //Establecer la configuración de conversion:
    ADC_InjectedSequencerLengthConfig(ADCX, 1);
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001da0:	f7ff fa6d 	bl	800127e <ADC_InjectedSequencerLengthConfig>
    ADC_SetInjectedOffset(ADCX, ADC_InjectedChannel_1, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2114      	movs	r1, #20
 8001da8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001daa:	f7ff fa8a 	bl	80012c2 <ADC_SetInjectedOffset>
    ADC_InjectedChannelConfig(ADCX, Channel, 1, ADC_SampleTime_480Cycles);
 8001dae:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8001db2:	2307      	movs	r3, #7
 8001db4:	2201      	movs	r2, #1
 8001db6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001db8:	f7ff f9d0 	bl	800115c <ADC_InjectedChannelConfig>

    /* Poner en marcha ADC ----------------------------------------------------*/
    ADC_Cmd(ADCX, ENABLE);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001dc0:	f7ff f9b0 	bl	8001124 <ADC_Cmd>
}
 8001dc4:	bf00      	nop
 8001dc6:	3748      	adds	r7, #72	; 0x48
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb17 	bl	8002408 <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <INIT_LCD_2x16+0x4c>)
 8001ddc:	f000 fba7 	bl	800252e <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fbb4 	bl	800254e <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	2028      	movs	r0, #40	; 0x28
 8001dea:	f000 fc0c 	bl	8002606 <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	2006      	movs	r0, #6
 8001df2:	f000 fc08 	bl	8002606 <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	200c      	movs	r0, #12
 8001dfa:	f000 fc04 	bl	8002606 <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	2001      	movs	r0, #1
 8001e02:	f000 fc00 	bl	8002606 <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001e06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e0a:	f000 fb90 	bl	800252e <P_LCD_2x16_Delay>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	000186a0 	.word	0x000186a0

08001e1c <CLEAR_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- UB_LCD_2x16_Clear(LCD_2X16);
******************************************************************************/
void CLEAR_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  // Display l�schen
  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fbed 	bl	8002606 <P_LCD_2x16_Cmd>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e30:	f000 fb7d 	bl	800252e <P_LCD_2x16_Delay>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <PRINT_LCD_2x16>:

	* @ej
		- PRINT_LCD_2x16(LCD_2X16, 0, 0, STR);
******************************************************************************/
void PRINT_LCD_2x16(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y, char *ptr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	72fb      	strb	r3, [r7, #11]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	72bb      	strb	r3, [r7, #10]
  // Cursor setzen
  P_LCD_2x16_Cursor(LCD_2X16,x,y);
 8001e4e:	7aba      	ldrb	r2, [r7, #10]
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	4619      	mov	r1, r3
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fc59 	bl	800270c <P_LCD_2x16_Cursor>
  // kompletten String ausgeben
  while (*ptr != 0) {
 8001e5a:	e008      	b.n	8001e6e <PRINT_LCD_2x16+0x32>
    P_LCD_2x16_Data(*ptr, LCD_2X16);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fc78 	bl	8002758 <P_LCD_2x16_Data>
    ptr++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
  while (*ptr != 0) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <PRINT_LCD_2x16+0x20>
  }
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <INIT_SYSTICK>:

	* @ej
		- INIT_SYSTICK(1/1000); //Interrupcion cada 1 mseg.
******************************************************************************/
void INIT_SYSTICK(float div)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick_Config(SystemCoreClock * div);
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <INIT_SYSTICK+0x3c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7ff feb7 	bl	8001c18 <SysTick_Config>
	RCC_ClocksTypeDef Clocks_Values;
	RCC_GetClocksFreq(&Clocks_Values);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fb78 	bl	80015a4 <RCC_GetClocksFreq>
}
 8001eb4:	bf00      	nop
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000088 	.word	0x20000088

08001ec0 <INIT_TIM3>:
	* @param
	* @ej
		- INIT_TIM4();
******************************************************************************/
void INIT_TIM3()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f7ff fc33 	bl	8001734 <RCC_APB1PeriphClockCmd>

	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001ece:	231d      	movs	r3, #29
 8001ed0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001eda:	2301      	movs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f809 	bl	8000ef8 <NVIC_Init>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <SET_TIM3>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM3(uint32_t TimeBase, uint32_t Freq)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
	uint16_t PrescalerValue = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	81fb      	strh	r3, [r7, #14]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8001efe:	f000 fd6f 	bl	80029e0 <SystemCoreClockUpdate>
	TIM_ITConfig(TIM3, TIM_IT_CC1, DISABLE);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2102      	movs	r1, #2
 8001f06:	4818      	ldr	r0, [pc, #96]	; (8001f68 <SET_TIM3+0x78>)
 8001f08:	f7ff fd22 	bl	8001950 <TIM_ITConfig>
	TIM_Cmd(TIM3, DISABLE);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4816      	ldr	r0, [pc, #88]	; (8001f68 <SET_TIM3+0x78>)
 8001f10:	f7ff fcfe 	bl	8001910 <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <SET_TIM3+0x7c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	085a      	lsrs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <SET_TIM3+0x80>)
 8001f32:	6053      	str	r3, [r2, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <SET_TIM3+0x80>)
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <SET_TIM3+0x80>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <SET_TIM3+0x80>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <SET_TIM3+0x80>)
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <SET_TIM3+0x78>)
 8001f4a:	f7ff fc75 	bl	8001838 <TIM_TimeBaseInit>

	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_CC1, ENABLE);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2102      	movs	r1, #2
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <SET_TIM3+0x78>)
 8001f54:	f7ff fcfc 	bl	8001950 <TIM_ITConfig>

	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <SET_TIM3+0x78>)
 8001f5c:	f7ff fcd8 	bl	8001910 <TIM_Cmd>
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	20000088 	.word	0x20000088
 8001f70:	20000760 	.word	0x20000760

08001f74 <INIT_EXTINT>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void INIT_EXTINT(GPIO_TypeDef* Port, uint16_t Pin)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable GPIO clock */
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f84f 	bl	8002024 <FIND_CLOCK>
 8001f86:	6178      	str	r0, [r7, #20]
	RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff fbb2 	bl	80016f4 <RCC_AHB1PeriphClockCmd>
	/* Enable SYSCFG clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001f90:	2101      	movs	r1, #1
 8001f92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f96:	f7ff fbed 	bl	8001774 <RCC_APB2PeriphClockCmd>

	/* Configure pin as input floating */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStructure.GPIO_Pin = Pin;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	60fb      	str	r3, [r7, #12]
	GPIO_Init(Port, &GPIO_InitStructure);
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fa3f 	bl	8001430 <GPIO_Init>

	/* Connect EXTI Line to pin */
	SYSCFG_EXTILineConfig(FIND_EXTI_PORT_SOURCE(Port), FIND_EXTI_PIN_SOURCE(Pin));
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fc54 	bl	8002860 <FIND_EXTI_PORT_SOURCE>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fc60 	bl	8002884 <FIND_EXTI_PIN_SOURCE>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7ff fbf3 	bl	80017b4 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line0 */
	EXTI_InitStructure.EXTI_Line = FIND_EXTI_LINE(Port, Pin);
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fc66 	bl	80028a4 <FIND_EXTI_LINE>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <INIT_EXTINT+0xac>)
 8001fdc:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <INIT_EXTINT+0xac>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <INIT_EXTINT+0xac>)
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <INIT_EXTINT+0xac>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <INIT_EXTINT+0xac>)
 8001ff2:	f7ff f981 	bl	80012f8 <EXTI_Init>

	/* Enable and set EXTI Line0 Interrupt to the lowest priority */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8001ff6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ffa:	f7fe ff69 	bl	8000ed0 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8001ffe:	2306      	movs	r3, #6
 8002000:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
 8002002:	2303      	movs	r3, #3
 8002004:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
 8002006:	2303      	movs	r3, #3
 8002008:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800200a:	2301      	movs	r3, #1
 800200c:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe ff70 	bl	8000ef8 <NVIC_Init>
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	20000788 	.word	0x20000788

08002024 <FIND_CLOCK>:
/*------------------------------------------------------------------------------
 FUNCIONES INTERNAS:
------------------------------------------------------------------------------*/
//General:
uint32_t FIND_CLOCK(GPIO_TypeDef* Port)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	uint32_t Clock;

	if		(Port == GPIOA) Clock = RCC_AHB1Periph_GPIOA;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a1b      	ldr	r2, [pc, #108]	; (800209c <FIND_CLOCK+0x78>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <FIND_CLOCK+0x16>
 8002034:	2301      	movs	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e028      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOB) Clock = RCC_AHB1Periph_GPIOB;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <FIND_CLOCK+0x7c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d102      	bne.n	8002048 <FIND_CLOCK+0x24>
 8002042:	2302      	movs	r3, #2
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e021      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOC) Clock = RCC_AHB1Periph_GPIOC;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <FIND_CLOCK+0x80>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <FIND_CLOCK+0x32>
 8002050:	2304      	movs	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e01a      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOD) Clock = RCC_AHB1Periph_GPIOD;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <FIND_CLOCK+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d102      	bne.n	8002064 <FIND_CLOCK+0x40>
 800205e:	2308      	movs	r3, #8
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e013      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOE) Clock = RCC_AHB1Periph_GPIOE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <FIND_CLOCK+0x88>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d102      	bne.n	8002072 <FIND_CLOCK+0x4e>
 800206c:	2310      	movs	r3, #16
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e00c      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOF) Clock = RCC_AHB1Periph_GPIOF;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <FIND_CLOCK+0x8c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d102      	bne.n	8002080 <FIND_CLOCK+0x5c>
 800207a:	2320      	movs	r3, #32
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e005      	b.n	800208c <FIND_CLOCK+0x68>
	else if (Port == GPIOG) Clock = RCC_AHB1Periph_GPIOG;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <FIND_CLOCK+0x90>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <FIND_CLOCK+0x68>
 8002088:	2340      	movs	r3, #64	; 0x40
 800208a:	60fb      	str	r3, [r7, #12]
	return Clock;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40021400 	.word	0x40021400
 80020b4:	40021800 	.word	0x40021800

080020b8 <FIND_ADC_TYPE>:



//ADC:
ADC_TypeDef* FIND_ADC_TYPE (GPIO_TypeDef* Port, uint32_t Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	ADC_TypeDef* ADCX;

	if 		((Port == GPIOA && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1   || Pin == GPIO_Pin_2 ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a34      	ldr	r2, [pc, #208]	; (8002198 <FIND_ADC_TYPE+0xe0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d117      	bne.n	80020fa <FIND_ADC_TYPE+0x42>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d034      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d031      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d02e      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d02b      	beq.n	800213a <FIND_ADC_TYPE+0x82>
								Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5 ||
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d028      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d025      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d022      	beq.n	800213a <FIND_ADC_TYPE+0x82>
								Pin == GPIO_Pin_6 || Pin == GPIO_Pin_7)) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d01f      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <FIND_ADC_TYPE+0xe4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d105      	bne.n	800210e <FIND_ADC_TYPE+0x56>

			 (Port == GPIOB && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1)) ||
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d018      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d015      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <FIND_ADC_TYPE+0xe8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d114      	bne.n	8002140 <FIND_ADC_TYPE+0x88>

			 (Port == GPIOC && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1   || Pin == GPIO_Pin_2 ||
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d00e      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d00b      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d008      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d005      	beq.n	800213a <FIND_ADC_TYPE+0x82>
					  	  	  	Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5)))
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d002      	beq.n	800213a <FIND_ADC_TYPE+0x82>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d102      	bne.n	8002140 <FIND_ADC_TYPE+0x88>
		ADCX = ADC1;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <FIND_ADC_TYPE+0xec>)
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e023      	b.n	8002188 <FIND_ADC_TYPE+0xd0>

	else if ((Port == GPIOF && (Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5 ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <FIND_ADC_TYPE+0xf0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d11d      	bne.n	8002184 <FIND_ADC_TYPE+0xcc>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b08      	cmp	r3, #8
 800214c:	d017      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b10      	cmp	r3, #16
 8002152:	d014      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b20      	cmp	r3, #32
 8002158:	d011      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d00e      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
								Pin == GPIO_Pin_6 || Pin == GPIO_Pin_7   || Pin == GPIO_Pin_8 ||
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d00b      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216c:	d007      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002174:	d003      	beq.n	800217e <FIND_ADC_TYPE+0xc6>
								Pin == GPIO_Pin_9 || Pin == GPIO_Pin_10)))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <FIND_ADC_TYPE+0xcc>
		ADCX = ADC3;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <FIND_ADC_TYPE+0xf4>)
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e001      	b.n	8002188 <FIND_ADC_TYPE+0xd0>

	else
		ADCX = NULL;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

	return ADCX;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40012000 	.word	0x40012000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40012200 	.word	0x40012200

080021b0 <FIND_RCC_APB>:

uint32_t FIND_RCC_APB(ADC_TypeDef* ADCX)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	uint32_t RCC_APB;

	if 		(ADCX == ADC1) RCC_APB = RCC_APB2Periph_ADC1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <FIND_RCC_APB+0x3c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <FIND_RCC_APB+0x18>
 80021c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e009      	b.n	80021dc <FIND_RCC_APB+0x2c>
	else if (ADCX == ADC3) RCC_APB = RCC_APB2Periph_ADC3;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <FIND_RCC_APB+0x40>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <FIND_RCC_APB+0x28>
 80021d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e001      	b.n	80021dc <FIND_RCC_APB+0x2c>
	else 				   RCC_APB = NULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

	return RCC_APB;
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40012000 	.word	0x40012000
 80021f0:	40012200 	.word	0x40012200

080021f4 <FIND_CHANNEL>:

uint8_t FIND_CHANNEL(GPIO_TypeDef* Port, uint32_t Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	uint8_t Channel;

	if 		(Port == GPIOA && Pin == GPIO_Pin_0)  Channel = ADC_Channel_0;  else if (Port == GPIOA && Pin == GPIO_Pin_1)  Channel = ADC_Channel_1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a7d      	ldr	r2, [pc, #500]	; (80023f8 <FIND_CHANNEL+0x204>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d105      	bne.n	8002212 <FIND_CHANNEL+0x1e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <FIND_CHANNEL+0x1e>
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e0ea      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a78      	ldr	r2, [pc, #480]	; (80023f8 <FIND_CHANNEL+0x204>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d105      	bne.n	8002226 <FIND_CHANNEL+0x32>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d102      	bne.n	8002226 <FIND_CHANNEL+0x32>
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e0e0      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_2)  Channel = ADC_Channel_2;  else if (Port == GPIOA && Pin == GPIO_Pin_3)  Channel = ADC_Channel_3;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <FIND_CHANNEL+0x204>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d105      	bne.n	800223a <FIND_CHANNEL+0x46>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d102      	bne.n	800223a <FIND_CHANNEL+0x46>
 8002234:	2302      	movs	r3, #2
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e0d6      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a6e      	ldr	r2, [pc, #440]	; (80023f8 <FIND_CHANNEL+0x204>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d105      	bne.n	800224e <FIND_CHANNEL+0x5a>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d102      	bne.n	800224e <FIND_CHANNEL+0x5a>
 8002248:	2303      	movs	r3, #3
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e0cc      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_4)  Channel = ADC_Channel_4;  else if (Port == GPIOA && Pin == GPIO_Pin_5)  Channel = ADC_Channel_5;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <FIND_CHANNEL+0x204>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d105      	bne.n	8002262 <FIND_CHANNEL+0x6e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d102      	bne.n	8002262 <FIND_CHANNEL+0x6e>
 800225c:	2304      	movs	r3, #4
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e0c2      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <FIND_CHANNEL+0x204>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d105      	bne.n	8002276 <FIND_CHANNEL+0x82>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b20      	cmp	r3, #32
 800226e:	d102      	bne.n	8002276 <FIND_CHANNEL+0x82>
 8002270:	2305      	movs	r3, #5
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e0b8      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_6)  Channel = ADC_Channel_6;  else if (Port == GPIOA && Pin == GPIO_Pin_7)  Channel = ADC_Channel_7;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a5f      	ldr	r2, [pc, #380]	; (80023f8 <FIND_CHANNEL+0x204>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d105      	bne.n	800228a <FIND_CHANNEL+0x96>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d102      	bne.n	800228a <FIND_CHANNEL+0x96>
 8002284:	2306      	movs	r3, #6
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e0ae      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <FIND_CHANNEL+0x204>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <FIND_CHANNEL+0xaa>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d102      	bne.n	800229e <FIND_CHANNEL+0xaa>
 8002298:	2307      	movs	r3, #7
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e0a4      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOB && Pin == GPIO_Pin_0)  Channel = ADC_Channel_8;  else if (Port == GPIOB && Pin == GPIO_Pin_1)  Channel = ADC_Channel_9;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a56      	ldr	r2, [pc, #344]	; (80023fc <FIND_CHANNEL+0x208>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <FIND_CHANNEL+0xbe>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d102      	bne.n	80022b2 <FIND_CHANNEL+0xbe>
 80022ac:	2308      	movs	r3, #8
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e09a      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <FIND_CHANNEL+0x208>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d105      	bne.n	80022c6 <FIND_CHANNEL+0xd2>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d102      	bne.n	80022c6 <FIND_CHANNEL+0xd2>
 80022c0:	2309      	movs	r3, #9
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e090      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_0)  Channel = ADC_Channel_10; else if (Port == GPIOC && Pin == GPIO_Pin_1)  Channel = ADC_Channel_11;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <FIND_CHANNEL+0x20c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d105      	bne.n	80022da <FIND_CHANNEL+0xe6>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <FIND_CHANNEL+0xe6>
 80022d4:	230a      	movs	r3, #10
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e086      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a48      	ldr	r2, [pc, #288]	; (8002400 <FIND_CHANNEL+0x20c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d105      	bne.n	80022ee <FIND_CHANNEL+0xfa>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d102      	bne.n	80022ee <FIND_CHANNEL+0xfa>
 80022e8:	230b      	movs	r3, #11
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e07c      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_2)  Channel = ADC_Channel_12; else if (Port == GPIOC && Pin == GPIO_Pin_3)  Channel = ADC_Channel_13;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a43      	ldr	r2, [pc, #268]	; (8002400 <FIND_CHANNEL+0x20c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d105      	bne.n	8002302 <FIND_CHANNEL+0x10e>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d102      	bne.n	8002302 <FIND_CHANNEL+0x10e>
 80022fc:	230c      	movs	r3, #12
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e072      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <FIND_CHANNEL+0x20c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d105      	bne.n	8002316 <FIND_CHANNEL+0x122>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d102      	bne.n	8002316 <FIND_CHANNEL+0x122>
 8002310:	230d      	movs	r3, #13
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e068      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_4)  Channel = ADC_Channel_14;	else if (Port == GPIOC && Pin == GPIO_Pin_5)  Channel = ADC_Channel_15;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a39      	ldr	r2, [pc, #228]	; (8002400 <FIND_CHANNEL+0x20c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d105      	bne.n	800232a <FIND_CHANNEL+0x136>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b10      	cmp	r3, #16
 8002322:	d102      	bne.n	800232a <FIND_CHANNEL+0x136>
 8002324:	230e      	movs	r3, #14
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e05e      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a34      	ldr	r2, [pc, #208]	; (8002400 <FIND_CHANNEL+0x20c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d105      	bne.n	800233e <FIND_CHANNEL+0x14a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b20      	cmp	r3, #32
 8002336:	d102      	bne.n	800233e <FIND_CHANNEL+0x14a>
 8002338:	230f      	movs	r3, #15
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e054      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_3)  Channel = ADC_Channel_9;	else if (Port == GPIOF && Pin == GPIO_Pin_4)  Channel = ADC_Channel_14;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <FIND_CHANNEL+0x210>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d105      	bne.n	8002352 <FIND_CHANNEL+0x15e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d102      	bne.n	8002352 <FIND_CHANNEL+0x15e>
 800234c:	2309      	movs	r3, #9
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e04a      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <FIND_CHANNEL+0x210>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d105      	bne.n	8002366 <FIND_CHANNEL+0x172>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d102      	bne.n	8002366 <FIND_CHANNEL+0x172>
 8002360:	230e      	movs	r3, #14
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e040      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_5)  Channel = ADC_Channel_15;	else if (Port == GPIOF && Pin == GPIO_Pin_6)  Channel = ADC_Channel_4;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <FIND_CHANNEL+0x210>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d105      	bne.n	800237a <FIND_CHANNEL+0x186>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b20      	cmp	r3, #32
 8002372:	d102      	bne.n	800237a <FIND_CHANNEL+0x186>
 8002374:	230f      	movs	r3, #15
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e036      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <FIND_CHANNEL+0x210>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d105      	bne.n	800238e <FIND_CHANNEL+0x19a>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d102      	bne.n	800238e <FIND_CHANNEL+0x19a>
 8002388:	2304      	movs	r3, #4
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e02c      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_7)  Channel = ADC_Channel_5;	else if (Port == GPIOF && Pin == GPIO_Pin_8)  Channel = ADC_Channel_6;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <FIND_CHANNEL+0x210>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d105      	bne.n	80023a2 <FIND_CHANNEL+0x1ae>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d102      	bne.n	80023a2 <FIND_CHANNEL+0x1ae>
 800239c:	2305      	movs	r3, #5
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e022      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <FIND_CHANNEL+0x210>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d106      	bne.n	80023b8 <FIND_CHANNEL+0x1c4>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b0:	d102      	bne.n	80023b8 <FIND_CHANNEL+0x1c4>
 80023b2:	2306      	movs	r3, #6
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e017      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_9)  Channel = ADC_Channel_7;	else if (Port == GPIOF && Pin == GPIO_Pin_10) Channel = ADC_Channel_8;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <FIND_CHANNEL+0x210>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d106      	bne.n	80023ce <FIND_CHANNEL+0x1da>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c6:	d102      	bne.n	80023ce <FIND_CHANNEL+0x1da>
 80023c8:	2307      	movs	r3, #7
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00c      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <FIND_CHANNEL+0x210>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d106      	bne.n	80023e4 <FIND_CHANNEL+0x1f0>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023dc:	d102      	bne.n	80023e4 <FIND_CHANNEL+0x1f0>
 80023de:	2308      	movs	r3, #8
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e001      	b.n	80023e8 <FIND_CHANNEL+0x1f4>
	else 										  Channel = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

	return Channel;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40021400 	.word	0x40021400

08002408 <P_LCD_2x16_InitIO>:

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	e046      	b.n	80024a4 <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 8002416:	7dfa      	ldrb	r2, [r7, #23]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f962 	bl	80016f4 <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 8002430:	7dfa      	ldrb	r2, [r7, #23]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	891b      	ldrh	r3, [r3, #8]
 8002442:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002444:	2301      	movs	r3, #1
 8002446:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002448:	2300      	movs	r3, #0
 800244a:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800244c:	2301      	movs	r3, #1
 800244e:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002450:	2302      	movs	r3, #2
 8002452:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8002454:	7dfa      	ldrb	r2, [r7, #23]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f107 020c 	add.w	r2, r7, #12
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe ffdf 	bl	8001430 <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 8002472:	7dfa      	ldrb	r2, [r7, #23]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	7c1b      	ldrb	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f810 	bl	80024b2 <P_LCD_2x16_PinLo>
 8002492:	e004      	b.n	800249e <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f829 	bl	80024f0 <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	3301      	adds	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d9b5      	bls.n	8002416 <P_LCD_2x16_InitIO+0xe>
	}
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	6039      	str	r1, [r7, #0]
 80024bc:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 80024be:	79fa      	ldrb	r2, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	79fa      	ldrb	r2, [r7, #7]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	891b      	ldrh	r3, [r3, #8]
 80024e2:	834b      	strh	r3, [r1, #26]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 80024fc:	79fa      	ldrb	r2, [r7, #7]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	461a      	mov	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	891b      	ldrh	r3, [r3, #8]
 8002520:	830b      	strh	r3, [r1, #24]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8002536:	bf00      	nop
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1fa      	bne.n	8002538 <P_LCD_2x16_Delay+0xa>
  {
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	2002      	movs	r0, #2
 800255a:	f7ff ffc9 	bl	80024f0 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2003      	movs	r0, #3
 8002562:	f7ff ffc5 	bl	80024f0 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	2004      	movs	r0, #4
 800256a:	f7ff ffa2 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	2005      	movs	r0, #5
 8002572:	f7ff ff9e 	bl	80024b2 <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f82d 	bl	80025d6 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 800257c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002580:	f7ff ffd5 	bl	800252e <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f826 	bl	80025d6 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 800258a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800258e:	f7ff ffce 	bl	800252e <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f81f 	bl	80025d6 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8002598:	f24c 3050 	movw	r0, #50000	; 0xc350
 800259c:	f7ff ffc7 	bl	800252e <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff ff85 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	2003      	movs	r0, #3
 80025ac:	f7ff ffa0 	bl	80024f0 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	2004      	movs	r0, #4
 80025b4:	f7ff ff7d 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	2005      	movs	r0, #5
 80025bc:	f7ff ff79 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f808 	bl	80025d6 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80025c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ca:	f7ff ffb0 	bl	800252e <P_LCD_2x16_Delay>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff ff85 	bl	80024f0 <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 80025e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ea:	f7ff ffa0 	bl	800252e <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff ff5e 	bl	80024b2 <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 80025f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025fa:	f7ff ff98 	bl	800252e <P_LCD_2x16_Delay>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	6039      	str	r1, [r7, #0]
 8002610:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff ff4c 	bl	80024b2 <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	da04      	bge.n	800262c <P_LCD_2x16_Cmd+0x26>
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	2005      	movs	r0, #5
 8002626:	f7ff ff63 	bl	80024f0 <P_LCD_2x16_PinHi>
 800262a:	e003      	b.n	8002634 <P_LCD_2x16_Cmd+0x2e>
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	2005      	movs	r0, #5
 8002630:	f7ff ff3f 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <P_LCD_2x16_Cmd+0x42>
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	2004      	movs	r0, #4
 8002642:	f7ff ff55 	bl	80024f0 <P_LCD_2x16_PinHi>
 8002646:	e003      	b.n	8002650 <P_LCD_2x16_Cmd+0x4a>
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	2004      	movs	r0, #4
 800264c:	f7ff ff31 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <P_LCD_2x16_Cmd+0x5e>
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	2003      	movs	r0, #3
 800265e:	f7ff ff47 	bl	80024f0 <P_LCD_2x16_PinHi>
 8002662:	e003      	b.n	800266c <P_LCD_2x16_Cmd+0x66>
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	2003      	movs	r0, #3
 8002668:	f7ff ff23 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <P_LCD_2x16_Cmd+0x7a>
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	2002      	movs	r0, #2
 800267a:	f7ff ff39 	bl	80024f0 <P_LCD_2x16_PinHi>
 800267e:	e003      	b.n	8002688 <P_LCD_2x16_Cmd+0x82>
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	2002      	movs	r0, #2
 8002684:	f7ff ff15 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8002688:	6838      	ldr	r0, [r7, #0]
 800268a:	f7ff ffa4 	bl	80025d6 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <P_LCD_2x16_Cmd+0x9c>
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	2005      	movs	r0, #5
 800269c:	f7ff ff28 	bl	80024f0 <P_LCD_2x16_PinHi>
 80026a0:	e003      	b.n	80026aa <P_LCD_2x16_Cmd+0xa4>
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	2005      	movs	r0, #5
 80026a6:	f7ff ff04 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <P_LCD_2x16_Cmd+0xb8>
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	2004      	movs	r0, #4
 80026b8:	f7ff ff1a 	bl	80024f0 <P_LCD_2x16_PinHi>
 80026bc:	e003      	b.n	80026c6 <P_LCD_2x16_Cmd+0xc0>
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	2004      	movs	r0, #4
 80026c2:	f7ff fef6 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <P_LCD_2x16_Cmd+0xd4>
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	2003      	movs	r0, #3
 80026d4:	f7ff ff0c 	bl	80024f0 <P_LCD_2x16_PinHi>
 80026d8:	e003      	b.n	80026e2 <P_LCD_2x16_Cmd+0xdc>
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	2003      	movs	r0, #3
 80026de:	f7ff fee8 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <P_LCD_2x16_Cmd+0xf0>
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff fefe 	bl	80024f0 <P_LCD_2x16_PinHi>
 80026f4:	e003      	b.n	80026fe <P_LCD_2x16_Cmd+0xf8>
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7ff feda 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f7ff ff69 	bl	80025d6 <P_LCD_2x16_Clk>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <P_LCD_2x16_Cursor>:

void P_LCD_2x16_Cursor(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	4613      	mov	r3, r2
 800271a:	70bb      	strb	r3, [r7, #2]
  uint8_t wert;

  if(x>=TLCD_MAXX) x=0;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	d901      	bls.n	8002726 <P_LCD_2x16_Cursor+0x1a>
 8002722:	2300      	movs	r3, #0
 8002724:	70fb      	strb	r3, [r7, #3]
  if(y>=TLCD_MAXY) y=0;
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d901      	bls.n	8002730 <P_LCD_2x16_Cursor+0x24>
 800272c:	2300      	movs	r3, #0
 800272e:	70bb      	strb	r3, [r7, #2]

  wert=(y<<6);
 8002730:	78bb      	ldrb	r3, [r7, #2]
 8002732:	019b      	lsls	r3, r3, #6
 8002734:	73fb      	strb	r3, [r7, #15]
  wert|=x;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	4313      	orrs	r3, r2
 800273c:	73fb      	strb	r3, [r7, #15]
  wert|=0x80;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002744:	73fb      	strb	r3, [r7, #15]
  P_LCD_2x16_Cmd(wert,LCD_2X16);
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff5b 	bl	8002606 <P_LCD_2x16_Cmd>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <P_LCD_2x16_Data>:

void P_LCD_2x16_Data(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  // RS=Hi (Data)
  P_LCD_2x16_PinHi(TLCD_RS, LCD_2X16);
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fec2 	bl	80024f0 <P_LCD_2x16_PinHi>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da04      	bge.n	800277e <P_LCD_2x16_Data+0x26>
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	2005      	movs	r0, #5
 8002778:	f7ff feba 	bl	80024f0 <P_LCD_2x16_PinHi>
 800277c:	e003      	b.n	8002786 <P_LCD_2x16_Data+0x2e>
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	2005      	movs	r0, #5
 8002782:	f7ff fe96 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <P_LCD_2x16_Data+0x42>
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	2004      	movs	r0, #4
 8002794:	f7ff feac 	bl	80024f0 <P_LCD_2x16_PinHi>
 8002798:	e003      	b.n	80027a2 <P_LCD_2x16_Data+0x4a>
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	2004      	movs	r0, #4
 800279e:	f7ff fe88 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <P_LCD_2x16_Data+0x5e>
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	2003      	movs	r0, #3
 80027b0:	f7ff fe9e 	bl	80024f0 <P_LCD_2x16_PinHi>
 80027b4:	e003      	b.n	80027be <P_LCD_2x16_Data+0x66>
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	2003      	movs	r0, #3
 80027ba:	f7ff fe7a 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <P_LCD_2x16_Data+0x7a>
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7ff fe90 	bl	80024f0 <P_LCD_2x16_PinHi>
 80027d0:	e003      	b.n	80027da <P_LCD_2x16_Data+0x82>
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7ff fe6c 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f7ff fefb 	bl	80025d6 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <P_LCD_2x16_Data+0x9c>
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	2005      	movs	r0, #5
 80027ee:	f7ff fe7f 	bl	80024f0 <P_LCD_2x16_PinHi>
 80027f2:	e003      	b.n	80027fc <P_LCD_2x16_Data+0xa4>
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	2005      	movs	r0, #5
 80027f8:	f7ff fe5b 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <P_LCD_2x16_Data+0xb8>
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	2004      	movs	r0, #4
 800280a:	f7ff fe71 	bl	80024f0 <P_LCD_2x16_PinHi>
 800280e:	e003      	b.n	8002818 <P_LCD_2x16_Data+0xc0>
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	2004      	movs	r0, #4
 8002814:	f7ff fe4d 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <P_LCD_2x16_Data+0xd4>
 8002822:	6839      	ldr	r1, [r7, #0]
 8002824:	2003      	movs	r0, #3
 8002826:	f7ff fe63 	bl	80024f0 <P_LCD_2x16_PinHi>
 800282a:	e003      	b.n	8002834 <P_LCD_2x16_Data+0xdc>
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	2003      	movs	r0, #3
 8002830:	f7ff fe3f 	bl	80024b2 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <P_LCD_2x16_Data+0xf0>
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	2002      	movs	r0, #2
 8002842:	f7ff fe55 	bl	80024f0 <P_LCD_2x16_PinHi>
 8002846:	e003      	b.n	8002850 <P_LCD_2x16_Data+0xf8>
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	2002      	movs	r0, #2
 800284c:	f7ff fe31 	bl	80024b2 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f7ff fec0 	bl	80025d6 <P_LCD_2x16_Clk>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <FIND_EXTI_PORT_SOURCE>:
	else if(Pin == GPIO_Pin_15) return GPIO_PinSource15;
}

//Interrupcion externa:
uint8_t FIND_EXTI_PORT_SOURCE(GPIO_TypeDef* Port)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <FIND_EXTI_PORT_SOURCE+0x20>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <FIND_EXTI_PORT_SOURCE+0x14>
		return EXTI_PortSourceGPIOA;
 8002870:	2300      	movs	r3, #0
 8002872:	e7ff      	b.n	8002874 <FIND_EXTI_PORT_SOURCE+0x14>
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40020000 	.word	0x40020000

08002884 <FIND_EXTI_PIN_SOURCE>:

uint8_t FIND_EXTI_PIN_SOURCE(uint32_t Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	if(Pin == GPIO_Pin_0)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <FIND_EXTI_PIN_SOURCE+0x12>
		return EXTI_PinSource0;
 8002892:	2300      	movs	r3, #0
 8002894:	e7ff      	b.n	8002896 <FIND_EXTI_PIN_SOURCE+0x12>
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <FIND_EXTI_LINE>:

uint32_t FIND_EXTI_LINE(GPIO_TypeDef* Port, uint32_t Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
	if(Port == GPIOA && Pin == GPIO_Pin_0)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <FIND_EXTI_LINE+0x28>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d104      	bne.n	80028c0 <FIND_EXTI_LINE+0x1c>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <FIND_EXTI_LINE+0x1c>
		return EXTI_Line0;
 80028bc:	2301      	movs	r3, #1
 80028be:	e7ff      	b.n	80028c0 <FIND_EXTI_LINE+0x1c>
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40020000 	.word	0x40020000

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028d6:	e003      	b.n	80028e0 <LoopCopyDataInit>

080028d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028de:	3104      	adds	r1, #4

080028e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028e8:	d3f6      	bcc.n	80028d8 <CopyDataInit>
  ldr  r2, =_sbss
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028ec:	e002      	b.n	80028f4 <LoopFillZerobss>

080028ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028f0:	f842 3b04 	str.w	r3, [r2], #4

080028f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028f8:	d3f9      	bcc.n	80028ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028fa:	f000 f83b 	bl	8002974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f000 f967 	bl	8002bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff f885 	bl	8001a10 <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002908:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800290c:	08005cd0 	.word	0x08005cd0
  ldr  r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002914:	2000070c 	.word	0x2000070c
  ldr  r2, =_sbss
 8002918:	2000070c 	.word	0x2000070c
  ldr  r3, = _ebss
 800291c:	200007a0 	.word	0x200007a0

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>

08002922 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002934:	e7fe      	b.n	8002934 <HardFault_Handler+0x4>

08002936 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800293a:	e7fe      	b.n	800293a <MemManage_Handler+0x4>

0800293c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002940:	e7fe      	b.n	8002940 <BusFault_Handler+0x4>

08002942 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002946:	e7fe      	b.n	8002946 <UsageFault_Handler+0x4>

08002948 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002978:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <SystemInit+0x60>)
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <SystemInit+0x60>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <SystemInit+0x64>)
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <SystemInit+0x64>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <SystemInit+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800299a:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <SystemInit+0x64>)
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <SystemInit+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <SystemInit+0x64>)
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <SystemInit+0x68>)
 80029ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029b0:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <SystemInit+0x64>)
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <SystemInit+0x64>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <SystemInit+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80029c2:	f000 f889 	bl	8002ad8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <SystemInit+0x60>)
 80029c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029cc:	609a      	str	r2, [r3, #8]
#endif
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	24003010 	.word	0x24003010

080029e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	2302      	movs	r3, #2
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	2302      	movs	r3, #2
 80029f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d007      	beq.n	8002a1a <SystemCoreClockUpdate+0x3a>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d009      	beq.n	8002a22 <SystemCoreClockUpdate+0x42>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d13d      	bne.n	8002a8e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <SystemCoreClockUpdate+0xec>)
 8002a16:	601a      	str	r2, [r3, #0]
      break;
 8002a18:	e03d      	b.n	8002a96 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <SystemCoreClockUpdate+0xf0>)
 8002a1e:	601a      	str	r2, [r3, #0]
      break;
 8002a20:	e039      	b.n	8002a96 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0d9b      	lsrs	r3, r3, #22
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a36:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <SystemCoreClockUpdate+0xf0>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a48:	6852      	ldr	r2, [r2, #4]
 8002a4a:	0992      	lsrs	r2, r2, #6
 8002a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e00b      	b.n	8002a70 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <SystemCoreClockUpdate+0xec>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a62:	6852      	ldr	r2, [r2, #4]
 8002a64:	0992      	lsrs	r2, r2, #6
 8002a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002a8a:	6013      	str	r3, [r2, #0]
      break;
 8002a8c:	e003      	b.n	8002a96 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <SystemCoreClockUpdate+0xec>)
 8002a92:	601a      	str	r2, [r3, #0]
      break;
 8002a94:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <SystemCoreClockUpdate+0xe4>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <SystemCoreClockUpdate+0xf4>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <SystemCoreClockUpdate+0xe8>)
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	20000088 	.word	0x20000088
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200
 8002ad4:	2000008c 	.word	0x2000008c

08002ad8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002ae6:	4a36      	ldr	r2, [pc, #216]	; (8002bc0 <SetSysClock+0xe8>)
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <SetSysClock+0xe8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <SetSysClock+0xe8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <SetSysClock+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b0e:	d1f0      	bne.n	8002af2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <SetSysClock+0xe8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	e001      	b.n	8002b26 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d142      	bne.n	8002bb2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <SetSysClock+0xe8>)
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <SetSysClock+0xe8>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <SetSysClock+0xec>)
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <SetSysClock+0xec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b42:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <SetSysClock+0xe8>)
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <SetSysClock+0xe8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <SetSysClock+0xe8>)
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <SetSysClock+0xe8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <SetSysClock+0xe8>)
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <SetSysClock+0xe8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002b62:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <SetSysClock+0xe8>)
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <SetSysClock+0xf0>)
 8002b68:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <SetSysClock+0xe8>)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <SetSysClock+0xe8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002b76:	bf00      	nop
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <SetSysClock+0xe8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f9      	beq.n	8002b78 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <SetSysClock+0xf4>)
 8002b86:	f240 7205 	movw	r2, #1797	; 0x705
 8002b8a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <SetSysClock+0xe8>)
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <SetSysClock+0xe8>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <SetSysClock+0xe8>)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <SetSysClock+0xe8>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002ba4:	bf00      	nop
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <SetSysClock+0xe8>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d1f9      	bne.n	8002ba6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	07405a19 	.word	0x07405a19
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <__libc_init_array>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	4e0d      	ldr	r6, [pc, #52]	; (8002c08 <__libc_init_array+0x38>)
 8002bd4:	4c0d      	ldr	r4, [pc, #52]	; (8002c0c <__libc_init_array+0x3c>)
 8002bd6:	1ba4      	subs	r4, r4, r6
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	2500      	movs	r5, #0
 8002bdc:	42a5      	cmp	r5, r4
 8002bde:	d109      	bne.n	8002bf4 <__libc_init_array+0x24>
 8002be0:	4e0b      	ldr	r6, [pc, #44]	; (8002c10 <__libc_init_array+0x40>)
 8002be2:	4c0c      	ldr	r4, [pc, #48]	; (8002c14 <__libc_init_array+0x44>)
 8002be4:	f002 ff12 	bl	8005a0c <_init>
 8002be8:	1ba4      	subs	r4, r4, r6
 8002bea:	10a4      	asrs	r4, r4, #2
 8002bec:	2500      	movs	r5, #0
 8002bee:	42a5      	cmp	r5, r4
 8002bf0:	d105      	bne.n	8002bfe <__libc_init_array+0x2e>
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf8:	4798      	blx	r3
 8002bfa:	3501      	adds	r5, #1
 8002bfc:	e7ee      	b.n	8002bdc <__libc_init_array+0xc>
 8002bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c02:	4798      	blx	r3
 8002c04:	3501      	adds	r5, #1
 8002c06:	e7f2      	b.n	8002bee <__libc_init_array+0x1e>
 8002c08:	08005cc8 	.word	0x08005cc8
 8002c0c:	08005cc8 	.word	0x08005cc8
 8002c10:	08005cc8 	.word	0x08005cc8
 8002c14:	08005ccc 	.word	0x08005ccc

08002c18 <sprintf>:
 8002c18:	b40e      	push	{r1, r2, r3}
 8002c1a:	b500      	push	{lr}
 8002c1c:	b09c      	sub	sp, #112	; 0x70
 8002c1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c22:	ab1d      	add	r3, sp, #116	; 0x74
 8002c24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002c28:	9002      	str	r0, [sp, #8]
 8002c2a:	9006      	str	r0, [sp, #24]
 8002c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c30:	480a      	ldr	r0, [pc, #40]	; (8002c5c <sprintf+0x44>)
 8002c32:	9104      	str	r1, [sp, #16]
 8002c34:	9107      	str	r1, [sp, #28]
 8002c36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	a902      	add	r1, sp, #8
 8002c48:	f000 f80a 	bl	8002c60 <_svfprintf_r>
 8002c4c:	9b02      	ldr	r3, [sp, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	b01c      	add	sp, #112	; 0x70
 8002c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c58:	b003      	add	sp, #12
 8002c5a:	4770      	bx	lr
 8002c5c:	2000009c 	.word	0x2000009c

08002c60 <_svfprintf_r>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	b0bd      	sub	sp, #244	; 0xf4
 8002c66:	468a      	mov	sl, r1
 8002c68:	4615      	mov	r5, r2
 8002c6a:	461f      	mov	r7, r3
 8002c6c:	4683      	mov	fp, r0
 8002c6e:	f001 fe25 	bl	80048bc <_localeconv_r>
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	930d      	str	r3, [sp, #52]	; 0x34
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fb0a 	bl	8000290 <strlen>
 8002c7c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002c80:	9008      	str	r0, [sp, #32]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	d518      	bpl.n	8002cb8 <_svfprintf_r+0x58>
 8002c86:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002c8a:	b9ab      	cbnz	r3, 8002cb8 <_svfprintf_r+0x58>
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	4658      	mov	r0, fp
 8002c90:	f001 fe2a 	bl	80048e8 <_malloc_r>
 8002c94:	f8ca 0000 	str.w	r0, [sl]
 8002c98:	f8ca 0010 	str.w	r0, [sl, #16]
 8002c9c:	b948      	cbnz	r0, 8002cb2 <_svfprintf_r+0x52>
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	f8cb 3000 	str.w	r3, [fp]
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8002caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cac:	b03d      	add	sp, #244	; 0xf4
 8002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	f8ca 3014 	str.w	r3, [sl, #20]
 8002cb8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002f20 <_svfprintf_r+0x2c0>
 8002cbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002cc4:	941f      	str	r4, [sp, #124]	; 0x7c
 8002cc6:	9321      	str	r3, [sp, #132]	; 0x84
 8002cc8:	9320      	str	r3, [sp, #128]	; 0x80
 8002cca:	9505      	str	r5, [sp, #20]
 8002ccc:	9303      	str	r3, [sp, #12]
 8002cce:	9311      	str	r3, [sp, #68]	; 0x44
 8002cd0:	9310      	str	r3, [sp, #64]	; 0x40
 8002cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd4:	9d05      	ldr	r5, [sp, #20]
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cdc:	b112      	cbz	r2, 8002ce4 <_svfprintf_r+0x84>
 8002cde:	2a25      	cmp	r2, #37	; 0x25
 8002ce0:	f040 8083 	bne.w	8002dea <_svfprintf_r+0x18a>
 8002ce4:	9b05      	ldr	r3, [sp, #20]
 8002ce6:	1aee      	subs	r6, r5, r3
 8002ce8:	d00d      	beq.n	8002d06 <_svfprintf_r+0xa6>
 8002cea:	e884 0048 	stmia.w	r4, {r3, r6}
 8002cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cf0:	4433      	add	r3, r6
 8002cf2:	9321      	str	r3, [sp, #132]	; 0x84
 8002cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	2b07      	cmp	r3, #7
 8002cfa:	9320      	str	r3, [sp, #128]	; 0x80
 8002cfc:	dc77      	bgt.n	8002dee <_svfprintf_r+0x18e>
 8002cfe:	3408      	adds	r4, #8
 8002d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d02:	4433      	add	r3, r6
 8002d04:	9309      	str	r3, [sp, #36]	; 0x24
 8002d06:	782b      	ldrb	r3, [r5, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8729 	beq.w	8003b60 <_svfprintf_r+0xf00>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	1c69      	adds	r1, r5, #1
 8002d12:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002d16:	461a      	mov	r2, r3
 8002d18:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8002d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8002d1e:	461d      	mov	r5, r3
 8002d20:	200a      	movs	r0, #10
 8002d22:	1c4e      	adds	r6, r1, #1
 8002d24:	7809      	ldrb	r1, [r1, #0]
 8002d26:	9605      	str	r6, [sp, #20]
 8002d28:	9102      	str	r1, [sp, #8]
 8002d2a:	9902      	ldr	r1, [sp, #8]
 8002d2c:	3920      	subs	r1, #32
 8002d2e:	2958      	cmp	r1, #88	; 0x58
 8002d30:	f200 8418 	bhi.w	8003564 <_svfprintf_r+0x904>
 8002d34:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d38:	041600a6 	.word	0x041600a6
 8002d3c:	00ab0416 	.word	0x00ab0416
 8002d40:	04160416 	.word	0x04160416
 8002d44:	04160416 	.word	0x04160416
 8002d48:	04160416 	.word	0x04160416
 8002d4c:	006500ae 	.word	0x006500ae
 8002d50:	00b70416 	.word	0x00b70416
 8002d54:	041600ba 	.word	0x041600ba
 8002d58:	00da00d7 	.word	0x00da00d7
 8002d5c:	00da00da 	.word	0x00da00da
 8002d60:	00da00da 	.word	0x00da00da
 8002d64:	00da00da 	.word	0x00da00da
 8002d68:	00da00da 	.word	0x00da00da
 8002d6c:	04160416 	.word	0x04160416
 8002d70:	04160416 	.word	0x04160416
 8002d74:	04160416 	.word	0x04160416
 8002d78:	04160416 	.word	0x04160416
 8002d7c:	04160416 	.word	0x04160416
 8002d80:	012b0115 	.word	0x012b0115
 8002d84:	012b0416 	.word	0x012b0416
 8002d88:	04160416 	.word	0x04160416
 8002d8c:	04160416 	.word	0x04160416
 8002d90:	041600ed 	.word	0x041600ed
 8002d94:	03400416 	.word	0x03400416
 8002d98:	04160416 	.word	0x04160416
 8002d9c:	04160416 	.word	0x04160416
 8002da0:	03a80416 	.word	0x03a80416
 8002da4:	04160416 	.word	0x04160416
 8002da8:	04160086 	.word	0x04160086
 8002dac:	04160416 	.word	0x04160416
 8002db0:	04160416 	.word	0x04160416
 8002db4:	04160416 	.word	0x04160416
 8002db8:	04160416 	.word	0x04160416
 8002dbc:	01070416 	.word	0x01070416
 8002dc0:	012b006b 	.word	0x012b006b
 8002dc4:	012b012b 	.word	0x012b012b
 8002dc8:	006b00f0 	.word	0x006b00f0
 8002dcc:	04160416 	.word	0x04160416
 8002dd0:	041600fa 	.word	0x041600fa
 8002dd4:	03420322 	.word	0x03420322
 8002dd8:	01010376 	.word	0x01010376
 8002ddc:	03870416 	.word	0x03870416
 8002de0:	03aa0416 	.word	0x03aa0416
 8002de4:	04160416 	.word	0x04160416
 8002de8:	03c2      	.short	0x03c2
 8002dea:	461d      	mov	r5, r3
 8002dec:	e773      	b.n	8002cd6 <_svfprintf_r+0x76>
 8002dee:	aa1f      	add	r2, sp, #124	; 0x7c
 8002df0:	4651      	mov	r1, sl
 8002df2:	4658      	mov	r0, fp
 8002df4:	f002 fa7e 	bl	80052f4 <__ssprint_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f040 8692 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8002dfe:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e00:	e77e      	b.n	8002d00 <_svfprintf_r+0xa0>
 8002e02:	2301      	movs	r3, #1
 8002e04:	222b      	movs	r2, #43	; 0x2b
 8002e06:	9905      	ldr	r1, [sp, #20]
 8002e08:	e78b      	b.n	8002d22 <_svfprintf_r+0xc2>
 8002e0a:	460f      	mov	r7, r1
 8002e0c:	e7fb      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002e0e:	b10b      	cbz	r3, 8002e14 <_svfprintf_r+0x1b4>
 8002e10:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e14:	06ae      	lsls	r6, r5, #26
 8002e16:	f140 80aa 	bpl.w	8002f6e <_svfprintf_r+0x30e>
 8002e1a:	3707      	adds	r7, #7
 8002e1c:	f027 0707 	bic.w	r7, r7, #7
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e28:	9304      	str	r3, [sp, #16]
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	f177 0300 	sbcs.w	r3, r7, #0
 8002e30:	da06      	bge.n	8002e40 <_svfprintf_r+0x1e0>
 8002e32:	4276      	negs	r6, r6
 8002e34:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002e38:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002e3c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002e40:	2301      	movs	r3, #1
 8002e42:	e2ca      	b.n	80033da <_svfprintf_r+0x77a>
 8002e44:	b10b      	cbz	r3, 8002e4a <_svfprintf_r+0x1ea>
 8002e46:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <_svfprintf_r+0x2c8>)
 8002e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8002e4e:	06ab      	lsls	r3, r5, #26
 8002e50:	f140 8339 	bpl.w	80034c6 <_svfprintf_r+0x866>
 8002e54:	3707      	adds	r7, #7
 8002e56:	f027 0707 	bic.w	r7, r7, #7
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	07e8      	lsls	r0, r5, #31
 8002e66:	d50b      	bpl.n	8002e80 <_svfprintf_r+0x220>
 8002e68:	ea56 0307 	orrs.w	r3, r6, r7
 8002e6c:	d008      	beq.n	8002e80 <_svfprintf_r+0x220>
 8002e6e:	2330      	movs	r3, #48	; 0x30
 8002e70:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002e74:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002e78:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002e7c:	f045 0502 	orr.w	r5, r5, #2
 8002e80:	2302      	movs	r3, #2
 8002e82:	e2a7      	b.n	80033d4 <_svfprintf_r+0x774>
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	d1be      	bne.n	8002e06 <_svfprintf_r+0x1a6>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	e7bb      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002e8e:	f045 0501 	orr.w	r5, r5, #1
 8002e92:	e7b8      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002e94:	683e      	ldr	r6, [r7, #0]
 8002e96:	960a      	str	r6, [sp, #40]	; 0x28
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	f107 0104 	add.w	r1, r7, #4
 8002e9e:	dab4      	bge.n	8002e0a <_svfprintf_r+0x1aa>
 8002ea0:	4276      	negs	r6, r6
 8002ea2:	960a      	str	r6, [sp, #40]	; 0x28
 8002ea4:	460f      	mov	r7, r1
 8002ea6:	f045 0504 	orr.w	r5, r5, #4
 8002eaa:	e7ac      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002eac:	9905      	ldr	r1, [sp, #20]
 8002eae:	1c4e      	adds	r6, r1, #1
 8002eb0:	7809      	ldrb	r1, [r1, #0]
 8002eb2:	9102      	str	r1, [sp, #8]
 8002eb4:	292a      	cmp	r1, #42	; 0x2a
 8002eb6:	d010      	beq.n	8002eda <_svfprintf_r+0x27a>
 8002eb8:	f04f 0900 	mov.w	r9, #0
 8002ebc:	9605      	str	r6, [sp, #20]
 8002ebe:	9902      	ldr	r1, [sp, #8]
 8002ec0:	3930      	subs	r1, #48	; 0x30
 8002ec2:	2909      	cmp	r1, #9
 8002ec4:	f63f af31 	bhi.w	8002d2a <_svfprintf_r+0xca>
 8002ec8:	fb00 1909 	mla	r9, r0, r9, r1
 8002ecc:	9905      	ldr	r1, [sp, #20]
 8002ece:	460e      	mov	r6, r1
 8002ed0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002ed4:	9102      	str	r1, [sp, #8]
 8002ed6:	9605      	str	r6, [sp, #20]
 8002ed8:	e7f1      	b.n	8002ebe <_svfprintf_r+0x25e>
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	9605      	str	r6, [sp, #20]
 8002ede:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002ee2:	3704      	adds	r7, #4
 8002ee4:	e78f      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002ee6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002eea:	e78c      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002eec:	2100      	movs	r1, #0
 8002eee:	910a      	str	r1, [sp, #40]	; 0x28
 8002ef0:	9902      	ldr	r1, [sp, #8]
 8002ef2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002ef4:	3930      	subs	r1, #48	; 0x30
 8002ef6:	fb00 1106 	mla	r1, r0, r6, r1
 8002efa:	910a      	str	r1, [sp, #40]	; 0x28
 8002efc:	9905      	ldr	r1, [sp, #20]
 8002efe:	460e      	mov	r6, r1
 8002f00:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002f04:	9102      	str	r1, [sp, #8]
 8002f06:	9902      	ldr	r1, [sp, #8]
 8002f08:	9605      	str	r6, [sp, #20]
 8002f0a:	3930      	subs	r1, #48	; 0x30
 8002f0c:	2909      	cmp	r1, #9
 8002f0e:	d9ef      	bls.n	8002ef0 <_svfprintf_r+0x290>
 8002f10:	e70b      	b.n	8002d2a <_svfprintf_r+0xca>
 8002f12:	f045 0508 	orr.w	r5, r5, #8
 8002f16:	e776      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002f18:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002f1c:	e773      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002f1e:	bf00      	nop
	...
 8002f28:	08005a61 	.word	0x08005a61
 8002f2c:	9905      	ldr	r1, [sp, #20]
 8002f2e:	7809      	ldrb	r1, [r1, #0]
 8002f30:	296c      	cmp	r1, #108	; 0x6c
 8002f32:	d105      	bne.n	8002f40 <_svfprintf_r+0x2e0>
 8002f34:	9905      	ldr	r1, [sp, #20]
 8002f36:	3101      	adds	r1, #1
 8002f38:	9105      	str	r1, [sp, #20]
 8002f3a:	f045 0520 	orr.w	r5, r5, #32
 8002f3e:	e762      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002f40:	f045 0510 	orr.w	r5, r5, #16
 8002f44:	e75f      	b.n	8002e06 <_svfprintf_r+0x1a6>
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	9304      	str	r3, [sp, #16]
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002f52:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002f56:	f04f 0901 	mov.w	r9, #1
 8002f5a:	4637      	mov	r7, r6
 8002f5c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002f60:	e11b      	b.n	800319a <_svfprintf_r+0x53a>
 8002f62:	b10b      	cbz	r3, 8002f68 <_svfprintf_r+0x308>
 8002f64:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f68:	f045 0510 	orr.w	r5, r5, #16
 8002f6c:	e752      	b.n	8002e14 <_svfprintf_r+0x1b4>
 8002f6e:	f015 0f10 	tst.w	r5, #16
 8002f72:	f107 0304 	add.w	r3, r7, #4
 8002f76:	d003      	beq.n	8002f80 <_svfprintf_r+0x320>
 8002f78:	683e      	ldr	r6, [r7, #0]
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	17f7      	asrs	r7, r6, #31
 8002f7e:	e754      	b.n	8002e2a <_svfprintf_r+0x1ca>
 8002f80:	683e      	ldr	r6, [r7, #0]
 8002f82:	9304      	str	r3, [sp, #16]
 8002f84:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f88:	bf18      	it	ne
 8002f8a:	b236      	sxthne	r6, r6
 8002f8c:	e7f6      	b.n	8002f7c <_svfprintf_r+0x31c>
 8002f8e:	b10b      	cbz	r3, 8002f94 <_svfprintf_r+0x334>
 8002f90:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f94:	3707      	adds	r7, #7
 8002f96:	f027 0707 	bic.w	r7, r7, #7
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	ed97 7b00 	vldr	d7, [r7]
 8002fa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002fa8:	9b06      	ldr	r3, [sp, #24]
 8002faa:	9312      	str	r3, [sp, #72]	; 0x48
 8002fac:	9b07      	ldr	r3, [sp, #28]
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <_svfprintf_r+0x484>)
 8002fba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002fbe:	f7fd fdc1 	bl	8000b44 <__aeabi_dcmpun>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f040 85d5 	bne.w	8003b72 <_svfprintf_r+0xf12>
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fcc:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <_svfprintf_r+0x484>)
 8002fce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002fd2:	f7fd fd99 	bl	8000b08 <__aeabi_dcmple>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f040 85cb 	bne.w	8003b72 <_svfprintf_r+0xf12>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fe4:	f7fd fd86 	bl	8000af4 <__aeabi_dcmplt>
 8002fe8:	b110      	cbz	r0, 8002ff0 <_svfprintf_r+0x390>
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <_svfprintf_r+0x488>)
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <_svfprintf_r+0x48c>)
 8002ff4:	9902      	ldr	r1, [sp, #8]
 8002ff6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002ffa:	2947      	cmp	r1, #71	; 0x47
 8002ffc:	bfcc      	ite	gt
 8002ffe:	4690      	movgt	r8, r2
 8003000:	4698      	movle	r8, r3
 8003002:	f04f 0903 	mov.w	r9, #3
 8003006:	2600      	movs	r6, #0
 8003008:	4637      	mov	r7, r6
 800300a:	e0c6      	b.n	800319a <_svfprintf_r+0x53a>
 800300c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003010:	d022      	beq.n	8003058 <_svfprintf_r+0x3f8>
 8003012:	9b02      	ldr	r3, [sp, #8]
 8003014:	f023 0320 	bic.w	r3, r3, #32
 8003018:	2b47      	cmp	r3, #71	; 0x47
 800301a:	d104      	bne.n	8003026 <_svfprintf_r+0x3c6>
 800301c:	f1b9 0f00 	cmp.w	r9, #0
 8003020:	bf08      	it	eq
 8003022:	f04f 0901 	moveq.w	r9, #1
 8003026:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800302a:	930c      	str	r3, [sp, #48]	; 0x30
 800302c:	9b07      	ldr	r3, [sp, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da15      	bge.n	800305e <_svfprintf_r+0x3fe>
 8003032:	9b06      	ldr	r3, [sp, #24]
 8003034:	930e      	str	r3, [sp, #56]	; 0x38
 8003036:	9b07      	ldr	r3, [sp, #28]
 8003038:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800303c:	930f      	str	r3, [sp, #60]	; 0x3c
 800303e:	232d      	movs	r3, #45	; 0x2d
 8003040:	930b      	str	r3, [sp, #44]	; 0x2c
 8003042:	9b02      	ldr	r3, [sp, #8]
 8003044:	f023 0720 	bic.w	r7, r3, #32
 8003048:	2f46      	cmp	r7, #70	; 0x46
 800304a:	d00e      	beq.n	800306a <_svfprintf_r+0x40a>
 800304c:	2f45      	cmp	r7, #69	; 0x45
 800304e:	d146      	bne.n	80030de <_svfprintf_r+0x47e>
 8003050:	f109 0601 	add.w	r6, r9, #1
 8003054:	2102      	movs	r1, #2
 8003056:	e00a      	b.n	800306e <_svfprintf_r+0x40e>
 8003058:	f04f 0906 	mov.w	r9, #6
 800305c:	e7e3      	b.n	8003026 <_svfprintf_r+0x3c6>
 800305e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003062:	2300      	movs	r3, #0
 8003064:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003068:	e7ea      	b.n	8003040 <_svfprintf_r+0x3e0>
 800306a:	464e      	mov	r6, r9
 800306c:	2103      	movs	r1, #3
 800306e:	ab1d      	add	r3, sp, #116	; 0x74
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	ab1a      	add	r3, sp, #104	; 0x68
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4632      	mov	r2, r6
 8003078:	ab19      	add	r3, sp, #100	; 0x64
 800307a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800307e:	4658      	mov	r0, fp
 8003080:	f000 fe4e 	bl	8003d20 <_dtoa_r>
 8003084:	2f47      	cmp	r7, #71	; 0x47
 8003086:	4680      	mov	r8, r0
 8003088:	d102      	bne.n	8003090 <_svfprintf_r+0x430>
 800308a:	07e8      	lsls	r0, r5, #31
 800308c:	f140 857e 	bpl.w	8003b8c <_svfprintf_r+0xf2c>
 8003090:	eb08 0306 	add.w	r3, r8, r6
 8003094:	2f46      	cmp	r7, #70	; 0x46
 8003096:	9303      	str	r3, [sp, #12]
 8003098:	d111      	bne.n	80030be <_svfprintf_r+0x45e>
 800309a:	f898 3000 	ldrb.w	r3, [r8]
 800309e:	2b30      	cmp	r3, #48	; 0x30
 80030a0:	d109      	bne.n	80030b6 <_svfprintf_r+0x456>
 80030a2:	2200      	movs	r2, #0
 80030a4:	2300      	movs	r3, #0
 80030a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80030aa:	f7fd fd19 	bl	8000ae0 <__aeabi_dcmpeq>
 80030ae:	b910      	cbnz	r0, 80030b6 <_svfprintf_r+0x456>
 80030b0:	f1c6 0601 	rsb	r6, r6, #1
 80030b4:	9619      	str	r6, [sp, #100]	; 0x64
 80030b6:	9a03      	ldr	r2, [sp, #12]
 80030b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030ba:	441a      	add	r2, r3
 80030bc:	9203      	str	r2, [sp, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	2300      	movs	r3, #0
 80030c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80030c6:	f7fd fd0b 	bl	8000ae0 <__aeabi_dcmpeq>
 80030ca:	b988      	cbnz	r0, 80030f0 <_svfprintf_r+0x490>
 80030cc:	2230      	movs	r2, #48	; 0x30
 80030ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80030d0:	9903      	ldr	r1, [sp, #12]
 80030d2:	4299      	cmp	r1, r3
 80030d4:	d90e      	bls.n	80030f4 <_svfprintf_r+0x494>
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	911d      	str	r1, [sp, #116]	; 0x74
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e7f7      	b.n	80030ce <_svfprintf_r+0x46e>
 80030de:	464e      	mov	r6, r9
 80030e0:	e7b8      	b.n	8003054 <_svfprintf_r+0x3f4>
 80030e2:	bf00      	nop
 80030e4:	7fefffff 	.word	0x7fefffff
 80030e8:	08005a51 	.word	0x08005a51
 80030ec:	08005a55 	.word	0x08005a55
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	931d      	str	r3, [sp, #116]	; 0x74
 80030f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80030f6:	2f47      	cmp	r7, #71	; 0x47
 80030f8:	eba3 0308 	sub.w	r3, r3, r8
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	f040 80fa 	bne.w	80032f6 <_svfprintf_r+0x696>
 8003102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003104:	1cd9      	adds	r1, r3, #3
 8003106:	db02      	blt.n	800310e <_svfprintf_r+0x4ae>
 8003108:	4599      	cmp	r9, r3
 800310a:	f280 8120 	bge.w	800334e <_svfprintf_r+0x6ee>
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	3b02      	subs	r3, #2
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003116:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800311a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800311e:	1e53      	subs	r3, r2, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	9319      	str	r3, [sp, #100]	; 0x64
 8003124:	bfb6      	itet	lt
 8003126:	f1c2 0301 	rsblt	r3, r2, #1
 800312a:	222b      	movge	r2, #43	; 0x2b
 800312c:	222d      	movlt	r2, #45	; 0x2d
 800312e:	2b09      	cmp	r3, #9
 8003130:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003134:	f340 80fb 	ble.w	800332e <_svfprintf_r+0x6ce>
 8003138:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800313c:	260a      	movs	r6, #10
 800313e:	fb93 f0f6 	sdiv	r0, r3, r6
 8003142:	fb06 3310 	mls	r3, r6, r0, r3
 8003146:	3330      	adds	r3, #48	; 0x30
 8003148:	2809      	cmp	r0, #9
 800314a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800314e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8003152:	4603      	mov	r3, r0
 8003154:	f300 80e4 	bgt.w	8003320 <_svfprintf_r+0x6c0>
 8003158:	3330      	adds	r3, #48	; 0x30
 800315a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800315e:	3a02      	subs	r2, #2
 8003160:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003164:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003168:	4282      	cmp	r2, r0
 800316a:	4619      	mov	r1, r3
 800316c:	f0c0 80da 	bcc.w	8003324 <_svfprintf_r+0x6c4>
 8003170:	9a03      	ldr	r2, [sp, #12]
 8003172:	ab1b      	add	r3, sp, #108	; 0x6c
 8003174:	1acb      	subs	r3, r1, r3
 8003176:	2a01      	cmp	r2, #1
 8003178:	9310      	str	r3, [sp, #64]	; 0x40
 800317a:	eb03 0902 	add.w	r9, r3, r2
 800317e:	dc02      	bgt.n	8003186 <_svfprintf_r+0x526>
 8003180:	f015 0701 	ands.w	r7, r5, #1
 8003184:	d002      	beq.n	800318c <_svfprintf_r+0x52c>
 8003186:	9b08      	ldr	r3, [sp, #32]
 8003188:	2700      	movs	r7, #0
 800318a:	4499      	add	r9, r3
 800318c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800318e:	b113      	cbz	r3, 8003196 <_svfprintf_r+0x536>
 8003190:	232d      	movs	r3, #45	; 0x2d
 8003192:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003198:	2600      	movs	r6, #0
 800319a:	454e      	cmp	r6, r9
 800319c:	4633      	mov	r3, r6
 800319e:	bfb8      	it	lt
 80031a0:	464b      	movlt	r3, r9
 80031a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80031a4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80031a8:	b113      	cbz	r3, 80031b0 <_svfprintf_r+0x550>
 80031aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031ac:	3301      	adds	r3, #1
 80031ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80031b0:	f015 0302 	ands.w	r3, r5, #2
 80031b4:	9314      	str	r3, [sp, #80]	; 0x50
 80031b6:	bf1e      	ittt	ne
 80031b8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80031ba:	3302      	addne	r3, #2
 80031bc:	930b      	strne	r3, [sp, #44]	; 0x2c
 80031be:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80031c2:	9315      	str	r3, [sp, #84]	; 0x54
 80031c4:	d118      	bne.n	80031f8 <_svfprintf_r+0x598>
 80031c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	930c      	str	r3, [sp, #48]	; 0x30
 80031d0:	dd12      	ble.n	80031f8 <_svfprintf_r+0x598>
 80031d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	4ba9      	ldr	r3, [pc, #676]	; (800347c <_svfprintf_r+0x81c>)
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	f300 81d5 	bgt.w	8003588 <_svfprintf_r+0x928>
 80031de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031e0:	6063      	str	r3, [r4, #4]
 80031e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031e6:	4413      	add	r3, r2
 80031e8:	9321      	str	r3, [sp, #132]	; 0x84
 80031ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031ec:	3301      	adds	r3, #1
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	9320      	str	r3, [sp, #128]	; 0x80
 80031f2:	f300 81e2 	bgt.w	80035ba <_svfprintf_r+0x95a>
 80031f6:	3408      	adds	r4, #8
 80031f8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80031fc:	b173      	cbz	r3, 800321c <_svfprintf_r+0x5bc>
 80031fe:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	2301      	movs	r3, #1
 8003206:	6063      	str	r3, [r4, #4]
 8003208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800320a:	3301      	adds	r3, #1
 800320c:	9321      	str	r3, [sp, #132]	; 0x84
 800320e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003210:	3301      	adds	r3, #1
 8003212:	2b07      	cmp	r3, #7
 8003214:	9320      	str	r3, [sp, #128]	; 0x80
 8003216:	f300 81da 	bgt.w	80035ce <_svfprintf_r+0x96e>
 800321a:	3408      	adds	r4, #8
 800321c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800321e:	b16b      	cbz	r3, 800323c <_svfprintf_r+0x5dc>
 8003220:	ab18      	add	r3, sp, #96	; 0x60
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	2302      	movs	r3, #2
 8003226:	6063      	str	r3, [r4, #4]
 8003228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800322a:	3302      	adds	r3, #2
 800322c:	9321      	str	r3, [sp, #132]	; 0x84
 800322e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003230:	3301      	adds	r3, #1
 8003232:	2b07      	cmp	r3, #7
 8003234:	9320      	str	r3, [sp, #128]	; 0x80
 8003236:	f300 81d4 	bgt.w	80035e2 <_svfprintf_r+0x982>
 800323a:	3408      	adds	r4, #8
 800323c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d114      	bne.n	800326c <_svfprintf_r+0x60c>
 8003242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	dd0f      	ble.n	800326c <_svfprintf_r+0x60c>
 800324c:	4a8c      	ldr	r2, [pc, #560]	; (8003480 <_svfprintf_r+0x820>)
 800324e:	6022      	str	r2, [r4, #0]
 8003250:	2b10      	cmp	r3, #16
 8003252:	f300 81d0 	bgt.w	80035f6 <_svfprintf_r+0x996>
 8003256:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003258:	6063      	str	r3, [r4, #4]
 800325a:	4413      	add	r3, r2
 800325c:	9321      	str	r3, [sp, #132]	; 0x84
 800325e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003260:	3301      	adds	r3, #1
 8003262:	2b07      	cmp	r3, #7
 8003264:	9320      	str	r3, [sp, #128]	; 0x80
 8003266:	f300 81df 	bgt.w	8003628 <_svfprintf_r+0x9c8>
 800326a:	3408      	adds	r4, #8
 800326c:	eba6 0609 	sub.w	r6, r6, r9
 8003270:	2e00      	cmp	r6, #0
 8003272:	dd0f      	ble.n	8003294 <_svfprintf_r+0x634>
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <_svfprintf_r+0x820>)
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	2e10      	cmp	r6, #16
 800327a:	f300 81df 	bgt.w	800363c <_svfprintf_r+0x9dc>
 800327e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003280:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003282:	6066      	str	r6, [r4, #4]
 8003284:	3301      	adds	r3, #1
 8003286:	4406      	add	r6, r0
 8003288:	2b07      	cmp	r3, #7
 800328a:	9621      	str	r6, [sp, #132]	; 0x84
 800328c:	9320      	str	r3, [sp, #128]	; 0x80
 800328e:	f300 81ec 	bgt.w	800366a <_svfprintf_r+0xa0a>
 8003292:	3408      	adds	r4, #8
 8003294:	05eb      	lsls	r3, r5, #23
 8003296:	f100 81f2 	bmi.w	800367e <_svfprintf_r+0xa1e>
 800329a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800329c:	e884 0300 	stmia.w	r4, {r8, r9}
 80032a0:	444b      	add	r3, r9
 80032a2:	9321      	str	r3, [sp, #132]	; 0x84
 80032a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032a6:	3301      	adds	r3, #1
 80032a8:	2b07      	cmp	r3, #7
 80032aa:	9320      	str	r3, [sp, #128]	; 0x80
 80032ac:	f340 8419 	ble.w	8003ae2 <_svfprintf_r+0xe82>
 80032b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80032b2:	4651      	mov	r1, sl
 80032b4:	4658      	mov	r0, fp
 80032b6:	f002 f81d 	bl	80052f4 <__ssprint_r>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	f040 8431 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80032c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80032c2:	076b      	lsls	r3, r5, #29
 80032c4:	f100 8410 	bmi.w	8003ae8 <_svfprintf_r+0xe88>
 80032c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ce:	428a      	cmp	r2, r1
 80032d0:	bfac      	ite	ge
 80032d2:	189b      	addge	r3, r3, r2
 80032d4:	185b      	addlt	r3, r3, r1
 80032d6:	9309      	str	r3, [sp, #36]	; 0x24
 80032d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032da:	b13b      	cbz	r3, 80032ec <_svfprintf_r+0x68c>
 80032dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80032de:	4651      	mov	r1, sl
 80032e0:	4658      	mov	r0, fp
 80032e2:	f002 f807 	bl	80052f4 <__ssprint_r>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	f040 841b 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80032ec:	2300      	movs	r3, #0
 80032ee:	9320      	str	r3, [sp, #128]	; 0x80
 80032f0:	9f04      	ldr	r7, [sp, #16]
 80032f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80032f4:	e4ee      	b.n	8002cd4 <_svfprintf_r+0x74>
 80032f6:	9b02      	ldr	r3, [sp, #8]
 80032f8:	2b65      	cmp	r3, #101	; 0x65
 80032fa:	f77f af0b 	ble.w	8003114 <_svfprintf_r+0x4b4>
 80032fe:	9b02      	ldr	r3, [sp, #8]
 8003300:	2b66      	cmp	r3, #102	; 0x66
 8003302:	d124      	bne.n	800334e <_svfprintf_r+0x6ee>
 8003304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003306:	2b00      	cmp	r3, #0
 8003308:	dd19      	ble.n	800333e <_svfprintf_r+0x6de>
 800330a:	f1b9 0f00 	cmp.w	r9, #0
 800330e:	d101      	bne.n	8003314 <_svfprintf_r+0x6b4>
 8003310:	07ea      	lsls	r2, r5, #31
 8003312:	d502      	bpl.n	800331a <_svfprintf_r+0x6ba>
 8003314:	9a08      	ldr	r2, [sp, #32]
 8003316:	4413      	add	r3, r2
 8003318:	444b      	add	r3, r9
 800331a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800331c:	4699      	mov	r9, r3
 800331e:	e735      	b.n	800318c <_svfprintf_r+0x52c>
 8003320:	460a      	mov	r2, r1
 8003322:	e70c      	b.n	800313e <_svfprintf_r+0x4de>
 8003324:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003328:	f803 1b01 	strb.w	r1, [r3], #1
 800332c:	e71c      	b.n	8003168 <_svfprintf_r+0x508>
 800332e:	2230      	movs	r2, #48	; 0x30
 8003330:	4413      	add	r3, r2
 8003332:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003336:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800333a:	a91c      	add	r1, sp, #112	; 0x70
 800333c:	e718      	b.n	8003170 <_svfprintf_r+0x510>
 800333e:	f1b9 0f00 	cmp.w	r9, #0
 8003342:	d101      	bne.n	8003348 <_svfprintf_r+0x6e8>
 8003344:	07eb      	lsls	r3, r5, #31
 8003346:	d515      	bpl.n	8003374 <_svfprintf_r+0x714>
 8003348:	9b08      	ldr	r3, [sp, #32]
 800334a:	3301      	adds	r3, #1
 800334c:	e7e4      	b.n	8003318 <_svfprintf_r+0x6b8>
 800334e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	429a      	cmp	r2, r3
 8003354:	db06      	blt.n	8003364 <_svfprintf_r+0x704>
 8003356:	07ef      	lsls	r7, r5, #31
 8003358:	d50e      	bpl.n	8003378 <_svfprintf_r+0x718>
 800335a:	9b08      	ldr	r3, [sp, #32]
 800335c:	4413      	add	r3, r2
 800335e:	2267      	movs	r2, #103	; 0x67
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	e7da      	b.n	800331a <_svfprintf_r+0x6ba>
 8003364:	9b03      	ldr	r3, [sp, #12]
 8003366:	9908      	ldr	r1, [sp, #32]
 8003368:	2a00      	cmp	r2, #0
 800336a:	440b      	add	r3, r1
 800336c:	dcf7      	bgt.n	800335e <_svfprintf_r+0x6fe>
 800336e:	f1c2 0201 	rsb	r2, r2, #1
 8003372:	e7f3      	b.n	800335c <_svfprintf_r+0x6fc>
 8003374:	2301      	movs	r3, #1
 8003376:	e7d0      	b.n	800331a <_svfprintf_r+0x6ba>
 8003378:	4613      	mov	r3, r2
 800337a:	e7f0      	b.n	800335e <_svfprintf_r+0x6fe>
 800337c:	b10b      	cbz	r3, 8003382 <_svfprintf_r+0x722>
 800337e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003382:	f015 0f20 	tst.w	r5, #32
 8003386:	f107 0304 	add.w	r3, r7, #4
 800338a:	d008      	beq.n	800339e <_svfprintf_r+0x73e>
 800338c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	17ce      	asrs	r6, r1, #31
 8003392:	4608      	mov	r0, r1
 8003394:	4631      	mov	r1, r6
 8003396:	e9c2 0100 	strd	r0, r1, [r2]
 800339a:	461f      	mov	r7, r3
 800339c:	e49a      	b.n	8002cd4 <_svfprintf_r+0x74>
 800339e:	06ee      	lsls	r6, r5, #27
 80033a0:	d503      	bpl.n	80033aa <_svfprintf_r+0x74a>
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033a6:	6011      	str	r1, [r2, #0]
 80033a8:	e7f7      	b.n	800339a <_svfprintf_r+0x73a>
 80033aa:	0668      	lsls	r0, r5, #25
 80033ac:	d5f9      	bpl.n	80033a2 <_svfprintf_r+0x742>
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80033b4:	8011      	strh	r1, [r2, #0]
 80033b6:	e7f0      	b.n	800339a <_svfprintf_r+0x73a>
 80033b8:	f045 0510 	orr.w	r5, r5, #16
 80033bc:	f015 0320 	ands.w	r3, r5, #32
 80033c0:	d022      	beq.n	8003408 <_svfprintf_r+0x7a8>
 80033c2:	3707      	adds	r7, #7
 80033c4:	f027 0707 	bic.w	r7, r7, #7
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	2300      	movs	r3, #0
 80033d4:	2200      	movs	r2, #0
 80033d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80033da:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80033de:	f000 83db 	beq.w	8003b98 <_svfprintf_r+0xf38>
 80033e2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80033e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80033e8:	ea56 0207 	orrs.w	r2, r6, r7
 80033ec:	f040 83d9 	bne.w	8003ba2 <_svfprintf_r+0xf42>
 80033f0:	f1b9 0f00 	cmp.w	r9, #0
 80033f4:	f000 80aa 	beq.w	800354c <_svfprintf_r+0x8ec>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d076      	beq.n	80034ea <_svfprintf_r+0x88a>
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	f000 8091 	beq.w	8003524 <_svfprintf_r+0x8c4>
 8003402:	2600      	movs	r6, #0
 8003404:	2700      	movs	r7, #0
 8003406:	e3d2      	b.n	8003bae <_svfprintf_r+0xf4e>
 8003408:	1d3a      	adds	r2, r7, #4
 800340a:	f015 0110 	ands.w	r1, r5, #16
 800340e:	9204      	str	r2, [sp, #16]
 8003410:	d002      	beq.n	8003418 <_svfprintf_r+0x7b8>
 8003412:	683e      	ldr	r6, [r7, #0]
 8003414:	2700      	movs	r7, #0
 8003416:	e7dd      	b.n	80033d4 <_svfprintf_r+0x774>
 8003418:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800341c:	d0f9      	beq.n	8003412 <_svfprintf_r+0x7b2>
 800341e:	883e      	ldrh	r6, [r7, #0]
 8003420:	2700      	movs	r7, #0
 8003422:	e7d6      	b.n	80033d2 <_svfprintf_r+0x772>
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	2330      	movs	r3, #48	; 0x30
 800342a:	2278      	movs	r2, #120	; 0x78
 800342c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <_svfprintf_r+0x824>)
 8003432:	683e      	ldr	r6, [r7, #0]
 8003434:	9311      	str	r3, [sp, #68]	; 0x44
 8003436:	2700      	movs	r7, #0
 8003438:	f045 0502 	orr.w	r5, r5, #2
 800343c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003440:	2302      	movs	r3, #2
 8003442:	9202      	str	r2, [sp, #8]
 8003444:	e7c6      	b.n	80033d4 <_svfprintf_r+0x774>
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2600      	movs	r6, #0
 800344a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	f8d7 8000 	ldr.w	r8, [r7]
 8003454:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003458:	d00a      	beq.n	8003470 <_svfprintf_r+0x810>
 800345a:	464a      	mov	r2, r9
 800345c:	4631      	mov	r1, r6
 800345e:	4640      	mov	r0, r8
 8003460:	f7fc fec6 	bl	80001f0 <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	f000 808d 	beq.w	8003584 <_svfprintf_r+0x924>
 800346a:	eba0 0908 	sub.w	r9, r0, r8
 800346e:	e5cb      	b.n	8003008 <_svfprintf_r+0x3a8>
 8003470:	4640      	mov	r0, r8
 8003472:	f7fc ff0d 	bl	8000290 <strlen>
 8003476:	4681      	mov	r9, r0
 8003478:	e5c6      	b.n	8003008 <_svfprintf_r+0x3a8>
 800347a:	bf00      	nop
 800347c:	08005a85 	.word	0x08005a85
 8003480:	08005a95 	.word	0x08005a95
 8003484:	08005a72 	.word	0x08005a72
 8003488:	f045 0510 	orr.w	r5, r5, #16
 800348c:	06a9      	lsls	r1, r5, #26
 800348e:	d509      	bpl.n	80034a4 <_svfprintf_r+0x844>
 8003490:	3707      	adds	r7, #7
 8003492:	f027 0707 	bic.w	r7, r7, #7
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	2301      	movs	r3, #1
 80034a2:	e797      	b.n	80033d4 <_svfprintf_r+0x774>
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	f015 0f10 	tst.w	r5, #16
 80034aa:	9304      	str	r3, [sp, #16]
 80034ac:	d001      	beq.n	80034b2 <_svfprintf_r+0x852>
 80034ae:	683e      	ldr	r6, [r7, #0]
 80034b0:	e002      	b.n	80034b8 <_svfprintf_r+0x858>
 80034b2:	066a      	lsls	r2, r5, #25
 80034b4:	d5fb      	bpl.n	80034ae <_svfprintf_r+0x84e>
 80034b6:	883e      	ldrh	r6, [r7, #0]
 80034b8:	2700      	movs	r7, #0
 80034ba:	e7f1      	b.n	80034a0 <_svfprintf_r+0x840>
 80034bc:	b10b      	cbz	r3, 80034c2 <_svfprintf_r+0x862>
 80034be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80034c2:	4ba3      	ldr	r3, [pc, #652]	; (8003750 <_svfprintf_r+0xaf0>)
 80034c4:	e4c2      	b.n	8002e4c <_svfprintf_r+0x1ec>
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	f015 0f10 	tst.w	r5, #16
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	d001      	beq.n	80034d4 <_svfprintf_r+0x874>
 80034d0:	683e      	ldr	r6, [r7, #0]
 80034d2:	e002      	b.n	80034da <_svfprintf_r+0x87a>
 80034d4:	066e      	lsls	r6, r5, #25
 80034d6:	d5fb      	bpl.n	80034d0 <_svfprintf_r+0x870>
 80034d8:	883e      	ldrh	r6, [r7, #0]
 80034da:	2700      	movs	r7, #0
 80034dc:	e4c2      	b.n	8002e64 <_svfprintf_r+0x204>
 80034de:	4643      	mov	r3, r8
 80034e0:	e366      	b.n	8003bb0 <_svfprintf_r+0xf50>
 80034e2:	2f00      	cmp	r7, #0
 80034e4:	bf08      	it	eq
 80034e6:	2e0a      	cmpeq	r6, #10
 80034e8:	d205      	bcs.n	80034f6 <_svfprintf_r+0x896>
 80034ea:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80034ee:	3630      	adds	r6, #48	; 0x30
 80034f0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80034f4:	e377      	b.n	8003be6 <_svfprintf_r+0xf86>
 80034f6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80034fa:	4630      	mov	r0, r6
 80034fc:	4639      	mov	r1, r7
 80034fe:	220a      	movs	r2, #10
 8003500:	2300      	movs	r3, #0
 8003502:	f7fd fb5d 	bl	8000bc0 <__aeabi_uldivmod>
 8003506:	3230      	adds	r2, #48	; 0x30
 8003508:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800350c:	2300      	movs	r3, #0
 800350e:	4630      	mov	r0, r6
 8003510:	4639      	mov	r1, r7
 8003512:	220a      	movs	r2, #10
 8003514:	f7fd fb54 	bl	8000bc0 <__aeabi_uldivmod>
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	ea56 0307 	orrs.w	r3, r6, r7
 8003520:	d1eb      	bne.n	80034fa <_svfprintf_r+0x89a>
 8003522:	e360      	b.n	8003be6 <_svfprintf_r+0xf86>
 8003524:	2600      	movs	r6, #0
 8003526:	2700      	movs	r7, #0
 8003528:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800352c:	f006 030f 	and.w	r3, r6, #15
 8003530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003538:	0933      	lsrs	r3, r6, #4
 800353a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800353e:	093a      	lsrs	r2, r7, #4
 8003540:	461e      	mov	r6, r3
 8003542:	4617      	mov	r7, r2
 8003544:	ea56 0307 	orrs.w	r3, r6, r7
 8003548:	d1f0      	bne.n	800352c <_svfprintf_r+0x8cc>
 800354a:	e34c      	b.n	8003be6 <_svfprintf_r+0xf86>
 800354c:	b93b      	cbnz	r3, 800355e <_svfprintf_r+0x8fe>
 800354e:	07ea      	lsls	r2, r5, #31
 8003550:	d505      	bpl.n	800355e <_svfprintf_r+0x8fe>
 8003552:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003556:	2330      	movs	r3, #48	; 0x30
 8003558:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800355c:	e343      	b.n	8003be6 <_svfprintf_r+0xf86>
 800355e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003562:	e340      	b.n	8003be6 <_svfprintf_r+0xf86>
 8003564:	b10b      	cbz	r3, 800356a <_svfprintf_r+0x90a>
 8003566:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800356a:	9b02      	ldr	r3, [sp, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 82f7 	beq.w	8003b60 <_svfprintf_r+0xf00>
 8003572:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003576:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800357a:	2600      	movs	r6, #0
 800357c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003580:	9704      	str	r7, [sp, #16]
 8003582:	e4e8      	b.n	8002f56 <_svfprintf_r+0x2f6>
 8003584:	4606      	mov	r6, r0
 8003586:	e53f      	b.n	8003008 <_svfprintf_r+0x3a8>
 8003588:	2310      	movs	r3, #16
 800358a:	6063      	str	r3, [r4, #4]
 800358c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800358e:	3310      	adds	r3, #16
 8003590:	9321      	str	r3, [sp, #132]	; 0x84
 8003592:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003594:	3301      	adds	r3, #1
 8003596:	2b07      	cmp	r3, #7
 8003598:	9320      	str	r3, [sp, #128]	; 0x80
 800359a:	dc04      	bgt.n	80035a6 <_svfprintf_r+0x946>
 800359c:	3408      	adds	r4, #8
 800359e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035a0:	3b10      	subs	r3, #16
 80035a2:	930c      	str	r3, [sp, #48]	; 0x30
 80035a4:	e615      	b.n	80031d2 <_svfprintf_r+0x572>
 80035a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80035a8:	4651      	mov	r1, sl
 80035aa:	4658      	mov	r0, fp
 80035ac:	f001 fea2 	bl	80052f4 <__ssprint_r>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	f040 82b6 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80035b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80035b8:	e7f1      	b.n	800359e <_svfprintf_r+0x93e>
 80035ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80035bc:	4651      	mov	r1, sl
 80035be:	4658      	mov	r0, fp
 80035c0:	f001 fe98 	bl	80052f4 <__ssprint_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f040 82ac 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80035ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80035cc:	e614      	b.n	80031f8 <_svfprintf_r+0x598>
 80035ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80035d0:	4651      	mov	r1, sl
 80035d2:	4658      	mov	r0, fp
 80035d4:	f001 fe8e 	bl	80052f4 <__ssprint_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f040 82a2 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80035de:	ac2c      	add	r4, sp, #176	; 0xb0
 80035e0:	e61c      	b.n	800321c <_svfprintf_r+0x5bc>
 80035e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80035e4:	4651      	mov	r1, sl
 80035e6:	4658      	mov	r0, fp
 80035e8:	f001 fe84 	bl	80052f4 <__ssprint_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	f040 8298 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80035f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80035f4:	e622      	b.n	800323c <_svfprintf_r+0x5dc>
 80035f6:	2210      	movs	r2, #16
 80035f8:	6062      	str	r2, [r4, #4]
 80035fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80035fc:	3210      	adds	r2, #16
 80035fe:	9221      	str	r2, [sp, #132]	; 0x84
 8003600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003602:	3201      	adds	r2, #1
 8003604:	2a07      	cmp	r2, #7
 8003606:	9220      	str	r2, [sp, #128]	; 0x80
 8003608:	dc02      	bgt.n	8003610 <_svfprintf_r+0x9b0>
 800360a:	3408      	adds	r4, #8
 800360c:	3b10      	subs	r3, #16
 800360e:	e61d      	b.n	800324c <_svfprintf_r+0x5ec>
 8003610:	aa1f      	add	r2, sp, #124	; 0x7c
 8003612:	4651      	mov	r1, sl
 8003614:	4658      	mov	r0, fp
 8003616:	930c      	str	r3, [sp, #48]	; 0x30
 8003618:	f001 fe6c 	bl	80052f4 <__ssprint_r>
 800361c:	2800      	cmp	r0, #0
 800361e:	f040 8280 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003622:	ac2c      	add	r4, sp, #176	; 0xb0
 8003624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003626:	e7f1      	b.n	800360c <_svfprintf_r+0x9ac>
 8003628:	aa1f      	add	r2, sp, #124	; 0x7c
 800362a:	4651      	mov	r1, sl
 800362c:	4658      	mov	r0, fp
 800362e:	f001 fe61 	bl	80052f4 <__ssprint_r>
 8003632:	2800      	cmp	r0, #0
 8003634:	f040 8275 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003638:	ac2c      	add	r4, sp, #176	; 0xb0
 800363a:	e617      	b.n	800326c <_svfprintf_r+0x60c>
 800363c:	2310      	movs	r3, #16
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003642:	3310      	adds	r3, #16
 8003644:	9321      	str	r3, [sp, #132]	; 0x84
 8003646:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003648:	3301      	adds	r3, #1
 800364a:	2b07      	cmp	r3, #7
 800364c:	9320      	str	r3, [sp, #128]	; 0x80
 800364e:	dc02      	bgt.n	8003656 <_svfprintf_r+0x9f6>
 8003650:	3408      	adds	r4, #8
 8003652:	3e10      	subs	r6, #16
 8003654:	e60e      	b.n	8003274 <_svfprintf_r+0x614>
 8003656:	aa1f      	add	r2, sp, #124	; 0x7c
 8003658:	4651      	mov	r1, sl
 800365a:	4658      	mov	r0, fp
 800365c:	f001 fe4a 	bl	80052f4 <__ssprint_r>
 8003660:	2800      	cmp	r0, #0
 8003662:	f040 825e 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003666:	ac2c      	add	r4, sp, #176	; 0xb0
 8003668:	e7f3      	b.n	8003652 <_svfprintf_r+0x9f2>
 800366a:	aa1f      	add	r2, sp, #124	; 0x7c
 800366c:	4651      	mov	r1, sl
 800366e:	4658      	mov	r0, fp
 8003670:	f001 fe40 	bl	80052f4 <__ssprint_r>
 8003674:	2800      	cmp	r0, #0
 8003676:	f040 8254 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800367a:	ac2c      	add	r4, sp, #176	; 0xb0
 800367c:	e60a      	b.n	8003294 <_svfprintf_r+0x634>
 800367e:	9b02      	ldr	r3, [sp, #8]
 8003680:	2b65      	cmp	r3, #101	; 0x65
 8003682:	f340 81a9 	ble.w	80039d8 <_svfprintf_r+0xd78>
 8003686:	2200      	movs	r2, #0
 8003688:	2300      	movs	r3, #0
 800368a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800368e:	f7fd fa27 	bl	8000ae0 <__aeabi_dcmpeq>
 8003692:	2800      	cmp	r0, #0
 8003694:	d062      	beq.n	800375c <_svfprintf_r+0xafc>
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <_svfprintf_r+0xaf4>)
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	6063      	str	r3, [r4, #4]
 800369e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036a0:	3301      	adds	r3, #1
 80036a2:	9321      	str	r3, [sp, #132]	; 0x84
 80036a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036a6:	3301      	adds	r3, #1
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	9320      	str	r3, [sp, #128]	; 0x80
 80036ac:	dc25      	bgt.n	80036fa <_svfprintf_r+0xa9a>
 80036ae:	3408      	adds	r4, #8
 80036b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036b2:	9a03      	ldr	r2, [sp, #12]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	db02      	blt.n	80036be <_svfprintf_r+0xa5e>
 80036b8:	07ee      	lsls	r6, r5, #31
 80036ba:	f57f ae02 	bpl.w	80032c2 <_svfprintf_r+0x662>
 80036be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	9b08      	ldr	r3, [sp, #32]
 80036c4:	6063      	str	r3, [r4, #4]
 80036c6:	9a08      	ldr	r2, [sp, #32]
 80036c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036ca:	4413      	add	r3, r2
 80036cc:	9321      	str	r3, [sp, #132]	; 0x84
 80036ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036d0:	3301      	adds	r3, #1
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	9320      	str	r3, [sp, #128]	; 0x80
 80036d6:	dc1a      	bgt.n	800370e <_svfprintf_r+0xaae>
 80036d8:	3408      	adds	r4, #8
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	1e5e      	subs	r6, r3, #1
 80036de:	2e00      	cmp	r6, #0
 80036e0:	f77f adef 	ble.w	80032c2 <_svfprintf_r+0x662>
 80036e4:	4f1c      	ldr	r7, [pc, #112]	; (8003758 <_svfprintf_r+0xaf8>)
 80036e6:	f04f 0810 	mov.w	r8, #16
 80036ea:	2e10      	cmp	r6, #16
 80036ec:	6027      	str	r7, [r4, #0]
 80036ee:	dc18      	bgt.n	8003722 <_svfprintf_r+0xac2>
 80036f0:	6066      	str	r6, [r4, #4]
 80036f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036f4:	441e      	add	r6, r3
 80036f6:	9621      	str	r6, [sp, #132]	; 0x84
 80036f8:	e5d4      	b.n	80032a4 <_svfprintf_r+0x644>
 80036fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80036fc:	4651      	mov	r1, sl
 80036fe:	4658      	mov	r0, fp
 8003700:	f001 fdf8 	bl	80052f4 <__ssprint_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	f040 820c 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800370a:	ac2c      	add	r4, sp, #176	; 0xb0
 800370c:	e7d0      	b.n	80036b0 <_svfprintf_r+0xa50>
 800370e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003710:	4651      	mov	r1, sl
 8003712:	4658      	mov	r0, fp
 8003714:	f001 fdee 	bl	80052f4 <__ssprint_r>
 8003718:	2800      	cmp	r0, #0
 800371a:	f040 8202 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800371e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003720:	e7db      	b.n	80036da <_svfprintf_r+0xa7a>
 8003722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003724:	f8c4 8004 	str.w	r8, [r4, #4]
 8003728:	3310      	adds	r3, #16
 800372a:	9321      	str	r3, [sp, #132]	; 0x84
 800372c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800372e:	3301      	adds	r3, #1
 8003730:	2b07      	cmp	r3, #7
 8003732:	9320      	str	r3, [sp, #128]	; 0x80
 8003734:	dc02      	bgt.n	800373c <_svfprintf_r+0xadc>
 8003736:	3408      	adds	r4, #8
 8003738:	3e10      	subs	r6, #16
 800373a:	e7d6      	b.n	80036ea <_svfprintf_r+0xa8a>
 800373c:	aa1f      	add	r2, sp, #124	; 0x7c
 800373e:	4651      	mov	r1, sl
 8003740:	4658      	mov	r0, fp
 8003742:	f001 fdd7 	bl	80052f4 <__ssprint_r>
 8003746:	2800      	cmp	r0, #0
 8003748:	f040 81eb 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800374c:	ac2c      	add	r4, sp, #176	; 0xb0
 800374e:	e7f3      	b.n	8003738 <_svfprintf_r+0xad8>
 8003750:	08005a72 	.word	0x08005a72
 8003754:	08005a83 	.word	0x08005a83
 8003758:	08005a95 	.word	0x08005a95
 800375c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800375e:	2b00      	cmp	r3, #0
 8003760:	dc7a      	bgt.n	8003858 <_svfprintf_r+0xbf8>
 8003762:	4b9b      	ldr	r3, [pc, #620]	; (80039d0 <_svfprintf_r+0xd70>)
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800376c:	3301      	adds	r3, #1
 800376e:	9321      	str	r3, [sp, #132]	; 0x84
 8003770:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003772:	3301      	adds	r3, #1
 8003774:	2b07      	cmp	r3, #7
 8003776:	9320      	str	r3, [sp, #128]	; 0x80
 8003778:	dc44      	bgt.n	8003804 <_svfprintf_r+0xba4>
 800377a:	3408      	adds	r4, #8
 800377c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800377e:	b923      	cbnz	r3, 800378a <_svfprintf_r+0xb2a>
 8003780:	9b03      	ldr	r3, [sp, #12]
 8003782:	b913      	cbnz	r3, 800378a <_svfprintf_r+0xb2a>
 8003784:	07e8      	lsls	r0, r5, #31
 8003786:	f57f ad9c 	bpl.w	80032c2 <_svfprintf_r+0x662>
 800378a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	9b08      	ldr	r3, [sp, #32]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	9a08      	ldr	r2, [sp, #32]
 8003794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003796:	4413      	add	r3, r2
 8003798:	9321      	str	r3, [sp, #132]	; 0x84
 800379a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800379c:	3301      	adds	r3, #1
 800379e:	2b07      	cmp	r3, #7
 80037a0:	9320      	str	r3, [sp, #128]	; 0x80
 80037a2:	dc39      	bgt.n	8003818 <_svfprintf_r+0xbb8>
 80037a4:	f104 0308 	add.w	r3, r4, #8
 80037a8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	da19      	bge.n	80037e2 <_svfprintf_r+0xb82>
 80037ae:	4f89      	ldr	r7, [pc, #548]	; (80039d4 <_svfprintf_r+0xd74>)
 80037b0:	4276      	negs	r6, r6
 80037b2:	2410      	movs	r4, #16
 80037b4:	2e10      	cmp	r6, #16
 80037b6:	601f      	str	r7, [r3, #0]
 80037b8:	dc38      	bgt.n	800382c <_svfprintf_r+0xbcc>
 80037ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80037bc:	605e      	str	r6, [r3, #4]
 80037be:	4416      	add	r6, r2
 80037c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037c2:	9621      	str	r6, [sp, #132]	; 0x84
 80037c4:	3201      	adds	r2, #1
 80037c6:	2a07      	cmp	r2, #7
 80037c8:	f103 0308 	add.w	r3, r3, #8
 80037cc:	9220      	str	r2, [sp, #128]	; 0x80
 80037ce:	dd08      	ble.n	80037e2 <_svfprintf_r+0xb82>
 80037d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80037d2:	4651      	mov	r1, sl
 80037d4:	4658      	mov	r0, fp
 80037d6:	f001 fd8d 	bl	80052f4 <__ssprint_r>
 80037da:	2800      	cmp	r0, #0
 80037dc:	f040 81a1 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80037e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80037e2:	9a03      	ldr	r2, [sp, #12]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	9903      	ldr	r1, [sp, #12]
 80037e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80037ea:	f8c3 8000 	str.w	r8, [r3]
 80037ee:	440a      	add	r2, r1
 80037f0:	9221      	str	r2, [sp, #132]	; 0x84
 80037f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037f4:	3201      	adds	r2, #1
 80037f6:	2a07      	cmp	r2, #7
 80037f8:	9220      	str	r2, [sp, #128]	; 0x80
 80037fa:	f73f ad59 	bgt.w	80032b0 <_svfprintf_r+0x650>
 80037fe:	f103 0408 	add.w	r4, r3, #8
 8003802:	e55e      	b.n	80032c2 <_svfprintf_r+0x662>
 8003804:	aa1f      	add	r2, sp, #124	; 0x7c
 8003806:	4651      	mov	r1, sl
 8003808:	4658      	mov	r0, fp
 800380a:	f001 fd73 	bl	80052f4 <__ssprint_r>
 800380e:	2800      	cmp	r0, #0
 8003810:	f040 8187 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003814:	ac2c      	add	r4, sp, #176	; 0xb0
 8003816:	e7b1      	b.n	800377c <_svfprintf_r+0xb1c>
 8003818:	aa1f      	add	r2, sp, #124	; 0x7c
 800381a:	4651      	mov	r1, sl
 800381c:	4658      	mov	r0, fp
 800381e:	f001 fd69 	bl	80052f4 <__ssprint_r>
 8003822:	2800      	cmp	r0, #0
 8003824:	f040 817d 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003828:	ab2c      	add	r3, sp, #176	; 0xb0
 800382a:	e7bd      	b.n	80037a8 <_svfprintf_r+0xb48>
 800382c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800382e:	605c      	str	r4, [r3, #4]
 8003830:	3210      	adds	r2, #16
 8003832:	9221      	str	r2, [sp, #132]	; 0x84
 8003834:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003836:	3201      	adds	r2, #1
 8003838:	2a07      	cmp	r2, #7
 800383a:	9220      	str	r2, [sp, #128]	; 0x80
 800383c:	dc02      	bgt.n	8003844 <_svfprintf_r+0xbe4>
 800383e:	3308      	adds	r3, #8
 8003840:	3e10      	subs	r6, #16
 8003842:	e7b7      	b.n	80037b4 <_svfprintf_r+0xb54>
 8003844:	aa1f      	add	r2, sp, #124	; 0x7c
 8003846:	4651      	mov	r1, sl
 8003848:	4658      	mov	r0, fp
 800384a:	f001 fd53 	bl	80052f4 <__ssprint_r>
 800384e:	2800      	cmp	r0, #0
 8003850:	f040 8167 	bne.w	8003b22 <_svfprintf_r+0xec2>
 8003854:	ab2c      	add	r3, sp, #176	; 0xb0
 8003856:	e7f3      	b.n	8003840 <_svfprintf_r+0xbe0>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	42bb      	cmp	r3, r7
 800385c:	bfa8      	it	ge
 800385e:	463b      	movge	r3, r7
 8003860:	2b00      	cmp	r3, #0
 8003862:	461e      	mov	r6, r3
 8003864:	dd0b      	ble.n	800387e <_svfprintf_r+0xc1e>
 8003866:	6063      	str	r3, [r4, #4]
 8003868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800386a:	f8c4 8000 	str.w	r8, [r4]
 800386e:	4433      	add	r3, r6
 8003870:	9321      	str	r3, [sp, #132]	; 0x84
 8003872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003874:	3301      	adds	r3, #1
 8003876:	2b07      	cmp	r3, #7
 8003878:	9320      	str	r3, [sp, #128]	; 0x80
 800387a:	dc5f      	bgt.n	800393c <_svfprintf_r+0xcdc>
 800387c:	3408      	adds	r4, #8
 800387e:	2e00      	cmp	r6, #0
 8003880:	bfac      	ite	ge
 8003882:	1bbe      	subge	r6, r7, r6
 8003884:	463e      	movlt	r6, r7
 8003886:	2e00      	cmp	r6, #0
 8003888:	dd0f      	ble.n	80038aa <_svfprintf_r+0xc4a>
 800388a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80039d4 <_svfprintf_r+0xd74>
 800388e:	f8c4 9000 	str.w	r9, [r4]
 8003892:	2e10      	cmp	r6, #16
 8003894:	dc5c      	bgt.n	8003950 <_svfprintf_r+0xcf0>
 8003896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003898:	6066      	str	r6, [r4, #4]
 800389a:	441e      	add	r6, r3
 800389c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800389e:	9621      	str	r6, [sp, #132]	; 0x84
 80038a0:	3301      	adds	r3, #1
 80038a2:	2b07      	cmp	r3, #7
 80038a4:	9320      	str	r3, [sp, #128]	; 0x80
 80038a6:	dc6a      	bgt.n	800397e <_svfprintf_r+0xd1e>
 80038a8:	3408      	adds	r4, #8
 80038aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038ac:	9a03      	ldr	r2, [sp, #12]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	db01      	blt.n	80038b6 <_svfprintf_r+0xc56>
 80038b2:	07e9      	lsls	r1, r5, #31
 80038b4:	d50d      	bpl.n	80038d2 <_svfprintf_r+0xc72>
 80038b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	9b08      	ldr	r3, [sp, #32]
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	9a08      	ldr	r2, [sp, #32]
 80038c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038c2:	4413      	add	r3, r2
 80038c4:	9321      	str	r3, [sp, #132]	; 0x84
 80038c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038c8:	3301      	adds	r3, #1
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	9320      	str	r3, [sp, #128]	; 0x80
 80038ce:	dc60      	bgt.n	8003992 <_svfprintf_r+0xd32>
 80038d0:	3408      	adds	r4, #8
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	9a03      	ldr	r2, [sp, #12]
 80038d6:	1bde      	subs	r6, r3, r7
 80038d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	429e      	cmp	r6, r3
 80038de:	bfa8      	it	ge
 80038e0:	461e      	movge	r6, r3
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	dd0b      	ble.n	80038fe <_svfprintf_r+0xc9e>
 80038e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038e8:	6066      	str	r6, [r4, #4]
 80038ea:	4433      	add	r3, r6
 80038ec:	9321      	str	r3, [sp, #132]	; 0x84
 80038ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038f0:	3301      	adds	r3, #1
 80038f2:	4447      	add	r7, r8
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	6027      	str	r7, [r4, #0]
 80038f8:	9320      	str	r3, [sp, #128]	; 0x80
 80038fa:	dc54      	bgt.n	80039a6 <_svfprintf_r+0xd46>
 80038fc:	3408      	adds	r4, #8
 80038fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003900:	9a03      	ldr	r2, [sp, #12]
 8003902:	2e00      	cmp	r6, #0
 8003904:	eba2 0303 	sub.w	r3, r2, r3
 8003908:	bfac      	ite	ge
 800390a:	1b9e      	subge	r6, r3, r6
 800390c:	461e      	movlt	r6, r3
 800390e:	2e00      	cmp	r6, #0
 8003910:	f77f acd7 	ble.w	80032c2 <_svfprintf_r+0x662>
 8003914:	4f2f      	ldr	r7, [pc, #188]	; (80039d4 <_svfprintf_r+0xd74>)
 8003916:	f04f 0810 	mov.w	r8, #16
 800391a:	2e10      	cmp	r6, #16
 800391c:	6027      	str	r7, [r4, #0]
 800391e:	f77f aee7 	ble.w	80036f0 <_svfprintf_r+0xa90>
 8003922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003924:	f8c4 8004 	str.w	r8, [r4, #4]
 8003928:	3310      	adds	r3, #16
 800392a:	9321      	str	r3, [sp, #132]	; 0x84
 800392c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800392e:	3301      	adds	r3, #1
 8003930:	2b07      	cmp	r3, #7
 8003932:	9320      	str	r3, [sp, #128]	; 0x80
 8003934:	dc41      	bgt.n	80039ba <_svfprintf_r+0xd5a>
 8003936:	3408      	adds	r4, #8
 8003938:	3e10      	subs	r6, #16
 800393a:	e7ee      	b.n	800391a <_svfprintf_r+0xcba>
 800393c:	aa1f      	add	r2, sp, #124	; 0x7c
 800393e:	4651      	mov	r1, sl
 8003940:	4658      	mov	r0, fp
 8003942:	f001 fcd7 	bl	80052f4 <__ssprint_r>
 8003946:	2800      	cmp	r0, #0
 8003948:	f040 80eb 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800394c:	ac2c      	add	r4, sp, #176	; 0xb0
 800394e:	e796      	b.n	800387e <_svfprintf_r+0xc1e>
 8003950:	2310      	movs	r3, #16
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003956:	3310      	adds	r3, #16
 8003958:	9321      	str	r3, [sp, #132]	; 0x84
 800395a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800395c:	3301      	adds	r3, #1
 800395e:	2b07      	cmp	r3, #7
 8003960:	9320      	str	r3, [sp, #128]	; 0x80
 8003962:	dc02      	bgt.n	800396a <_svfprintf_r+0xd0a>
 8003964:	3408      	adds	r4, #8
 8003966:	3e10      	subs	r6, #16
 8003968:	e791      	b.n	800388e <_svfprintf_r+0xc2e>
 800396a:	aa1f      	add	r2, sp, #124	; 0x7c
 800396c:	4651      	mov	r1, sl
 800396e:	4658      	mov	r0, fp
 8003970:	f001 fcc0 	bl	80052f4 <__ssprint_r>
 8003974:	2800      	cmp	r0, #0
 8003976:	f040 80d4 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800397a:	ac2c      	add	r4, sp, #176	; 0xb0
 800397c:	e7f3      	b.n	8003966 <_svfprintf_r+0xd06>
 800397e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003980:	4651      	mov	r1, sl
 8003982:	4658      	mov	r0, fp
 8003984:	f001 fcb6 	bl	80052f4 <__ssprint_r>
 8003988:	2800      	cmp	r0, #0
 800398a:	f040 80ca 	bne.w	8003b22 <_svfprintf_r+0xec2>
 800398e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003990:	e78b      	b.n	80038aa <_svfprintf_r+0xc4a>
 8003992:	aa1f      	add	r2, sp, #124	; 0x7c
 8003994:	4651      	mov	r1, sl
 8003996:	4658      	mov	r0, fp
 8003998:	f001 fcac 	bl	80052f4 <__ssprint_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	f040 80c0 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80039a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80039a4:	e795      	b.n	80038d2 <_svfprintf_r+0xc72>
 80039a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80039a8:	4651      	mov	r1, sl
 80039aa:	4658      	mov	r0, fp
 80039ac:	f001 fca2 	bl	80052f4 <__ssprint_r>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	f040 80b6 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80039b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80039b8:	e7a1      	b.n	80038fe <_svfprintf_r+0xc9e>
 80039ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80039bc:	4651      	mov	r1, sl
 80039be:	4658      	mov	r0, fp
 80039c0:	f001 fc98 	bl	80052f4 <__ssprint_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	f040 80ac 	bne.w	8003b22 <_svfprintf_r+0xec2>
 80039ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80039cc:	e7b4      	b.n	8003938 <_svfprintf_r+0xcd8>
 80039ce:	bf00      	nop
 80039d0:	08005a83 	.word	0x08005a83
 80039d4:	08005a95 	.word	0x08005a95
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	dc01      	bgt.n	80039e2 <_svfprintf_r+0xd82>
 80039de:	07ea      	lsls	r2, r5, #31
 80039e0:	d576      	bpl.n	8003ad0 <_svfprintf_r+0xe70>
 80039e2:	2301      	movs	r3, #1
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039e8:	f8c4 8000 	str.w	r8, [r4]
 80039ec:	3301      	adds	r3, #1
 80039ee:	9321      	str	r3, [sp, #132]	; 0x84
 80039f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80039f2:	3301      	adds	r3, #1
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	9320      	str	r3, [sp, #128]	; 0x80
 80039f8:	dc36      	bgt.n	8003a68 <_svfprintf_r+0xe08>
 80039fa:	3408      	adds	r4, #8
 80039fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	9b08      	ldr	r3, [sp, #32]
 8003a02:	6063      	str	r3, [r4, #4]
 8003a04:	9a08      	ldr	r2, [sp, #32]
 8003a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a08:	4413      	add	r3, r2
 8003a0a:	9321      	str	r3, [sp, #132]	; 0x84
 8003a0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a0e:	3301      	adds	r3, #1
 8003a10:	2b07      	cmp	r3, #7
 8003a12:	9320      	str	r3, [sp, #128]	; 0x80
 8003a14:	dc31      	bgt.n	8003a7a <_svfprintf_r+0xe1a>
 8003a16:	3408      	adds	r4, #8
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a20:	f7fd f85e 	bl	8000ae0 <__aeabi_dcmpeq>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	1e5e      	subs	r6, r3, #1
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d12f      	bne.n	8003a8c <_svfprintf_r+0xe2c>
 8003a2c:	f108 0301 	add.w	r3, r8, #1
 8003a30:	e884 0048 	stmia.w	r4, {r3, r6}
 8003a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a36:	9a03      	ldr	r2, [sp, #12]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	9321      	str	r3, [sp, #132]	; 0x84
 8003a3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a40:	3301      	adds	r3, #1
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	9320      	str	r3, [sp, #128]	; 0x80
 8003a46:	dd4a      	ble.n	8003ade <_svfprintf_r+0xe7e>
 8003a48:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	4658      	mov	r0, fp
 8003a4e:	f001 fc51 	bl	80052f4 <__ssprint_r>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d165      	bne.n	8003b22 <_svfprintf_r+0xec2>
 8003a56:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a58:	ab1b      	add	r3, sp, #108	; 0x6c
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a5e:	6063      	str	r3, [r4, #4]
 8003a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a64:	4413      	add	r3, r2
 8003a66:	e41c      	b.n	80032a2 <_svfprintf_r+0x642>
 8003a68:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	4658      	mov	r0, fp
 8003a6e:	f001 fc41 	bl	80052f4 <__ssprint_r>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d155      	bne.n	8003b22 <_svfprintf_r+0xec2>
 8003a76:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a78:	e7c0      	b.n	80039fc <_svfprintf_r+0xd9c>
 8003a7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a7c:	4651      	mov	r1, sl
 8003a7e:	4658      	mov	r0, fp
 8003a80:	f001 fc38 	bl	80052f4 <__ssprint_r>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d14c      	bne.n	8003b22 <_svfprintf_r+0xec2>
 8003a88:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a8a:	e7c5      	b.n	8003a18 <_svfprintf_r+0xdb8>
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	dde3      	ble.n	8003a58 <_svfprintf_r+0xdf8>
 8003a90:	4f59      	ldr	r7, [pc, #356]	; (8003bf8 <_svfprintf_r+0xf98>)
 8003a92:	f04f 0810 	mov.w	r8, #16
 8003a96:	2e10      	cmp	r6, #16
 8003a98:	6027      	str	r7, [r4, #0]
 8003a9a:	dc04      	bgt.n	8003aa6 <_svfprintf_r+0xe46>
 8003a9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a9e:	6066      	str	r6, [r4, #4]
 8003aa0:	441e      	add	r6, r3
 8003aa2:	9621      	str	r6, [sp, #132]	; 0x84
 8003aa4:	e7cb      	b.n	8003a3e <_svfprintf_r+0xdde>
 8003aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003aa8:	f8c4 8004 	str.w	r8, [r4, #4]
 8003aac:	3310      	adds	r3, #16
 8003aae:	9321      	str	r3, [sp, #132]	; 0x84
 8003ab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	9320      	str	r3, [sp, #128]	; 0x80
 8003ab8:	dc02      	bgt.n	8003ac0 <_svfprintf_r+0xe60>
 8003aba:	3408      	adds	r4, #8
 8003abc:	3e10      	subs	r6, #16
 8003abe:	e7ea      	b.n	8003a96 <_svfprintf_r+0xe36>
 8003ac0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	4658      	mov	r0, fp
 8003ac6:	f001 fc15 	bl	80052f4 <__ssprint_r>
 8003aca:	bb50      	cbnz	r0, 8003b22 <_svfprintf_r+0xec2>
 8003acc:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ace:	e7f5      	b.n	8003abc <_svfprintf_r+0xe5c>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6063      	str	r3, [r4, #4]
 8003ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ad6:	f8c4 8000 	str.w	r8, [r4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	e7ae      	b.n	8003a3c <_svfprintf_r+0xddc>
 8003ade:	3408      	adds	r4, #8
 8003ae0:	e7ba      	b.n	8003a58 <_svfprintf_r+0xdf8>
 8003ae2:	3408      	adds	r4, #8
 8003ae4:	f7ff bbed 	b.w	80032c2 <_svfprintf_r+0x662>
 8003ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003aec:	1a9d      	subs	r5, r3, r2
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	f77f abea 	ble.w	80032c8 <_svfprintf_r+0x668>
 8003af4:	2610      	movs	r6, #16
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <_svfprintf_r+0xf9c>)
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	2d10      	cmp	r5, #16
 8003afc:	dc1b      	bgt.n	8003b36 <_svfprintf_r+0xed6>
 8003afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b00:	6065      	str	r5, [r4, #4]
 8003b02:	441d      	add	r5, r3
 8003b04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b06:	9521      	str	r5, [sp, #132]	; 0x84
 8003b08:	3301      	adds	r3, #1
 8003b0a:	2b07      	cmp	r3, #7
 8003b0c:	9320      	str	r3, [sp, #128]	; 0x80
 8003b0e:	f77f abdb 	ble.w	80032c8 <_svfprintf_r+0x668>
 8003b12:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b14:	4651      	mov	r1, sl
 8003b16:	4658      	mov	r0, fp
 8003b18:	f001 fbec 	bl	80052f4 <__ssprint_r>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	f43f abd3 	beq.w	80032c8 <_svfprintf_r+0x668>
 8003b22:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b2c:	bf18      	it	ne
 8003b2e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003b32:	f7ff b8b9 	b.w	8002ca8 <_svfprintf_r+0x48>
 8003b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b38:	6066      	str	r6, [r4, #4]
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	9321      	str	r3, [sp, #132]	; 0x84
 8003b3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b40:	3301      	adds	r3, #1
 8003b42:	2b07      	cmp	r3, #7
 8003b44:	9320      	str	r3, [sp, #128]	; 0x80
 8003b46:	dc02      	bgt.n	8003b4e <_svfprintf_r+0xeee>
 8003b48:	3408      	adds	r4, #8
 8003b4a:	3d10      	subs	r5, #16
 8003b4c:	e7d3      	b.n	8003af6 <_svfprintf_r+0xe96>
 8003b4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b50:	4651      	mov	r1, sl
 8003b52:	4658      	mov	r0, fp
 8003b54:	f001 fbce 	bl	80052f4 <__ssprint_r>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1e2      	bne.n	8003b22 <_svfprintf_r+0xec2>
 8003b5c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b5e:	e7f4      	b.n	8003b4a <_svfprintf_r+0xeea>
 8003b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0dd      	beq.n	8003b22 <_svfprintf_r+0xec2>
 8003b66:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b68:	4651      	mov	r1, sl
 8003b6a:	4658      	mov	r0, fp
 8003b6c:	f001 fbc2 	bl	80052f4 <__ssprint_r>
 8003b70:	e7d7      	b.n	8003b22 <_svfprintf_r+0xec2>
 8003b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f7fc ffe3 	bl	8000b44 <__aeabi_dcmpun>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	f43f aa44 	beq.w	800300c <_svfprintf_r+0x3ac>
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <_svfprintf_r+0xfa0>)
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <_svfprintf_r+0xfa4>)
 8003b88:	f7ff ba34 	b.w	8002ff4 <_svfprintf_r+0x394>
 8003b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b8e:	eba3 0308 	sub.w	r3, r3, r8
 8003b92:	9303      	str	r3, [sp, #12]
 8003b94:	f7ff bab5 	b.w	8003102 <_svfprintf_r+0x4a2>
 8003b98:	ea56 0207 	orrs.w	r2, r6, r7
 8003b9c:	950b      	str	r5, [sp, #44]	; 0x2c
 8003b9e:	f43f ac2b 	beq.w	80033f8 <_svfprintf_r+0x798>
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f43f ac9d 	beq.w	80034e2 <_svfprintf_r+0x882>
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	f43f acbd 	beq.w	8003528 <_svfprintf_r+0x8c8>
 8003bae:	ab2c      	add	r3, sp, #176	; 0xb0
 8003bb0:	08f1      	lsrs	r1, r6, #3
 8003bb2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003bb6:	08f8      	lsrs	r0, r7, #3
 8003bb8:	f006 0207 	and.w	r2, r6, #7
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	460e      	mov	r6, r1
 8003bc0:	3230      	adds	r2, #48	; 0x30
 8003bc2:	ea56 0107 	orrs.w	r1, r6, r7
 8003bc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003bca:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003bce:	f47f ac86 	bne.w	80034de <_svfprintf_r+0x87e>
 8003bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd4:	07c9      	lsls	r1, r1, #31
 8003bd6:	d506      	bpl.n	8003be6 <_svfprintf_r+0xf86>
 8003bd8:	2a30      	cmp	r2, #48	; 0x30
 8003bda:	d004      	beq.n	8003be6 <_svfprintf_r+0xf86>
 8003bdc:	2230      	movs	r2, #48	; 0x30
 8003bde:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003be2:	f1a3 0802 	sub.w	r8, r3, #2
 8003be6:	464e      	mov	r6, r9
 8003be8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003bec:	eba9 0908 	sub.w	r9, r9, r8
 8003bf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003bf2:	2700      	movs	r7, #0
 8003bf4:	f7ff bad1 	b.w	800319a <_svfprintf_r+0x53a>
 8003bf8:	08005a95 	.word	0x08005a95
 8003bfc:	08005a85 	.word	0x08005a85
 8003c00:	08005a59 	.word	0x08005a59
 8003c04:	08005a5d 	.word	0x08005a5d

08003c08 <quorem>:
 8003c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	6903      	ldr	r3, [r0, #16]
 8003c0e:	690c      	ldr	r4, [r1, #16]
 8003c10:	429c      	cmp	r4, r3
 8003c12:	4680      	mov	r8, r0
 8003c14:	f300 8082 	bgt.w	8003d1c <quorem+0x114>
 8003c18:	3c01      	subs	r4, #1
 8003c1a:	f101 0714 	add.w	r7, r1, #20
 8003c1e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003c22:	f100 0614 	add.w	r6, r0, #20
 8003c26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003c2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c2e:	eb06 030e 	add.w	r3, r6, lr
 8003c32:	3501      	adds	r5, #1
 8003c34:	eb07 090e 	add.w	r9, r7, lr
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c3e:	b395      	cbz	r5, 8003ca6 <quorem+0x9e>
 8003c40:	f04f 0a00 	mov.w	sl, #0
 8003c44:	4638      	mov	r0, r7
 8003c46:	46b4      	mov	ip, r6
 8003c48:	46d3      	mov	fp, sl
 8003c4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c4e:	b293      	uxth	r3, r2
 8003c50:	fb05 a303 	mla	r3, r5, r3, sl
 8003c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	ebab 0303 	sub.w	r3, fp, r3
 8003c5e:	0c12      	lsrs	r2, r2, #16
 8003c60:	f8bc b000 	ldrh.w	fp, [ip]
 8003c64:	fb05 a202 	mla	r2, r5, r2, sl
 8003c68:	fa13 f38b 	uxtah	r3, r3, fp
 8003c6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c70:	fa1f fb82 	uxth.w	fp, r2
 8003c74:	f8dc 2000 	ldr.w	r2, [ip]
 8003c78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c86:	4581      	cmp	r9, r0
 8003c88:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c8c:	f84c 3b04 	str.w	r3, [ip], #4
 8003c90:	d2db      	bcs.n	8003c4a <quorem+0x42>
 8003c92:	f856 300e 	ldr.w	r3, [r6, lr]
 8003c96:	b933      	cbnz	r3, 8003ca6 <quorem+0x9e>
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	d330      	bcc.n	8003d04 <quorem+0xfc>
 8003ca2:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f001 fa4d 	bl	8005146 <__mcmp>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	db25      	blt.n	8003cfc <quorem+0xf4>
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f04f 0e00 	mov.w	lr, #0
 8003cb8:	f857 2b04 	ldr.w	r2, [r7], #4
 8003cbc:	f8d0 c000 	ldr.w	ip, [r0]
 8003cc0:	b293      	uxth	r3, r2
 8003cc2:	ebae 0303 	sub.w	r3, lr, r3
 8003cc6:	0c12      	lsrs	r2, r2, #16
 8003cc8:	fa13 f38c 	uxtah	r3, r3, ip
 8003ccc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003cd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cda:	45b9      	cmp	r9, r7
 8003cdc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003ce0:	f840 3b04 	str.w	r3, [r0], #4
 8003ce4:	d2e8      	bcs.n	8003cb8 <quorem+0xb0>
 8003ce6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003cea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003cee:	b92a      	cbnz	r2, 8003cfc <quorem+0xf4>
 8003cf0:	3b04      	subs	r3, #4
 8003cf2:	429e      	cmp	r6, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	d30b      	bcc.n	8003d10 <quorem+0x108>
 8003cf8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	b003      	add	sp, #12
 8003d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	3b04      	subs	r3, #4
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d1ca      	bne.n	8003ca2 <quorem+0x9a>
 8003d0c:	3c01      	subs	r4, #1
 8003d0e:	e7c5      	b.n	8003c9c <quorem+0x94>
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	3b04      	subs	r3, #4
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	d1ef      	bne.n	8003cf8 <quorem+0xf0>
 8003d18:	3c01      	subs	r4, #1
 8003d1a:	e7ea      	b.n	8003cf2 <quorem+0xea>
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	e7ee      	b.n	8003cfe <quorem+0xf6>

08003d20 <_dtoa_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	ec57 6b10 	vmov	r6, r7, d0
 8003d28:	b097      	sub	sp, #92	; 0x5c
 8003d2a:	e9cd 6700 	strd	r6, r7, [sp]
 8003d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003d30:	9107      	str	r1, [sp, #28]
 8003d32:	4604      	mov	r4, r0
 8003d34:	920a      	str	r2, [sp, #40]	; 0x28
 8003d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d38:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003d3a:	b93e      	cbnz	r6, 8003d4c <_dtoa_r+0x2c>
 8003d3c:	2010      	movs	r0, #16
 8003d3e:	f000 fdcb 	bl	80048d8 <malloc>
 8003d42:	6260      	str	r0, [r4, #36]	; 0x24
 8003d44:	6046      	str	r6, [r0, #4]
 8003d46:	6086      	str	r6, [r0, #8]
 8003d48:	6006      	str	r6, [r0, #0]
 8003d4a:	60c6      	str	r6, [r0, #12]
 8003d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	b151      	cbz	r1, 8003d68 <_dtoa_r+0x48>
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	604a      	str	r2, [r1, #4]
 8003d56:	2301      	movs	r3, #1
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f001 f81d 	bl	8004d9c <_Bfree>
 8003d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbf      	itttt	lt
 8003d6e:	2301      	movlt	r3, #1
 8003d70:	602b      	strlt	r3, [r5, #0]
 8003d72:	9b01      	ldrlt	r3, [sp, #4]
 8003d74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	bfb2      	itee	lt
 8003d7a:	9301      	strlt	r3, [sp, #4]
 8003d7c:	2300      	movge	r3, #0
 8003d7e:	602b      	strge	r3, [r5, #0]
 8003d80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d84:	4ba8      	ldr	r3, [pc, #672]	; (8004028 <_dtoa_r+0x308>)
 8003d86:	ea33 0308 	bics.w	r3, r3, r8
 8003d8a:	d11b      	bne.n	8003dc4 <_dtoa_r+0xa4>
 8003d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	9b00      	ldr	r3, [sp, #0]
 8003d96:	b923      	cbnz	r3, 8003da2 <_dtoa_r+0x82>
 8003d98:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f000 8578 	beq.w	8004892 <_dtoa_r+0xb72>
 8003da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003da4:	b953      	cbnz	r3, 8003dbc <_dtoa_r+0x9c>
 8003da6:	4ba1      	ldr	r3, [pc, #644]	; (800402c <_dtoa_r+0x30c>)
 8003da8:	e021      	b.n	8003dee <_dtoa_r+0xce>
 8003daa:	4ba1      	ldr	r3, [pc, #644]	; (8004030 <_dtoa_r+0x310>)
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	3308      	adds	r3, #8
 8003db0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	9802      	ldr	r0, [sp, #8]
 8003db6:	b017      	add	sp, #92	; 0x5c
 8003db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbc:	4b9b      	ldr	r3, [pc, #620]	; (800402c <_dtoa_r+0x30c>)
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	e7f5      	b.n	8003db0 <_dtoa_r+0x90>
 8003dc4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2300      	movs	r3, #0
 8003dcc:	4630      	mov	r0, r6
 8003dce:	4639      	mov	r1, r7
 8003dd0:	f7fc fe86 	bl	8000ae0 <__aeabi_dcmpeq>
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	b160      	cbz	r0, 8003df2 <_dtoa_r+0xd2>
 8003dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003dda:	2301      	movs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8553 	beq.w	800488c <_dtoa_r+0xb6c>
 8003de6:	4b93      	ldr	r3, [pc, #588]	; (8004034 <_dtoa_r+0x314>)
 8003de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	e7e0      	b.n	8003db4 <_dtoa_r+0x94>
 8003df2:	aa14      	add	r2, sp, #80	; 0x50
 8003df4:	a915      	add	r1, sp, #84	; 0x54
 8003df6:	ec47 6b10 	vmov	d0, r6, r7
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f001 fa1b 	bl	8005236 <__d2b>
 8003e00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003e04:	4682      	mov	sl, r0
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	d07e      	beq.n	8003f08 <_dtoa_r+0x1e8>
 8003e0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003e0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003e12:	4630      	mov	r0, r6
 8003e14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003e18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e1c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003e20:	2200      	movs	r2, #0
 8003e22:	4b85      	ldr	r3, [pc, #532]	; (8004038 <_dtoa_r+0x318>)
 8003e24:	f7fc fa40 	bl	80002a8 <__aeabi_dsub>
 8003e28:	a379      	add	r3, pc, #484	; (adr r3, 8004010 <_dtoa_r+0x2f0>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fbef 	bl	8000610 <__aeabi_dmul>
 8003e32:	a379      	add	r3, pc, #484	; (adr r3, 8004018 <_dtoa_r+0x2f8>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc fa38 	bl	80002ac <__adddf3>
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	4628      	mov	r0, r5
 8003e40:	460f      	mov	r7, r1
 8003e42:	f7fc fb7f 	bl	8000544 <__aeabi_i2d>
 8003e46:	a376      	add	r3, pc, #472	; (adr r3, 8004020 <_dtoa_r+0x300>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc fbe0 	bl	8000610 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4630      	mov	r0, r6
 8003e56:	4639      	mov	r1, r7
 8003e58:	f7fc fa28 	bl	80002ac <__adddf3>
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	f7fc fe86 	bl	8000b70 <__aeabi_d2iz>
 8003e64:	2200      	movs	r2, #0
 8003e66:	4683      	mov	fp, r0
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	f7fc fe41 	bl	8000af4 <__aeabi_dcmplt>
 8003e72:	b158      	cbz	r0, 8003e8c <_dtoa_r+0x16c>
 8003e74:	4658      	mov	r0, fp
 8003e76:	f7fc fb65 	bl	8000544 <__aeabi_i2d>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4630      	mov	r0, r6
 8003e80:	4639      	mov	r1, r7
 8003e82:	f7fc fe2d 	bl	8000ae0 <__aeabi_dcmpeq>
 8003e86:	b908      	cbnz	r0, 8003e8c <_dtoa_r+0x16c>
 8003e88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e8c:	f1bb 0f16 	cmp.w	fp, #22
 8003e90:	d859      	bhi.n	8003f46 <_dtoa_r+0x226>
 8003e92:	496a      	ldr	r1, [pc, #424]	; (800403c <_dtoa_r+0x31c>)
 8003e94:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ea0:	f7fc fe46 	bl	8000b30 <__aeabi_dcmpgt>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d050      	beq.n	8003f4a <_dtoa_r+0x22a>
 8003ea8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003eac:	2300      	movs	r3, #0
 8003eae:	930e      	str	r3, [sp, #56]	; 0x38
 8003eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003eb2:	1b5d      	subs	r5, r3, r5
 8003eb4:	1e6b      	subs	r3, r5, #1
 8003eb6:	9306      	str	r3, [sp, #24]
 8003eb8:	bf45      	ittet	mi
 8003eba:	f1c5 0301 	rsbmi	r3, r5, #1
 8003ebe:	9305      	strmi	r3, [sp, #20]
 8003ec0:	2300      	movpl	r3, #0
 8003ec2:	2300      	movmi	r3, #0
 8003ec4:	bf4c      	ite	mi
 8003ec6:	9306      	strmi	r3, [sp, #24]
 8003ec8:	9305      	strpl	r3, [sp, #20]
 8003eca:	f1bb 0f00 	cmp.w	fp, #0
 8003ece:	db3e      	blt.n	8003f4e <_dtoa_r+0x22e>
 8003ed0:	9b06      	ldr	r3, [sp, #24]
 8003ed2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003ed6:	445b      	add	r3, fp
 8003ed8:	9306      	str	r3, [sp, #24]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9308      	str	r3, [sp, #32]
 8003ede:	9b07      	ldr	r3, [sp, #28]
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	f200 80af 	bhi.w	8004044 <_dtoa_r+0x324>
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	bfc4      	itt	gt
 8003eea:	3b04      	subgt	r3, #4
 8003eec:	9307      	strgt	r3, [sp, #28]
 8003eee:	9b07      	ldr	r3, [sp, #28]
 8003ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8003ef4:	bfcc      	ite	gt
 8003ef6:	2600      	movgt	r6, #0
 8003ef8:	2601      	movle	r6, #1
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 80ae 	bhi.w	800405c <_dtoa_r+0x33c>
 8003f00:	e8df f003 	tbb	[pc, r3]
 8003f04:	772f8482 	.word	0x772f8482
 8003f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003f0c:	441d      	add	r5, r3
 8003f0e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	dd11      	ble.n	8003f3a <_dtoa_r+0x21a>
 8003f16:	9a00      	ldr	r2, [sp, #0]
 8003f18:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003f1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003f20:	fa22 f000 	lsr.w	r0, r2, r0
 8003f24:	fa08 f303 	lsl.w	r3, r8, r3
 8003f28:	4318      	orrs	r0, r3
 8003f2a:	f7fc fafb 	bl	8000524 <__aeabi_ui2d>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003f34:	3d01      	subs	r5, #1
 8003f36:	9312      	str	r3, [sp, #72]	; 0x48
 8003f38:	e772      	b.n	8003e20 <_dtoa_r+0x100>
 8003f3a:	f1c3 0020 	rsb	r0, r3, #32
 8003f3e:	9b00      	ldr	r3, [sp, #0]
 8003f40:	fa03 f000 	lsl.w	r0, r3, r0
 8003f44:	e7f1      	b.n	8003f2a <_dtoa_r+0x20a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7b1      	b.n	8003eae <_dtoa_r+0x18e>
 8003f4a:	900e      	str	r0, [sp, #56]	; 0x38
 8003f4c:	e7b0      	b.n	8003eb0 <_dtoa_r+0x190>
 8003f4e:	9b05      	ldr	r3, [sp, #20]
 8003f50:	eba3 030b 	sub.w	r3, r3, fp
 8003f54:	9305      	str	r3, [sp, #20]
 8003f56:	f1cb 0300 	rsb	r3, fp, #0
 8003f5a:	9308      	str	r3, [sp, #32]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f60:	e7bd      	b.n	8003ede <_dtoa_r+0x1be>
 8003f62:	2301      	movs	r3, #1
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	dd7a      	ble.n	8004062 <_dtoa_r+0x342>
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003f72:	2200      	movs	r2, #0
 8003f74:	606a      	str	r2, [r5, #4]
 8003f76:	2104      	movs	r1, #4
 8003f78:	f101 0214 	add.w	r2, r1, #20
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d975      	bls.n	800406c <_dtoa_r+0x34c>
 8003f80:	6869      	ldr	r1, [r5, #4]
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fed6 	bl	8004d34 <_Balloc>
 8003f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f8a:	6028      	str	r0, [r5, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	2b0e      	cmp	r3, #14
 8003f94:	f200 80e5 	bhi.w	8004162 <_dtoa_r+0x442>
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	f000 80e2 	beq.w	8004162 <_dtoa_r+0x442>
 8003f9e:	ed9d 7b00 	vldr	d7, [sp]
 8003fa2:	f1bb 0f00 	cmp.w	fp, #0
 8003fa6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003faa:	dd74      	ble.n	8004096 <_dtoa_r+0x376>
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <_dtoa_r+0x31c>)
 8003fae:	f00b 030f 	and.w	r3, fp, #15
 8003fb2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fba:	06f0      	lsls	r0, r6, #27
 8003fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fc0:	d559      	bpl.n	8004076 <_dtoa_r+0x356>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <_dtoa_r+0x320>)
 8003fc4:	ec51 0b17 	vmov	r0, r1, d7
 8003fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fcc:	f7fc fc4a 	bl	8000864 <__aeabi_ddiv>
 8003fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8003fd4:	f006 060f 	and.w	r6, r6, #15
 8003fd8:	2503      	movs	r5, #3
 8003fda:	4f19      	ldr	r7, [pc, #100]	; (8004040 <_dtoa_r+0x320>)
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	d14c      	bne.n	800407a <_dtoa_r+0x35a>
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe8:	f7fc fc3c 	bl	8000864 <__aeabi_ddiv>
 8003fec:	e9cd 0100 	strd	r0, r1, [sp]
 8003ff0:	e06a      	b.n	80040c8 <_dtoa_r+0x3a8>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff8:	445b      	add	r3, fp
 8003ffa:	9304      	str	r3, [sp, #16]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	bfb8      	it	lt
 8004004:	2301      	movlt	r3, #1
 8004006:	e7b3      	b.n	8003f70 <_dtoa_r+0x250>
 8004008:	2300      	movs	r3, #0
 800400a:	e7ab      	b.n	8003f64 <_dtoa_r+0x244>
 800400c:	2300      	movs	r3, #0
 800400e:	e7f1      	b.n	8003ff4 <_dtoa_r+0x2d4>
 8004010:	636f4361 	.word	0x636f4361
 8004014:	3fd287a7 	.word	0x3fd287a7
 8004018:	8b60c8b3 	.word	0x8b60c8b3
 800401c:	3fc68a28 	.word	0x3fc68a28
 8004020:	509f79fb 	.word	0x509f79fb
 8004024:	3fd34413 	.word	0x3fd34413
 8004028:	7ff00000 	.word	0x7ff00000
 800402c:	08005aae 	.word	0x08005aae
 8004030:	08005aa5 	.word	0x08005aa5
 8004034:	08005a84 	.word	0x08005a84
 8004038:	3ff80000 	.word	0x3ff80000
 800403c:	08005ae0 	.word	0x08005ae0
 8004040:	08005ab8 	.word	0x08005ab8
 8004044:	2601      	movs	r6, #1
 8004046:	2300      	movs	r3, #0
 8004048:	9307      	str	r3, [sp, #28]
 800404a:	9609      	str	r6, [sp, #36]	; 0x24
 800404c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	2312      	movs	r3, #18
 8004058:	920a      	str	r2, [sp, #40]	; 0x28
 800405a:	e789      	b.n	8003f70 <_dtoa_r+0x250>
 800405c:	2301      	movs	r3, #1
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	e7f4      	b.n	800404c <_dtoa_r+0x32c>
 8004062:	2301      	movs	r3, #1
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	e7f5      	b.n	8004058 <_dtoa_r+0x338>
 800406c:	686a      	ldr	r2, [r5, #4]
 800406e:	3201      	adds	r2, #1
 8004070:	606a      	str	r2, [r5, #4]
 8004072:	0049      	lsls	r1, r1, #1
 8004074:	e780      	b.n	8003f78 <_dtoa_r+0x258>
 8004076:	2502      	movs	r5, #2
 8004078:	e7af      	b.n	8003fda <_dtoa_r+0x2ba>
 800407a:	07f1      	lsls	r1, r6, #31
 800407c:	d508      	bpl.n	8004090 <_dtoa_r+0x370>
 800407e:	4640      	mov	r0, r8
 8004080:	4649      	mov	r1, r9
 8004082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004086:	f7fc fac3 	bl	8000610 <__aeabi_dmul>
 800408a:	3501      	adds	r5, #1
 800408c:	4680      	mov	r8, r0
 800408e:	4689      	mov	r9, r1
 8004090:	1076      	asrs	r6, r6, #1
 8004092:	3708      	adds	r7, #8
 8004094:	e7a2      	b.n	8003fdc <_dtoa_r+0x2bc>
 8004096:	f000 809d 	beq.w	80041d4 <_dtoa_r+0x4b4>
 800409a:	f1cb 0600 	rsb	r6, fp, #0
 800409e:	4b9f      	ldr	r3, [pc, #636]	; (800431c <_dtoa_r+0x5fc>)
 80040a0:	4f9f      	ldr	r7, [pc, #636]	; (8004320 <_dtoa_r+0x600>)
 80040a2:	f006 020f 	and.w	r2, r6, #15
 80040a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040b2:	f7fc faad 	bl	8000610 <__aeabi_dmul>
 80040b6:	e9cd 0100 	strd	r0, r1, [sp]
 80040ba:	1136      	asrs	r6, r6, #4
 80040bc:	2300      	movs	r3, #0
 80040be:	2502      	movs	r5, #2
 80040c0:	2e00      	cmp	r6, #0
 80040c2:	d17c      	bne.n	80041be <_dtoa_r+0x49e>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d191      	bne.n	8003fec <_dtoa_r+0x2cc>
 80040c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8084 	beq.w	80041d8 <_dtoa_r+0x4b8>
 80040d0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80040d4:	2200      	movs	r2, #0
 80040d6:	4b93      	ldr	r3, [pc, #588]	; (8004324 <_dtoa_r+0x604>)
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fd0a 	bl	8000af4 <__aeabi_dcmplt>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d079      	beq.n	80041d8 <_dtoa_r+0x4b8>
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d076      	beq.n	80041d8 <_dtoa_r+0x4b8>
 80040ea:	9b04      	ldr	r3, [sp, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	dd34      	ble.n	800415a <_dtoa_r+0x43a>
 80040f0:	2200      	movs	r2, #0
 80040f2:	4b8d      	ldr	r3, [pc, #564]	; (8004328 <_dtoa_r+0x608>)
 80040f4:	4640      	mov	r0, r8
 80040f6:	4649      	mov	r1, r9
 80040f8:	f7fc fa8a 	bl	8000610 <__aeabi_dmul>
 80040fc:	e9cd 0100 	strd	r0, r1, [sp]
 8004100:	9e04      	ldr	r6, [sp, #16]
 8004102:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004106:	3501      	adds	r5, #1
 8004108:	4628      	mov	r0, r5
 800410a:	f7fc fa1b 	bl	8000544 <__aeabi_i2d>
 800410e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004112:	f7fc fa7d 	bl	8000610 <__aeabi_dmul>
 8004116:	2200      	movs	r2, #0
 8004118:	4b84      	ldr	r3, [pc, #528]	; (800432c <_dtoa_r+0x60c>)
 800411a:	f7fc f8c7 	bl	80002ac <__adddf3>
 800411e:	4680      	mov	r8, r0
 8004120:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004124:	2e00      	cmp	r6, #0
 8004126:	d15a      	bne.n	80041de <_dtoa_r+0x4be>
 8004128:	2200      	movs	r2, #0
 800412a:	4b81      	ldr	r3, [pc, #516]	; (8004330 <_dtoa_r+0x610>)
 800412c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004130:	f7fc f8ba 	bl	80002a8 <__aeabi_dsub>
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	e9cd 0100 	strd	r0, r1, [sp]
 800413c:	f7fc fcf8 	bl	8000b30 <__aeabi_dcmpgt>
 8004140:	2800      	cmp	r0, #0
 8004142:	f040 829b 	bne.w	800467c <_dtoa_r+0x95c>
 8004146:	4642      	mov	r2, r8
 8004148:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800414c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004150:	f7fc fcd0 	bl	8000af4 <__aeabi_dcmplt>
 8004154:	2800      	cmp	r0, #0
 8004156:	f040 828f 	bne.w	8004678 <_dtoa_r+0x958>
 800415a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800415e:	e9cd 2300 	strd	r2, r3, [sp]
 8004162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	f2c0 8150 	blt.w	800440a <_dtoa_r+0x6ea>
 800416a:	f1bb 0f0e 	cmp.w	fp, #14
 800416e:	f300 814c 	bgt.w	800440a <_dtoa_r+0x6ea>
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <_dtoa_r+0x5fc>)
 8004174:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	f280 80da 	bge.w	8004338 <_dtoa_r+0x618>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f300 80d6 	bgt.w	8004338 <_dtoa_r+0x618>
 800418c:	f040 8273 	bne.w	8004676 <_dtoa_r+0x956>
 8004190:	2200      	movs	r2, #0
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <_dtoa_r+0x610>)
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc fa3a 	bl	8000610 <__aeabi_dmul>
 800419c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041a0:	f7fc fcbc 	bl	8000b1c <__aeabi_dcmpge>
 80041a4:	9e03      	ldr	r6, [sp, #12]
 80041a6:	4637      	mov	r7, r6
 80041a8:	2800      	cmp	r0, #0
 80041aa:	f040 824a 	bne.w	8004642 <_dtoa_r+0x922>
 80041ae:	9b02      	ldr	r3, [sp, #8]
 80041b0:	9a02      	ldr	r2, [sp, #8]
 80041b2:	1c5d      	adds	r5, r3, #1
 80041b4:	2331      	movs	r3, #49	; 0x31
 80041b6:	7013      	strb	r3, [r2, #0]
 80041b8:	f10b 0b01 	add.w	fp, fp, #1
 80041bc:	e245      	b.n	800464a <_dtoa_r+0x92a>
 80041be:	07f2      	lsls	r2, r6, #31
 80041c0:	d505      	bpl.n	80041ce <_dtoa_r+0x4ae>
 80041c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c6:	f7fc fa23 	bl	8000610 <__aeabi_dmul>
 80041ca:	3501      	adds	r5, #1
 80041cc:	2301      	movs	r3, #1
 80041ce:	1076      	asrs	r6, r6, #1
 80041d0:	3708      	adds	r7, #8
 80041d2:	e775      	b.n	80040c0 <_dtoa_r+0x3a0>
 80041d4:	2502      	movs	r5, #2
 80041d6:	e777      	b.n	80040c8 <_dtoa_r+0x3a8>
 80041d8:	465f      	mov	r7, fp
 80041da:	9e03      	ldr	r6, [sp, #12]
 80041dc:	e794      	b.n	8004108 <_dtoa_r+0x3e8>
 80041de:	9a02      	ldr	r2, [sp, #8]
 80041e0:	4b4e      	ldr	r3, [pc, #312]	; (800431c <_dtoa_r+0x5fc>)
 80041e2:	4432      	add	r2, r6
 80041e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80041e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e8:	1e71      	subs	r1, r6, #1
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d048      	beq.n	8004280 <_dtoa_r+0x560>
 80041ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	2000      	movs	r0, #0
 80041f8:	494e      	ldr	r1, [pc, #312]	; (8004334 <_dtoa_r+0x614>)
 80041fa:	f7fc fb33 	bl	8000864 <__aeabi_ddiv>
 80041fe:	4642      	mov	r2, r8
 8004200:	464b      	mov	r3, r9
 8004202:	f7fc f851 	bl	80002a8 <__aeabi_dsub>
 8004206:	9d02      	ldr	r5, [sp, #8]
 8004208:	4680      	mov	r8, r0
 800420a:	4689      	mov	r9, r1
 800420c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004210:	f7fc fcae 	bl	8000b70 <__aeabi_d2iz>
 8004214:	4606      	mov	r6, r0
 8004216:	f7fc f995 	bl	8000544 <__aeabi_i2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004222:	f7fc f841 	bl	80002a8 <__aeabi_dsub>
 8004226:	3630      	adds	r6, #48	; 0x30
 8004228:	f805 6b01 	strb.w	r6, [r5], #1
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	e9cd 0100 	strd	r0, r1, [sp]
 8004234:	f7fc fc5e 	bl	8000af4 <__aeabi_dcmplt>
 8004238:	2800      	cmp	r0, #0
 800423a:	d165      	bne.n	8004308 <_dtoa_r+0x5e8>
 800423c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004240:	2000      	movs	r0, #0
 8004242:	4938      	ldr	r1, [pc, #224]	; (8004324 <_dtoa_r+0x604>)
 8004244:	f7fc f830 	bl	80002a8 <__aeabi_dsub>
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	f7fc fc52 	bl	8000af4 <__aeabi_dcmplt>
 8004250:	2800      	cmp	r0, #0
 8004252:	f040 80ba 	bne.w	80043ca <_dtoa_r+0x6aa>
 8004256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004258:	429d      	cmp	r5, r3
 800425a:	f43f af7e 	beq.w	800415a <_dtoa_r+0x43a>
 800425e:	2200      	movs	r2, #0
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <_dtoa_r+0x608>)
 8004262:	4640      	mov	r0, r8
 8004264:	4649      	mov	r1, r9
 8004266:	f7fc f9d3 	bl	8000610 <__aeabi_dmul>
 800426a:	2200      	movs	r2, #0
 800426c:	4680      	mov	r8, r0
 800426e:	4689      	mov	r9, r1
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <_dtoa_r+0x608>)
 8004272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004276:	f7fc f9cb 	bl	8000610 <__aeabi_dmul>
 800427a:	e9cd 0100 	strd	r0, r1, [sp]
 800427e:	e7c5      	b.n	800420c <_dtoa_r+0x4ec>
 8004280:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800428c:	f7fc f9c0 	bl	8000610 <__aeabi_dmul>
 8004290:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004294:	9d02      	ldr	r5, [sp, #8]
 8004296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800429a:	f7fc fc69 	bl	8000b70 <__aeabi_d2iz>
 800429e:	4606      	mov	r6, r0
 80042a0:	f7fc f950 	bl	8000544 <__aeabi_i2d>
 80042a4:	3630      	adds	r6, #48	; 0x30
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042ae:	f7fb fffb 	bl	80002a8 <__aeabi_dsub>
 80042b2:	f805 6b01 	strb.w	r6, [r5], #1
 80042b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	4680      	mov	r8, r0
 80042bc:	4689      	mov	r9, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	d125      	bne.n	8004310 <_dtoa_r+0x5f0>
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <_dtoa_r+0x614>)
 80042c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042ca:	f7fb ffef 	bl	80002ac <__adddf3>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4640      	mov	r0, r8
 80042d4:	4649      	mov	r1, r9
 80042d6:	f7fc fc2b 	bl	8000b30 <__aeabi_dcmpgt>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d175      	bne.n	80043ca <_dtoa_r+0x6aa>
 80042de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042e2:	2000      	movs	r0, #0
 80042e4:	4913      	ldr	r1, [pc, #76]	; (8004334 <_dtoa_r+0x614>)
 80042e6:	f7fb ffdf 	bl	80002a8 <__aeabi_dsub>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4640      	mov	r0, r8
 80042f0:	4649      	mov	r1, r9
 80042f2:	f7fc fbff 	bl	8000af4 <__aeabi_dcmplt>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f43f af2f 	beq.w	800415a <_dtoa_r+0x43a>
 80042fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004300:	2b30      	cmp	r3, #48	; 0x30
 8004302:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004306:	d001      	beq.n	800430c <_dtoa_r+0x5ec>
 8004308:	46bb      	mov	fp, r7
 800430a:	e04d      	b.n	80043a8 <_dtoa_r+0x688>
 800430c:	4615      	mov	r5, r2
 800430e:	e7f5      	b.n	80042fc <_dtoa_r+0x5dc>
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <_dtoa_r+0x608>)
 8004312:	f7fc f97d 	bl	8000610 <__aeabi_dmul>
 8004316:	e9cd 0100 	strd	r0, r1, [sp]
 800431a:	e7bc      	b.n	8004296 <_dtoa_r+0x576>
 800431c:	08005ae0 	.word	0x08005ae0
 8004320:	08005ab8 	.word	0x08005ab8
 8004324:	3ff00000 	.word	0x3ff00000
 8004328:	40240000 	.word	0x40240000
 800432c:	401c0000 	.word	0x401c0000
 8004330:	40140000 	.word	0x40140000
 8004334:	3fe00000 	.word	0x3fe00000
 8004338:	e9dd 6700 	ldrd	r6, r7, [sp]
 800433c:	9d02      	ldr	r5, [sp, #8]
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	4630      	mov	r0, r6
 8004344:	4639      	mov	r1, r7
 8004346:	f7fc fa8d 	bl	8000864 <__aeabi_ddiv>
 800434a:	f7fc fc11 	bl	8000b70 <__aeabi_d2iz>
 800434e:	9000      	str	r0, [sp, #0]
 8004350:	f7fc f8f8 	bl	8000544 <__aeabi_i2d>
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	f7fc f95a 	bl	8000610 <__aeabi_dmul>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fb ffa0 	bl	80002a8 <__aeabi_dsub>
 8004368:	9e00      	ldr	r6, [sp, #0]
 800436a:	9f03      	ldr	r7, [sp, #12]
 800436c:	3630      	adds	r6, #48	; 0x30
 800436e:	f805 6b01 	strb.w	r6, [r5], #1
 8004372:	9e02      	ldr	r6, [sp, #8]
 8004374:	1bae      	subs	r6, r5, r6
 8004376:	42b7      	cmp	r7, r6
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	d138      	bne.n	80043f0 <_dtoa_r+0x6d0>
 800437e:	f7fb ff95 	bl	80002ac <__adddf3>
 8004382:	4606      	mov	r6, r0
 8004384:	460f      	mov	r7, r1
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4640      	mov	r0, r8
 800438c:	4649      	mov	r1, r9
 800438e:	f7fc fbb1 	bl	8000af4 <__aeabi_dcmplt>
 8004392:	b9c8      	cbnz	r0, 80043c8 <_dtoa_r+0x6a8>
 8004394:	4632      	mov	r2, r6
 8004396:	463b      	mov	r3, r7
 8004398:	4640      	mov	r0, r8
 800439a:	4649      	mov	r1, r9
 800439c:	f7fc fba0 	bl	8000ae0 <__aeabi_dcmpeq>
 80043a0:	b110      	cbz	r0, 80043a8 <_dtoa_r+0x688>
 80043a2:	9b00      	ldr	r3, [sp, #0]
 80043a4:	07db      	lsls	r3, r3, #31
 80043a6:	d40f      	bmi.n	80043c8 <_dtoa_r+0x6a8>
 80043a8:	4651      	mov	r1, sl
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 fcf6 	bl	8004d9c <_Bfree>
 80043b0:	2300      	movs	r3, #0
 80043b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043b4:	702b      	strb	r3, [r5, #0]
 80043b6:	f10b 0301 	add.w	r3, fp, #1
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f43f acf8 	beq.w	8003db4 <_dtoa_r+0x94>
 80043c4:	601d      	str	r5, [r3, #0]
 80043c6:	e4f5      	b.n	8003db4 <_dtoa_r+0x94>
 80043c8:	465f      	mov	r7, fp
 80043ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043ce:	2a39      	cmp	r2, #57	; 0x39
 80043d0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80043d4:	d106      	bne.n	80043e4 <_dtoa_r+0x6c4>
 80043d6:	9a02      	ldr	r2, [sp, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d107      	bne.n	80043ec <_dtoa_r+0x6cc>
 80043dc:	2330      	movs	r3, #48	; 0x30
 80043de:	7013      	strb	r3, [r2, #0]
 80043e0:	3701      	adds	r7, #1
 80043e2:	4613      	mov	r3, r2
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	3201      	adds	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e78d      	b.n	8004308 <_dtoa_r+0x5e8>
 80043ec:	461d      	mov	r5, r3
 80043ee:	e7ec      	b.n	80043ca <_dtoa_r+0x6aa>
 80043f0:	2200      	movs	r2, #0
 80043f2:	4ba4      	ldr	r3, [pc, #656]	; (8004684 <_dtoa_r+0x964>)
 80043f4:	f7fc f90c 	bl	8000610 <__aeabi_dmul>
 80043f8:	2200      	movs	r2, #0
 80043fa:	2300      	movs	r3, #0
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	f7fc fb6e 	bl	8000ae0 <__aeabi_dcmpeq>
 8004404:	2800      	cmp	r0, #0
 8004406:	d09a      	beq.n	800433e <_dtoa_r+0x61e>
 8004408:	e7ce      	b.n	80043a8 <_dtoa_r+0x688>
 800440a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800440c:	2a00      	cmp	r2, #0
 800440e:	f000 80cd 	beq.w	80045ac <_dtoa_r+0x88c>
 8004412:	9a07      	ldr	r2, [sp, #28]
 8004414:	2a01      	cmp	r2, #1
 8004416:	f300 80af 	bgt.w	8004578 <_dtoa_r+0x858>
 800441a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800441c:	2a00      	cmp	r2, #0
 800441e:	f000 80a7 	beq.w	8004570 <_dtoa_r+0x850>
 8004422:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004426:	9e08      	ldr	r6, [sp, #32]
 8004428:	9d05      	ldr	r5, [sp, #20]
 800442a:	9a05      	ldr	r2, [sp, #20]
 800442c:	441a      	add	r2, r3
 800442e:	9205      	str	r2, [sp, #20]
 8004430:	9a06      	ldr	r2, [sp, #24]
 8004432:	2101      	movs	r1, #1
 8004434:	441a      	add	r2, r3
 8004436:	4620      	mov	r0, r4
 8004438:	9206      	str	r2, [sp, #24]
 800443a:	f000 fd4f 	bl	8004edc <__i2b>
 800443e:	4607      	mov	r7, r0
 8004440:	2d00      	cmp	r5, #0
 8004442:	dd0c      	ble.n	800445e <_dtoa_r+0x73e>
 8004444:	9b06      	ldr	r3, [sp, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd09      	ble.n	800445e <_dtoa_r+0x73e>
 800444a:	42ab      	cmp	r3, r5
 800444c:	9a05      	ldr	r2, [sp, #20]
 800444e:	bfa8      	it	ge
 8004450:	462b      	movge	r3, r5
 8004452:	1ad2      	subs	r2, r2, r3
 8004454:	9205      	str	r2, [sp, #20]
 8004456:	9a06      	ldr	r2, [sp, #24]
 8004458:	1aed      	subs	r5, r5, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	9306      	str	r3, [sp, #24]
 800445e:	9b08      	ldr	r3, [sp, #32]
 8004460:	b1f3      	cbz	r3, 80044a0 <_dtoa_r+0x780>
 8004462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a5 	beq.w	80045b4 <_dtoa_r+0x894>
 800446a:	2e00      	cmp	r6, #0
 800446c:	dd10      	ble.n	8004490 <_dtoa_r+0x770>
 800446e:	4639      	mov	r1, r7
 8004470:	4632      	mov	r2, r6
 8004472:	4620      	mov	r0, r4
 8004474:	f000 fdc8 	bl	8005008 <__pow5mult>
 8004478:	4652      	mov	r2, sl
 800447a:	4601      	mov	r1, r0
 800447c:	4607      	mov	r7, r0
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fd35 	bl	8004eee <__multiply>
 8004484:	4651      	mov	r1, sl
 8004486:	4680      	mov	r8, r0
 8004488:	4620      	mov	r0, r4
 800448a:	f000 fc87 	bl	8004d9c <_Bfree>
 800448e:	46c2      	mov	sl, r8
 8004490:	9b08      	ldr	r3, [sp, #32]
 8004492:	1b9a      	subs	r2, r3, r6
 8004494:	d004      	beq.n	80044a0 <_dtoa_r+0x780>
 8004496:	4651      	mov	r1, sl
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fdb5 	bl	8005008 <__pow5mult>
 800449e:	4682      	mov	sl, r0
 80044a0:	2101      	movs	r1, #1
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fd1a 	bl	8004edc <__i2b>
 80044a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	4606      	mov	r6, r0
 80044ae:	f340 8083 	ble.w	80045b8 <_dtoa_r+0x898>
 80044b2:	461a      	mov	r2, r3
 80044b4:	4601      	mov	r1, r0
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 fda6 	bl	8005008 <__pow5mult>
 80044bc:	9b07      	ldr	r3, [sp, #28]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	4606      	mov	r6, r0
 80044c2:	dd7c      	ble.n	80045be <_dtoa_r+0x89e>
 80044c4:	f04f 0800 	mov.w	r8, #0
 80044c8:	6933      	ldr	r3, [r6, #16]
 80044ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80044ce:	6918      	ldr	r0, [r3, #16]
 80044d0:	f000 fcb6 	bl	8004e40 <__hi0bits>
 80044d4:	f1c0 0020 	rsb	r0, r0, #32
 80044d8:	9b06      	ldr	r3, [sp, #24]
 80044da:	4418      	add	r0, r3
 80044dc:	f010 001f 	ands.w	r0, r0, #31
 80044e0:	f000 8096 	beq.w	8004610 <_dtoa_r+0x8f0>
 80044e4:	f1c0 0320 	rsb	r3, r0, #32
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	f340 8087 	ble.w	80045fc <_dtoa_r+0x8dc>
 80044ee:	9b05      	ldr	r3, [sp, #20]
 80044f0:	f1c0 001c 	rsb	r0, r0, #28
 80044f4:	4403      	add	r3, r0
 80044f6:	9305      	str	r3, [sp, #20]
 80044f8:	9b06      	ldr	r3, [sp, #24]
 80044fa:	4405      	add	r5, r0
 80044fc:	4403      	add	r3, r0
 80044fe:	9306      	str	r3, [sp, #24]
 8004500:	9b05      	ldr	r3, [sp, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	dd05      	ble.n	8004512 <_dtoa_r+0x7f2>
 8004506:	4651      	mov	r1, sl
 8004508:	461a      	mov	r2, r3
 800450a:	4620      	mov	r0, r4
 800450c:	f000 fdca 	bl	80050a4 <__lshift>
 8004510:	4682      	mov	sl, r0
 8004512:	9b06      	ldr	r3, [sp, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	dd05      	ble.n	8004524 <_dtoa_r+0x804>
 8004518:	4631      	mov	r1, r6
 800451a:	461a      	mov	r2, r3
 800451c:	4620      	mov	r0, r4
 800451e:	f000 fdc1 	bl	80050a4 <__lshift>
 8004522:	4606      	mov	r6, r0
 8004524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004526:	2b00      	cmp	r3, #0
 8004528:	d074      	beq.n	8004614 <_dtoa_r+0x8f4>
 800452a:	4631      	mov	r1, r6
 800452c:	4650      	mov	r0, sl
 800452e:	f000 fe0a 	bl	8005146 <__mcmp>
 8004532:	2800      	cmp	r0, #0
 8004534:	da6e      	bge.n	8004614 <_dtoa_r+0x8f4>
 8004536:	2300      	movs	r3, #0
 8004538:	4651      	mov	r1, sl
 800453a:	220a      	movs	r2, #10
 800453c:	4620      	mov	r0, r4
 800453e:	f000 fc44 	bl	8004dca <__multadd>
 8004542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004544:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004548:	4682      	mov	sl, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 81a8 	beq.w	80048a0 <_dtoa_r+0xb80>
 8004550:	2300      	movs	r3, #0
 8004552:	4639      	mov	r1, r7
 8004554:	220a      	movs	r2, #10
 8004556:	4620      	mov	r0, r4
 8004558:	f000 fc37 	bl	8004dca <__multadd>
 800455c:	9b04      	ldr	r3, [sp, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	4607      	mov	r7, r0
 8004562:	f300 80c8 	bgt.w	80046f6 <_dtoa_r+0x9d6>
 8004566:	9b07      	ldr	r3, [sp, #28]
 8004568:	2b02      	cmp	r3, #2
 800456a:	f340 80c4 	ble.w	80046f6 <_dtoa_r+0x9d6>
 800456e:	e059      	b.n	8004624 <_dtoa_r+0x904>
 8004570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004572:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004576:	e756      	b.n	8004426 <_dtoa_r+0x706>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	1e5e      	subs	r6, r3, #1
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	42b3      	cmp	r3, r6
 8004580:	bfbf      	itttt	lt
 8004582:	9b08      	ldrlt	r3, [sp, #32]
 8004584:	9608      	strlt	r6, [sp, #32]
 8004586:	1af2      	sublt	r2, r6, r3
 8004588:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800458a:	bfb6      	itet	lt
 800458c:	189b      	addlt	r3, r3, r2
 800458e:	1b9e      	subge	r6, r3, r6
 8004590:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	bfb8      	it	lt
 8004596:	2600      	movlt	r6, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	bfb9      	ittee	lt
 800459c:	9b05      	ldrlt	r3, [sp, #20]
 800459e:	9a03      	ldrlt	r2, [sp, #12]
 80045a0:	9d05      	ldrge	r5, [sp, #20]
 80045a2:	9b03      	ldrge	r3, [sp, #12]
 80045a4:	bfbc      	itt	lt
 80045a6:	1a9d      	sublt	r5, r3, r2
 80045a8:	2300      	movlt	r3, #0
 80045aa:	e73e      	b.n	800442a <_dtoa_r+0x70a>
 80045ac:	9e08      	ldr	r6, [sp, #32]
 80045ae:	9d05      	ldr	r5, [sp, #20]
 80045b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80045b2:	e745      	b.n	8004440 <_dtoa_r+0x720>
 80045b4:	9a08      	ldr	r2, [sp, #32]
 80045b6:	e76e      	b.n	8004496 <_dtoa_r+0x776>
 80045b8:	9b07      	ldr	r3, [sp, #28]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	dc19      	bgt.n	80045f2 <_dtoa_r+0x8d2>
 80045be:	9b00      	ldr	r3, [sp, #0]
 80045c0:	b9bb      	cbnz	r3, 80045f2 <_dtoa_r+0x8d2>
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c8:	b99b      	cbnz	r3, 80045f2 <_dtoa_r+0x8d2>
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	0d1b      	lsrs	r3, r3, #20
 80045d2:	051b      	lsls	r3, r3, #20
 80045d4:	b183      	cbz	r3, 80045f8 <_dtoa_r+0x8d8>
 80045d6:	9b05      	ldr	r3, [sp, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	9b06      	ldr	r3, [sp, #24]
 80045de:	3301      	adds	r3, #1
 80045e0:	9306      	str	r3, [sp, #24]
 80045e2:	f04f 0801 	mov.w	r8, #1
 80045e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f af6d 	bne.w	80044c8 <_dtoa_r+0x7a8>
 80045ee:	2001      	movs	r0, #1
 80045f0:	e772      	b.n	80044d8 <_dtoa_r+0x7b8>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	e7f6      	b.n	80045e6 <_dtoa_r+0x8c6>
 80045f8:	4698      	mov	r8, r3
 80045fa:	e7f4      	b.n	80045e6 <_dtoa_r+0x8c6>
 80045fc:	d080      	beq.n	8004500 <_dtoa_r+0x7e0>
 80045fe:	9a05      	ldr	r2, [sp, #20]
 8004600:	331c      	adds	r3, #28
 8004602:	441a      	add	r2, r3
 8004604:	9205      	str	r2, [sp, #20]
 8004606:	9a06      	ldr	r2, [sp, #24]
 8004608:	441a      	add	r2, r3
 800460a:	441d      	add	r5, r3
 800460c:	4613      	mov	r3, r2
 800460e:	e776      	b.n	80044fe <_dtoa_r+0x7de>
 8004610:	4603      	mov	r3, r0
 8004612:	e7f4      	b.n	80045fe <_dtoa_r+0x8de>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	dc36      	bgt.n	8004688 <_dtoa_r+0x968>
 800461a:	9b07      	ldr	r3, [sp, #28]
 800461c:	2b02      	cmp	r3, #2
 800461e:	dd33      	ble.n	8004688 <_dtoa_r+0x968>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	b963      	cbnz	r3, 8004642 <_dtoa_r+0x922>
 8004628:	4631      	mov	r1, r6
 800462a:	2205      	movs	r2, #5
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fbcc 	bl	8004dca <__multadd>
 8004632:	4601      	mov	r1, r0
 8004634:	4606      	mov	r6, r0
 8004636:	4650      	mov	r0, sl
 8004638:	f000 fd85 	bl	8005146 <__mcmp>
 800463c:	2800      	cmp	r0, #0
 800463e:	f73f adb6 	bgt.w	80041ae <_dtoa_r+0x48e>
 8004642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004644:	9d02      	ldr	r5, [sp, #8]
 8004646:	ea6f 0b03 	mvn.w	fp, r3
 800464a:	2300      	movs	r3, #0
 800464c:	9303      	str	r3, [sp, #12]
 800464e:	4631      	mov	r1, r6
 8004650:	4620      	mov	r0, r4
 8004652:	f000 fba3 	bl	8004d9c <_Bfree>
 8004656:	2f00      	cmp	r7, #0
 8004658:	f43f aea6 	beq.w	80043a8 <_dtoa_r+0x688>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	b12b      	cbz	r3, 800466c <_dtoa_r+0x94c>
 8004660:	42bb      	cmp	r3, r7
 8004662:	d003      	beq.n	800466c <_dtoa_r+0x94c>
 8004664:	4619      	mov	r1, r3
 8004666:	4620      	mov	r0, r4
 8004668:	f000 fb98 	bl	8004d9c <_Bfree>
 800466c:	4639      	mov	r1, r7
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fb94 	bl	8004d9c <_Bfree>
 8004674:	e698      	b.n	80043a8 <_dtoa_r+0x688>
 8004676:	2600      	movs	r6, #0
 8004678:	4637      	mov	r7, r6
 800467a:	e7e2      	b.n	8004642 <_dtoa_r+0x922>
 800467c:	46bb      	mov	fp, r7
 800467e:	4637      	mov	r7, r6
 8004680:	e595      	b.n	80041ae <_dtoa_r+0x48e>
 8004682:	bf00      	nop
 8004684:	40240000 	.word	0x40240000
 8004688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468a:	bb93      	cbnz	r3, 80046f2 <_dtoa_r+0x9d2>
 800468c:	9b03      	ldr	r3, [sp, #12]
 800468e:	9304      	str	r3, [sp, #16]
 8004690:	9d02      	ldr	r5, [sp, #8]
 8004692:	4631      	mov	r1, r6
 8004694:	4650      	mov	r0, sl
 8004696:	f7ff fab7 	bl	8003c08 <quorem>
 800469a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800469e:	f805 9b01 	strb.w	r9, [r5], #1
 80046a2:	9b02      	ldr	r3, [sp, #8]
 80046a4:	9a04      	ldr	r2, [sp, #16]
 80046a6:	1aeb      	subs	r3, r5, r3
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f300 80dc 	bgt.w	8004866 <_dtoa_r+0xb46>
 80046ae:	9b02      	ldr	r3, [sp, #8]
 80046b0:	2a01      	cmp	r2, #1
 80046b2:	bfac      	ite	ge
 80046b4:	189b      	addge	r3, r3, r2
 80046b6:	3301      	addlt	r3, #1
 80046b8:	4698      	mov	r8, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	9303      	str	r3, [sp, #12]
 80046be:	4651      	mov	r1, sl
 80046c0:	2201      	movs	r2, #1
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 fcee 	bl	80050a4 <__lshift>
 80046c8:	4631      	mov	r1, r6
 80046ca:	4682      	mov	sl, r0
 80046cc:	f000 fd3b 	bl	8005146 <__mcmp>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	f300 808d 	bgt.w	80047f0 <_dtoa_r+0xad0>
 80046d6:	d103      	bne.n	80046e0 <_dtoa_r+0x9c0>
 80046d8:	f019 0f01 	tst.w	r9, #1
 80046dc:	f040 8088 	bne.w	80047f0 <_dtoa_r+0xad0>
 80046e0:	4645      	mov	r5, r8
 80046e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046e6:	2b30      	cmp	r3, #48	; 0x30
 80046e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80046ec:	d1af      	bne.n	800464e <_dtoa_r+0x92e>
 80046ee:	4615      	mov	r5, r2
 80046f0:	e7f7      	b.n	80046e2 <_dtoa_r+0x9c2>
 80046f2:	9b03      	ldr	r3, [sp, #12]
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	dd05      	ble.n	8004706 <_dtoa_r+0x9e6>
 80046fa:	4639      	mov	r1, r7
 80046fc:	462a      	mov	r2, r5
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 fcd0 	bl	80050a4 <__lshift>
 8004704:	4607      	mov	r7, r0
 8004706:	f1b8 0f00 	cmp.w	r8, #0
 800470a:	d04c      	beq.n	80047a6 <_dtoa_r+0xa86>
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4620      	mov	r0, r4
 8004710:	f000 fb10 	bl	8004d34 <_Balloc>
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	3202      	adds	r2, #2
 8004718:	4605      	mov	r5, r0
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	f107 010c 	add.w	r1, r7, #12
 8004720:	300c      	adds	r0, #12
 8004722:	f000 faef 	bl	8004d04 <memcpy>
 8004726:	2201      	movs	r2, #1
 8004728:	4629      	mov	r1, r5
 800472a:	4620      	mov	r0, r4
 800472c:	f000 fcba 	bl	80050a4 <__lshift>
 8004730:	9b00      	ldr	r3, [sp, #0]
 8004732:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004736:	9703      	str	r7, [sp, #12]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	4607      	mov	r7, r0
 800473e:	9305      	str	r3, [sp, #20]
 8004740:	4631      	mov	r1, r6
 8004742:	4650      	mov	r0, sl
 8004744:	f7ff fa60 	bl	8003c08 <quorem>
 8004748:	9903      	ldr	r1, [sp, #12]
 800474a:	4605      	mov	r5, r0
 800474c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004750:	4650      	mov	r0, sl
 8004752:	f000 fcf8 	bl	8005146 <__mcmp>
 8004756:	463a      	mov	r2, r7
 8004758:	9000      	str	r0, [sp, #0]
 800475a:	4631      	mov	r1, r6
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fd0c 	bl	800517a <__mdiff>
 8004762:	68c3      	ldr	r3, [r0, #12]
 8004764:	4602      	mov	r2, r0
 8004766:	bb03      	cbnz	r3, 80047aa <_dtoa_r+0xa8a>
 8004768:	4601      	mov	r1, r0
 800476a:	9006      	str	r0, [sp, #24]
 800476c:	4650      	mov	r0, sl
 800476e:	f000 fcea 	bl	8005146 <__mcmp>
 8004772:	9a06      	ldr	r2, [sp, #24]
 8004774:	4603      	mov	r3, r0
 8004776:	4611      	mov	r1, r2
 8004778:	4620      	mov	r0, r4
 800477a:	9306      	str	r3, [sp, #24]
 800477c:	f000 fb0e 	bl	8004d9c <_Bfree>
 8004780:	9b06      	ldr	r3, [sp, #24]
 8004782:	b9a3      	cbnz	r3, 80047ae <_dtoa_r+0xa8e>
 8004784:	9a07      	ldr	r2, [sp, #28]
 8004786:	b992      	cbnz	r2, 80047ae <_dtoa_r+0xa8e>
 8004788:	9a05      	ldr	r2, [sp, #20]
 800478a:	b982      	cbnz	r2, 80047ae <_dtoa_r+0xa8e>
 800478c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004790:	d029      	beq.n	80047e6 <_dtoa_r+0xac6>
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dd01      	ble.n	800479c <_dtoa_r+0xa7c>
 8004798:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800479c:	f108 0501 	add.w	r5, r8, #1
 80047a0:	f888 9000 	strb.w	r9, [r8]
 80047a4:	e753      	b.n	800464e <_dtoa_r+0x92e>
 80047a6:	4638      	mov	r0, r7
 80047a8:	e7c2      	b.n	8004730 <_dtoa_r+0xa10>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e7e3      	b.n	8004776 <_dtoa_r+0xa56>
 80047ae:	9a00      	ldr	r2, [sp, #0]
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	db04      	blt.n	80047be <_dtoa_r+0xa9e>
 80047b4:	d125      	bne.n	8004802 <_dtoa_r+0xae2>
 80047b6:	9a07      	ldr	r2, [sp, #28]
 80047b8:	bb1a      	cbnz	r2, 8004802 <_dtoa_r+0xae2>
 80047ba:	9a05      	ldr	r2, [sp, #20]
 80047bc:	bb0a      	cbnz	r2, 8004802 <_dtoa_r+0xae2>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	ddec      	ble.n	800479c <_dtoa_r+0xa7c>
 80047c2:	4651      	mov	r1, sl
 80047c4:	2201      	movs	r2, #1
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 fc6c 	bl	80050a4 <__lshift>
 80047cc:	4631      	mov	r1, r6
 80047ce:	4682      	mov	sl, r0
 80047d0:	f000 fcb9 	bl	8005146 <__mcmp>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dc03      	bgt.n	80047e0 <_dtoa_r+0xac0>
 80047d8:	d1e0      	bne.n	800479c <_dtoa_r+0xa7c>
 80047da:	f019 0f01 	tst.w	r9, #1
 80047de:	d0dd      	beq.n	800479c <_dtoa_r+0xa7c>
 80047e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80047e4:	d1d8      	bne.n	8004798 <_dtoa_r+0xa78>
 80047e6:	2339      	movs	r3, #57	; 0x39
 80047e8:	f888 3000 	strb.w	r3, [r8]
 80047ec:	f108 0801 	add.w	r8, r8, #1
 80047f0:	4645      	mov	r5, r8
 80047f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047f6:	2b39      	cmp	r3, #57	; 0x39
 80047f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80047fc:	d03b      	beq.n	8004876 <_dtoa_r+0xb56>
 80047fe:	3301      	adds	r3, #1
 8004800:	e040      	b.n	8004884 <_dtoa_r+0xb64>
 8004802:	2b00      	cmp	r3, #0
 8004804:	f108 0501 	add.w	r5, r8, #1
 8004808:	dd05      	ble.n	8004816 <_dtoa_r+0xaf6>
 800480a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800480e:	d0ea      	beq.n	80047e6 <_dtoa_r+0xac6>
 8004810:	f109 0901 	add.w	r9, r9, #1
 8004814:	e7c4      	b.n	80047a0 <_dtoa_r+0xa80>
 8004816:	9b02      	ldr	r3, [sp, #8]
 8004818:	9a04      	ldr	r2, [sp, #16]
 800481a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800481e:	1aeb      	subs	r3, r5, r3
 8004820:	4293      	cmp	r3, r2
 8004822:	46a8      	mov	r8, r5
 8004824:	f43f af4b 	beq.w	80046be <_dtoa_r+0x99e>
 8004828:	4651      	mov	r1, sl
 800482a:	2300      	movs	r3, #0
 800482c:	220a      	movs	r2, #10
 800482e:	4620      	mov	r0, r4
 8004830:	f000 facb 	bl	8004dca <__multadd>
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	9903      	ldr	r1, [sp, #12]
 8004838:	42bb      	cmp	r3, r7
 800483a:	4682      	mov	sl, r0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f04f 020a 	mov.w	r2, #10
 8004844:	4620      	mov	r0, r4
 8004846:	d104      	bne.n	8004852 <_dtoa_r+0xb32>
 8004848:	f000 fabf 	bl	8004dca <__multadd>
 800484c:	9003      	str	r0, [sp, #12]
 800484e:	4607      	mov	r7, r0
 8004850:	e776      	b.n	8004740 <_dtoa_r+0xa20>
 8004852:	f000 faba 	bl	8004dca <__multadd>
 8004856:	2300      	movs	r3, #0
 8004858:	9003      	str	r0, [sp, #12]
 800485a:	220a      	movs	r2, #10
 800485c:	4639      	mov	r1, r7
 800485e:	4620      	mov	r0, r4
 8004860:	f000 fab3 	bl	8004dca <__multadd>
 8004864:	e7f3      	b.n	800484e <_dtoa_r+0xb2e>
 8004866:	4651      	mov	r1, sl
 8004868:	2300      	movs	r3, #0
 800486a:	220a      	movs	r2, #10
 800486c:	4620      	mov	r0, r4
 800486e:	f000 faac 	bl	8004dca <__multadd>
 8004872:	4682      	mov	sl, r0
 8004874:	e70d      	b.n	8004692 <_dtoa_r+0x972>
 8004876:	9b02      	ldr	r3, [sp, #8]
 8004878:	4293      	cmp	r3, r2
 800487a:	d105      	bne.n	8004888 <_dtoa_r+0xb68>
 800487c:	9a02      	ldr	r2, [sp, #8]
 800487e:	f10b 0b01 	add.w	fp, fp, #1
 8004882:	2331      	movs	r3, #49	; 0x31
 8004884:	7013      	strb	r3, [r2, #0]
 8004886:	e6e2      	b.n	800464e <_dtoa_r+0x92e>
 8004888:	4615      	mov	r5, r2
 800488a:	e7b2      	b.n	80047f2 <_dtoa_r+0xad2>
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <_dtoa_r+0xb94>)
 800488e:	f7ff baae 	b.w	8003dee <_dtoa_r+0xce>
 8004892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f aa88 	bne.w	8003daa <_dtoa_r+0x8a>
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <_dtoa_r+0xb98>)
 800489c:	f7ff baa7 	b.w	8003dee <_dtoa_r+0xce>
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f73f aef4 	bgt.w	8004690 <_dtoa_r+0x970>
 80048a8:	9b07      	ldr	r3, [sp, #28]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	f77f aef0 	ble.w	8004690 <_dtoa_r+0x970>
 80048b0:	e6b8      	b.n	8004624 <_dtoa_r+0x904>
 80048b2:	bf00      	nop
 80048b4:	08005a83 	.word	0x08005a83
 80048b8:	08005aa5 	.word	0x08005aa5

080048bc <_localeconv_r>:
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <_localeconv_r+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a18      	ldr	r0, [r3, #32]
 80048c2:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <_localeconv_r+0x18>)
 80048c4:	2800      	cmp	r0, #0
 80048c6:	bf08      	it	eq
 80048c8:	4618      	moveq	r0, r3
 80048ca:	30f0      	adds	r0, #240	; 0xf0
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000009c 	.word	0x2000009c
 80048d4:	200005a0 	.word	0x200005a0

080048d8 <malloc>:
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <malloc+0xc>)
 80048da:	4601      	mov	r1, r0
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f000 b803 	b.w	80048e8 <_malloc_r>
 80048e2:	bf00      	nop
 80048e4:	2000009c 	.word	0x2000009c

080048e8 <_malloc_r>:
 80048e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	f101 040b 	add.w	r4, r1, #11
 80048f0:	2c16      	cmp	r4, #22
 80048f2:	4681      	mov	r9, r0
 80048f4:	d907      	bls.n	8004906 <_malloc_r+0x1e>
 80048f6:	f034 0407 	bics.w	r4, r4, #7
 80048fa:	d505      	bpl.n	8004908 <_malloc_r+0x20>
 80048fc:	230c      	movs	r3, #12
 80048fe:	f8c9 3000 	str.w	r3, [r9]
 8004902:	2600      	movs	r6, #0
 8004904:	e131      	b.n	8004b6a <_malloc_r+0x282>
 8004906:	2410      	movs	r4, #16
 8004908:	428c      	cmp	r4, r1
 800490a:	d3f7      	bcc.n	80048fc <_malloc_r+0x14>
 800490c:	4648      	mov	r0, r9
 800490e:	f000 fa05 	bl	8004d1c <__malloc_lock>
 8004912:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004916:	4d9c      	ldr	r5, [pc, #624]	; (8004b88 <_malloc_r+0x2a0>)
 8004918:	d236      	bcs.n	8004988 <_malloc_r+0xa0>
 800491a:	f104 0208 	add.w	r2, r4, #8
 800491e:	442a      	add	r2, r5
 8004920:	f1a2 0108 	sub.w	r1, r2, #8
 8004924:	6856      	ldr	r6, [r2, #4]
 8004926:	428e      	cmp	r6, r1
 8004928:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800492c:	d102      	bne.n	8004934 <_malloc_r+0x4c>
 800492e:	68d6      	ldr	r6, [r2, #12]
 8004930:	42b2      	cmp	r2, r6
 8004932:	d010      	beq.n	8004956 <_malloc_r+0x6e>
 8004934:	6873      	ldr	r3, [r6, #4]
 8004936:	68f2      	ldr	r2, [r6, #12]
 8004938:	68b1      	ldr	r1, [r6, #8]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60ca      	str	r2, [r1, #12]
 8004940:	4433      	add	r3, r6
 8004942:	6091      	str	r1, [r2, #8]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	4648      	mov	r0, r9
 800494e:	f000 f9eb 	bl	8004d28 <__malloc_unlock>
 8004952:	3608      	adds	r6, #8
 8004954:	e109      	b.n	8004b6a <_malloc_r+0x282>
 8004956:	3302      	adds	r3, #2
 8004958:	4a8c      	ldr	r2, [pc, #560]	; (8004b8c <_malloc_r+0x2a4>)
 800495a:	692e      	ldr	r6, [r5, #16]
 800495c:	4296      	cmp	r6, r2
 800495e:	4611      	mov	r1, r2
 8004960:	d06d      	beq.n	8004a3e <_malloc_r+0x156>
 8004962:	6870      	ldr	r0, [r6, #4]
 8004964:	f020 0003 	bic.w	r0, r0, #3
 8004968:	1b07      	subs	r7, r0, r4
 800496a:	2f0f      	cmp	r7, #15
 800496c:	dd47      	ble.n	80049fe <_malloc_r+0x116>
 800496e:	1933      	adds	r3, r6, r4
 8004970:	f044 0401 	orr.w	r4, r4, #1
 8004974:	6074      	str	r4, [r6, #4]
 8004976:	616b      	str	r3, [r5, #20]
 8004978:	612b      	str	r3, [r5, #16]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	f047 0201 	orr.w	r2, r7, #1
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	5037      	str	r7, [r6, r0]
 8004986:	e7e1      	b.n	800494c <_malloc_r+0x64>
 8004988:	0a63      	lsrs	r3, r4, #9
 800498a:	d02a      	beq.n	80049e2 <_malloc_r+0xfa>
 800498c:	2b04      	cmp	r3, #4
 800498e:	d812      	bhi.n	80049b6 <_malloc_r+0xce>
 8004990:	09a3      	lsrs	r3, r4, #6
 8004992:	3338      	adds	r3, #56	; 0x38
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800499a:	f1a2 0008 	sub.w	r0, r2, #8
 800499e:	6856      	ldr	r6, [r2, #4]
 80049a0:	4286      	cmp	r6, r0
 80049a2:	d006      	beq.n	80049b2 <_malloc_r+0xca>
 80049a4:	6872      	ldr	r2, [r6, #4]
 80049a6:	f022 0203 	bic.w	r2, r2, #3
 80049aa:	1b11      	subs	r1, r2, r4
 80049ac:	290f      	cmp	r1, #15
 80049ae:	dd1c      	ble.n	80049ea <_malloc_r+0x102>
 80049b0:	3b01      	subs	r3, #1
 80049b2:	3301      	adds	r3, #1
 80049b4:	e7d0      	b.n	8004958 <_malloc_r+0x70>
 80049b6:	2b14      	cmp	r3, #20
 80049b8:	d801      	bhi.n	80049be <_malloc_r+0xd6>
 80049ba:	335b      	adds	r3, #91	; 0x5b
 80049bc:	e7ea      	b.n	8004994 <_malloc_r+0xac>
 80049be:	2b54      	cmp	r3, #84	; 0x54
 80049c0:	d802      	bhi.n	80049c8 <_malloc_r+0xe0>
 80049c2:	0b23      	lsrs	r3, r4, #12
 80049c4:	336e      	adds	r3, #110	; 0x6e
 80049c6:	e7e5      	b.n	8004994 <_malloc_r+0xac>
 80049c8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80049cc:	d802      	bhi.n	80049d4 <_malloc_r+0xec>
 80049ce:	0be3      	lsrs	r3, r4, #15
 80049d0:	3377      	adds	r3, #119	; 0x77
 80049d2:	e7df      	b.n	8004994 <_malloc_r+0xac>
 80049d4:	f240 5254 	movw	r2, #1364	; 0x554
 80049d8:	4293      	cmp	r3, r2
 80049da:	d804      	bhi.n	80049e6 <_malloc_r+0xfe>
 80049dc:	0ca3      	lsrs	r3, r4, #18
 80049de:	337c      	adds	r3, #124	; 0x7c
 80049e0:	e7d8      	b.n	8004994 <_malloc_r+0xac>
 80049e2:	233f      	movs	r3, #63	; 0x3f
 80049e4:	e7d6      	b.n	8004994 <_malloc_r+0xac>
 80049e6:	237e      	movs	r3, #126	; 0x7e
 80049e8:	e7d4      	b.n	8004994 <_malloc_r+0xac>
 80049ea:	2900      	cmp	r1, #0
 80049ec:	68f1      	ldr	r1, [r6, #12]
 80049ee:	db04      	blt.n	80049fa <_malloc_r+0x112>
 80049f0:	68b3      	ldr	r3, [r6, #8]
 80049f2:	60d9      	str	r1, [r3, #12]
 80049f4:	608b      	str	r3, [r1, #8]
 80049f6:	18b3      	adds	r3, r6, r2
 80049f8:	e7a4      	b.n	8004944 <_malloc_r+0x5c>
 80049fa:	460e      	mov	r6, r1
 80049fc:	e7d0      	b.n	80049a0 <_malloc_r+0xb8>
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	616a      	str	r2, [r5, #20]
 8004a02:	612a      	str	r2, [r5, #16]
 8004a04:	db05      	blt.n	8004a12 <_malloc_r+0x12a>
 8004a06:	4430      	add	r0, r6
 8004a08:	6843      	ldr	r3, [r0, #4]
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6043      	str	r3, [r0, #4]
 8004a10:	e79c      	b.n	800494c <_malloc_r+0x64>
 8004a12:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004a16:	d244      	bcs.n	8004aa2 <_malloc_r+0x1ba>
 8004a18:	08c0      	lsrs	r0, r0, #3
 8004a1a:	1087      	asrs	r7, r0, #2
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	fa02 f707 	lsl.w	r7, r2, r7
 8004a22:	686a      	ldr	r2, [r5, #4]
 8004a24:	3001      	adds	r0, #1
 8004a26:	433a      	orrs	r2, r7
 8004a28:	606a      	str	r2, [r5, #4]
 8004a2a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004a2e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004a32:	60b7      	str	r7, [r6, #8]
 8004a34:	3a08      	subs	r2, #8
 8004a36:	60f2      	str	r2, [r6, #12]
 8004a38:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004a3c:	60fe      	str	r6, [r7, #12]
 8004a3e:	2001      	movs	r0, #1
 8004a40:	109a      	asrs	r2, r3, #2
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	6868      	ldr	r0, [r5, #4]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	f200 80a1 	bhi.w	8004b90 <_malloc_r+0x2a8>
 8004a4e:	4202      	tst	r2, r0
 8004a50:	d106      	bne.n	8004a60 <_malloc_r+0x178>
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	0052      	lsls	r2, r2, #1
 8004a58:	4202      	tst	r2, r0
 8004a5a:	f103 0304 	add.w	r3, r3, #4
 8004a5e:	d0fa      	beq.n	8004a56 <_malloc_r+0x16e>
 8004a60:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004a64:	46e0      	mov	r8, ip
 8004a66:	469e      	mov	lr, r3
 8004a68:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004a6c:	4546      	cmp	r6, r8
 8004a6e:	d153      	bne.n	8004b18 <_malloc_r+0x230>
 8004a70:	f10e 0e01 	add.w	lr, lr, #1
 8004a74:	f01e 0f03 	tst.w	lr, #3
 8004a78:	f108 0808 	add.w	r8, r8, #8
 8004a7c:	d1f4      	bne.n	8004a68 <_malloc_r+0x180>
 8004a7e:	0798      	lsls	r0, r3, #30
 8004a80:	d179      	bne.n	8004b76 <_malloc_r+0x28e>
 8004a82:	686b      	ldr	r3, [r5, #4]
 8004a84:	ea23 0302 	bic.w	r3, r3, r2
 8004a88:	606b      	str	r3, [r5, #4]
 8004a8a:	6868      	ldr	r0, [r5, #4]
 8004a8c:	0052      	lsls	r2, r2, #1
 8004a8e:	4282      	cmp	r2, r0
 8004a90:	d87e      	bhi.n	8004b90 <_malloc_r+0x2a8>
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d07c      	beq.n	8004b90 <_malloc_r+0x2a8>
 8004a96:	4673      	mov	r3, lr
 8004a98:	4202      	tst	r2, r0
 8004a9a:	d1e1      	bne.n	8004a60 <_malloc_r+0x178>
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	0052      	lsls	r2, r2, #1
 8004aa0:	e7fa      	b.n	8004a98 <_malloc_r+0x1b0>
 8004aa2:	0a42      	lsrs	r2, r0, #9
 8004aa4:	2a04      	cmp	r2, #4
 8004aa6:	d815      	bhi.n	8004ad4 <_malloc_r+0x1ec>
 8004aa8:	0982      	lsrs	r2, r0, #6
 8004aaa:	3238      	adds	r2, #56	; 0x38
 8004aac:	1c57      	adds	r7, r2, #1
 8004aae:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004ab2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004ab6:	45be      	cmp	lr, r7
 8004ab8:	d126      	bne.n	8004b08 <_malloc_r+0x220>
 8004aba:	2001      	movs	r0, #1
 8004abc:	1092      	asrs	r2, r2, #2
 8004abe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac2:	6868      	ldr	r0, [r5, #4]
 8004ac4:	4310      	orrs	r0, r2
 8004ac6:	6068      	str	r0, [r5, #4]
 8004ac8:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004acc:	60b7      	str	r7, [r6, #8]
 8004ace:	f8ce 6008 	str.w	r6, [lr, #8]
 8004ad2:	e7b3      	b.n	8004a3c <_malloc_r+0x154>
 8004ad4:	2a14      	cmp	r2, #20
 8004ad6:	d801      	bhi.n	8004adc <_malloc_r+0x1f4>
 8004ad8:	325b      	adds	r2, #91	; 0x5b
 8004ada:	e7e7      	b.n	8004aac <_malloc_r+0x1c4>
 8004adc:	2a54      	cmp	r2, #84	; 0x54
 8004ade:	d802      	bhi.n	8004ae6 <_malloc_r+0x1fe>
 8004ae0:	0b02      	lsrs	r2, r0, #12
 8004ae2:	326e      	adds	r2, #110	; 0x6e
 8004ae4:	e7e2      	b.n	8004aac <_malloc_r+0x1c4>
 8004ae6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004aea:	d802      	bhi.n	8004af2 <_malloc_r+0x20a>
 8004aec:	0bc2      	lsrs	r2, r0, #15
 8004aee:	3277      	adds	r2, #119	; 0x77
 8004af0:	e7dc      	b.n	8004aac <_malloc_r+0x1c4>
 8004af2:	f240 5754 	movw	r7, #1364	; 0x554
 8004af6:	42ba      	cmp	r2, r7
 8004af8:	bf9a      	itte	ls
 8004afa:	0c82      	lsrls	r2, r0, #18
 8004afc:	327c      	addls	r2, #124	; 0x7c
 8004afe:	227e      	movhi	r2, #126	; 0x7e
 8004b00:	e7d4      	b.n	8004aac <_malloc_r+0x1c4>
 8004b02:	68bf      	ldr	r7, [r7, #8]
 8004b04:	45be      	cmp	lr, r7
 8004b06:	d004      	beq.n	8004b12 <_malloc_r+0x22a>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	f022 0203 	bic.w	r2, r2, #3
 8004b0e:	4290      	cmp	r0, r2
 8004b10:	d3f7      	bcc.n	8004b02 <_malloc_r+0x21a>
 8004b12:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004b16:	e7d7      	b.n	8004ac8 <_malloc_r+0x1e0>
 8004b18:	6870      	ldr	r0, [r6, #4]
 8004b1a:	68f7      	ldr	r7, [r6, #12]
 8004b1c:	f020 0003 	bic.w	r0, r0, #3
 8004b20:	eba0 0a04 	sub.w	sl, r0, r4
 8004b24:	f1ba 0f0f 	cmp.w	sl, #15
 8004b28:	dd10      	ble.n	8004b4c <_malloc_r+0x264>
 8004b2a:	68b2      	ldr	r2, [r6, #8]
 8004b2c:	1933      	adds	r3, r6, r4
 8004b2e:	f044 0401 	orr.w	r4, r4, #1
 8004b32:	6074      	str	r4, [r6, #4]
 8004b34:	60d7      	str	r7, [r2, #12]
 8004b36:	60ba      	str	r2, [r7, #8]
 8004b38:	f04a 0201 	orr.w	r2, sl, #1
 8004b3c:	616b      	str	r3, [r5, #20]
 8004b3e:	612b      	str	r3, [r5, #16]
 8004b40:	60d9      	str	r1, [r3, #12]
 8004b42:	6099      	str	r1, [r3, #8]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	f846 a000 	str.w	sl, [r6, r0]
 8004b4a:	e6ff      	b.n	800494c <_malloc_r+0x64>
 8004b4c:	f1ba 0f00 	cmp.w	sl, #0
 8004b50:	db0f      	blt.n	8004b72 <_malloc_r+0x28a>
 8004b52:	4430      	add	r0, r6
 8004b54:	6843      	ldr	r3, [r0, #4]
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6043      	str	r3, [r0, #4]
 8004b5c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004b60:	4648      	mov	r0, r9
 8004b62:	60df      	str	r7, [r3, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	f000 f8df 	bl	8004d28 <__malloc_unlock>
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	b003      	add	sp, #12
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	463e      	mov	r6, r7
 8004b74:	e77a      	b.n	8004a6c <_malloc_r+0x184>
 8004b76:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004b7a:	4584      	cmp	ip, r0
 8004b7c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004b80:	f43f af7d 	beq.w	8004a7e <_malloc_r+0x196>
 8004b84:	e781      	b.n	8004a8a <_malloc_r+0x1a2>
 8004b86:	bf00      	nop
 8004b88:	20000190 	.word	0x20000190
 8004b8c:	20000198 	.word	0x20000198
 8004b90:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004b94:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004b98:	f026 0603 	bic.w	r6, r6, #3
 8004b9c:	42b4      	cmp	r4, r6
 8004b9e:	d803      	bhi.n	8004ba8 <_malloc_r+0x2c0>
 8004ba0:	1b33      	subs	r3, r6, r4
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	f300 8096 	bgt.w	8004cd4 <_malloc_r+0x3ec>
 8004ba8:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <_malloc_r+0x400>)
 8004baa:	6817      	ldr	r7, [r2, #0]
 8004bac:	4a4f      	ldr	r2, [pc, #316]	; (8004cec <_malloc_r+0x404>)
 8004bae:	6811      	ldr	r1, [r2, #0]
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	3101      	adds	r1, #1
 8004bb4:	eb0b 0306 	add.w	r3, fp, r6
 8004bb8:	4427      	add	r7, r4
 8004bba:	d005      	beq.n	8004bc8 <_malloc_r+0x2e0>
 8004bbc:	494c      	ldr	r1, [pc, #304]	; (8004cf0 <_malloc_r+0x408>)
 8004bbe:	3901      	subs	r1, #1
 8004bc0:	440f      	add	r7, r1
 8004bc2:	3101      	adds	r1, #1
 8004bc4:	4249      	negs	r1, r1
 8004bc6:	400f      	ands	r7, r1
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4648      	mov	r0, r9
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	f000 fb80 	bl	80052d4 <_sbrk_r>
 8004bd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004bd8:	4680      	mov	r8, r0
 8004bda:	d056      	beq.n	8004c8a <_malloc_r+0x3a2>
 8004bdc:	9b00      	ldr	r3, [sp, #0]
 8004bde:	9a01      	ldr	r2, [sp, #4]
 8004be0:	4283      	cmp	r3, r0
 8004be2:	d901      	bls.n	8004be8 <_malloc_r+0x300>
 8004be4:	45ab      	cmp	fp, r5
 8004be6:	d150      	bne.n	8004c8a <_malloc_r+0x3a2>
 8004be8:	4842      	ldr	r0, [pc, #264]	; (8004cf4 <_malloc_r+0x40c>)
 8004bea:	6801      	ldr	r1, [r0, #0]
 8004bec:	4543      	cmp	r3, r8
 8004bee:	eb07 0e01 	add.w	lr, r7, r1
 8004bf2:	f8c0 e000 	str.w	lr, [r0]
 8004bf6:	4940      	ldr	r1, [pc, #256]	; (8004cf8 <_malloc_r+0x410>)
 8004bf8:	4682      	mov	sl, r0
 8004bfa:	d113      	bne.n	8004c24 <_malloc_r+0x33c>
 8004bfc:	420b      	tst	r3, r1
 8004bfe:	d111      	bne.n	8004c24 <_malloc_r+0x33c>
 8004c00:	68ab      	ldr	r3, [r5, #8]
 8004c02:	443e      	add	r6, r7
 8004c04:	f046 0601 	orr.w	r6, r6, #1
 8004c08:	605e      	str	r6, [r3, #4]
 8004c0a:	4a3c      	ldr	r2, [pc, #240]	; (8004cfc <_malloc_r+0x414>)
 8004c0c:	f8da 3000 	ldr.w	r3, [sl]
 8004c10:	6811      	ldr	r1, [r2, #0]
 8004c12:	428b      	cmp	r3, r1
 8004c14:	bf88      	it	hi
 8004c16:	6013      	strhi	r3, [r2, #0]
 8004c18:	4a39      	ldr	r2, [pc, #228]	; (8004d00 <_malloc_r+0x418>)
 8004c1a:	6811      	ldr	r1, [r2, #0]
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	bf88      	it	hi
 8004c20:	6013      	strhi	r3, [r2, #0]
 8004c22:	e032      	b.n	8004c8a <_malloc_r+0x3a2>
 8004c24:	6810      	ldr	r0, [r2, #0]
 8004c26:	3001      	adds	r0, #1
 8004c28:	bf1b      	ittet	ne
 8004c2a:	eba8 0303 	subne.w	r3, r8, r3
 8004c2e:	4473      	addne	r3, lr
 8004c30:	f8c2 8000 	streq.w	r8, [r2]
 8004c34:	f8ca 3000 	strne.w	r3, [sl]
 8004c38:	f018 0007 	ands.w	r0, r8, #7
 8004c3c:	bf1c      	itt	ne
 8004c3e:	f1c0 0008 	rsbne	r0, r0, #8
 8004c42:	4480      	addne	r8, r0
 8004c44:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <_malloc_r+0x408>)
 8004c46:	4447      	add	r7, r8
 8004c48:	4418      	add	r0, r3
 8004c4a:	400f      	ands	r7, r1
 8004c4c:	1bc7      	subs	r7, r0, r7
 8004c4e:	4639      	mov	r1, r7
 8004c50:	4648      	mov	r0, r9
 8004c52:	f000 fb3f 	bl	80052d4 <_sbrk_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	bf08      	it	eq
 8004c5a:	4640      	moveq	r0, r8
 8004c5c:	f8da 3000 	ldr.w	r3, [sl]
 8004c60:	f8c5 8008 	str.w	r8, [r5, #8]
 8004c64:	bf08      	it	eq
 8004c66:	2700      	moveq	r7, #0
 8004c68:	eba0 0008 	sub.w	r0, r0, r8
 8004c6c:	443b      	add	r3, r7
 8004c6e:	4407      	add	r7, r0
 8004c70:	f047 0701 	orr.w	r7, r7, #1
 8004c74:	45ab      	cmp	fp, r5
 8004c76:	f8ca 3000 	str.w	r3, [sl]
 8004c7a:	f8c8 7004 	str.w	r7, [r8, #4]
 8004c7e:	d0c4      	beq.n	8004c0a <_malloc_r+0x322>
 8004c80:	2e0f      	cmp	r6, #15
 8004c82:	d810      	bhi.n	8004ca6 <_malloc_r+0x3be>
 8004c84:	2301      	movs	r3, #1
 8004c86:	f8c8 3004 	str.w	r3, [r8, #4]
 8004c8a:	68ab      	ldr	r3, [r5, #8]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	f022 0203 	bic.w	r2, r2, #3
 8004c92:	4294      	cmp	r4, r2
 8004c94:	eba2 0304 	sub.w	r3, r2, r4
 8004c98:	d801      	bhi.n	8004c9e <_malloc_r+0x3b6>
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	dc1a      	bgt.n	8004cd4 <_malloc_r+0x3ec>
 8004c9e:	4648      	mov	r0, r9
 8004ca0:	f000 f842 	bl	8004d28 <__malloc_unlock>
 8004ca4:	e62d      	b.n	8004902 <_malloc_r+0x1a>
 8004ca6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004caa:	3e0c      	subs	r6, #12
 8004cac:	f026 0607 	bic.w	r6, r6, #7
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	4333      	orrs	r3, r6
 8004cb6:	f8cb 3004 	str.w	r3, [fp, #4]
 8004cba:	eb0b 0306 	add.w	r3, fp, r6
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	2e0f      	cmp	r6, #15
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	d9a0      	bls.n	8004c0a <_malloc_r+0x322>
 8004cc8:	f10b 0108 	add.w	r1, fp, #8
 8004ccc:	4648      	mov	r0, r9
 8004cce:	f000 fc0f 	bl	80054f0 <_free_r>
 8004cd2:	e79a      	b.n	8004c0a <_malloc_r+0x322>
 8004cd4:	68ae      	ldr	r6, [r5, #8]
 8004cd6:	f044 0201 	orr.w	r2, r4, #1
 8004cda:	4434      	add	r4, r6
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6072      	str	r2, [r6, #4]
 8004ce2:	60ac      	str	r4, [r5, #8]
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	e631      	b.n	800494c <_malloc_r+0x64>
 8004ce8:	20000758 	.word	0x20000758
 8004cec:	20000598 	.word	0x20000598
 8004cf0:	00000080 	.word	0x00000080
 8004cf4:	20000728 	.word	0x20000728
 8004cf8:	0000007f 	.word	0x0000007f
 8004cfc:	20000750 	.word	0x20000750
 8004d00:	20000754 	.word	0x20000754

08004d04 <memcpy>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	1e43      	subs	r3, r0, #1
 8004d08:	440a      	add	r2, r1
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	bd10      	pop	{r4, pc}
 8004d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d18:	e7f7      	b.n	8004d0a <memcpy+0x6>
	...

08004d1c <__malloc_lock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_lock+0x8>)
 8004d1e:	f000 bca3 	b.w	8005668 <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	20000794 	.word	0x20000794

08004d28 <__malloc_unlock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_unlock+0x8>)
 8004d2a:	f000 bc9e 	b.w	800566a <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20000794 	.word	0x20000794

08004d34 <_Balloc>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	b93d      	cbnz	r5, 8004d4e <_Balloc+0x1a>
 8004d3e:	2010      	movs	r0, #16
 8004d40:	f7ff fdca 	bl	80048d8 <malloc>
 8004d44:	6260      	str	r0, [r4, #36]	; 0x24
 8004d46:	6045      	str	r5, [r0, #4]
 8004d48:	6085      	str	r5, [r0, #8]
 8004d4a:	6005      	str	r5, [r0, #0]
 8004d4c:	60c5      	str	r5, [r0, #12]
 8004d4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004d50:	68eb      	ldr	r3, [r5, #12]
 8004d52:	b183      	cbz	r3, 8004d76 <_Balloc+0x42>
 8004d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004d5c:	b9b8      	cbnz	r0, 8004d8e <_Balloc+0x5a>
 8004d5e:	2101      	movs	r1, #1
 8004d60:	fa01 f506 	lsl.w	r5, r1, r6
 8004d64:	1d6a      	adds	r2, r5, #5
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fb3d 	bl	80053e8 <_calloc_r>
 8004d6e:	b160      	cbz	r0, 8004d8a <_Balloc+0x56>
 8004d70:	6046      	str	r6, [r0, #4]
 8004d72:	6085      	str	r5, [r0, #8]
 8004d74:	e00e      	b.n	8004d94 <_Balloc+0x60>
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	2104      	movs	r1, #4
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 fb34 	bl	80053e8 <_calloc_r>
 8004d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d82:	60e8      	str	r0, [r5, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e4      	bne.n	8004d54 <_Balloc+0x20>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	6802      	ldr	r2, [r0, #0]
 8004d90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004d94:	2300      	movs	r3, #0
 8004d96:	6103      	str	r3, [r0, #16]
 8004d98:	60c3      	str	r3, [r0, #12]
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}

08004d9c <_Bfree>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004da0:	4606      	mov	r6, r0
 8004da2:	460d      	mov	r5, r1
 8004da4:	b93c      	cbnz	r4, 8004db6 <_Bfree+0x1a>
 8004da6:	2010      	movs	r0, #16
 8004da8:	f7ff fd96 	bl	80048d8 <malloc>
 8004dac:	6270      	str	r0, [r6, #36]	; 0x24
 8004dae:	6044      	str	r4, [r0, #4]
 8004db0:	6084      	str	r4, [r0, #8]
 8004db2:	6004      	str	r4, [r0, #0]
 8004db4:	60c4      	str	r4, [r0, #12]
 8004db6:	b13d      	cbz	r5, 8004dc8 <_Bfree+0x2c>
 8004db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004dba:	686a      	ldr	r2, [r5, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dc2:	6029      	str	r1, [r5, #0]
 8004dc4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}

08004dca <__multadd>:
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	690d      	ldr	r5, [r1, #16]
 8004dd0:	461f      	mov	r7, r3
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	f101 0e14 	add.w	lr, r1, #20
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8de 0000 	ldr.w	r0, [lr]
 8004de0:	b281      	uxth	r1, r0
 8004de2:	fb02 7101 	mla	r1, r2, r1, r7
 8004de6:	0c0f      	lsrs	r7, r1, #16
 8004de8:	0c00      	lsrs	r0, r0, #16
 8004dea:	fb02 7000 	mla	r0, r2, r0, r7
 8004dee:	b289      	uxth	r1, r1
 8004df0:	3301      	adds	r3, #1
 8004df2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004df6:	429d      	cmp	r5, r3
 8004df8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004dfc:	f84e 1b04 	str.w	r1, [lr], #4
 8004e00:	dcec      	bgt.n	8004ddc <__multadd+0x12>
 8004e02:	b1d7      	cbz	r7, 8004e3a <__multadd+0x70>
 8004e04:	68a3      	ldr	r3, [r4, #8]
 8004e06:	429d      	cmp	r5, r3
 8004e08:	db12      	blt.n	8004e30 <__multadd+0x66>
 8004e0a:	6861      	ldr	r1, [r4, #4]
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	3101      	adds	r1, #1
 8004e10:	f7ff ff90 	bl	8004d34 <_Balloc>
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	3202      	adds	r2, #2
 8004e18:	f104 010c 	add.w	r1, r4, #12
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	300c      	adds	r0, #12
 8004e22:	f7ff ff6f 	bl	8004d04 <memcpy>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff ffb7 	bl	8004d9c <_Bfree>
 8004e2e:	4644      	mov	r4, r8
 8004e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e34:	3501      	adds	r5, #1
 8004e36:	615f      	str	r7, [r3, #20]
 8004e38:	6125      	str	r5, [r4, #16]
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e40 <__hi0bits>:
 8004e40:	0c02      	lsrs	r2, r0, #16
 8004e42:	0412      	lsls	r2, r2, #16
 8004e44:	4603      	mov	r3, r0
 8004e46:	b9b2      	cbnz	r2, 8004e76 <__hi0bits+0x36>
 8004e48:	0403      	lsls	r3, r0, #16
 8004e4a:	2010      	movs	r0, #16
 8004e4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004e50:	bf04      	itt	eq
 8004e52:	021b      	lsleq	r3, r3, #8
 8004e54:	3008      	addeq	r0, #8
 8004e56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004e5a:	bf04      	itt	eq
 8004e5c:	011b      	lsleq	r3, r3, #4
 8004e5e:	3004      	addeq	r0, #4
 8004e60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004e64:	bf04      	itt	eq
 8004e66:	009b      	lsleq	r3, r3, #2
 8004e68:	3002      	addeq	r0, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db06      	blt.n	8004e7c <__hi0bits+0x3c>
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	d503      	bpl.n	8004e7a <__hi0bits+0x3a>
 8004e72:	3001      	adds	r0, #1
 8004e74:	4770      	bx	lr
 8004e76:	2000      	movs	r0, #0
 8004e78:	e7e8      	b.n	8004e4c <__hi0bits+0xc>
 8004e7a:	2020      	movs	r0, #32
 8004e7c:	4770      	bx	lr

08004e7e <__lo0bits>:
 8004e7e:	6803      	ldr	r3, [r0, #0]
 8004e80:	f013 0207 	ands.w	r2, r3, #7
 8004e84:	4601      	mov	r1, r0
 8004e86:	d00b      	beq.n	8004ea0 <__lo0bits+0x22>
 8004e88:	07da      	lsls	r2, r3, #31
 8004e8a:	d423      	bmi.n	8004ed4 <__lo0bits+0x56>
 8004e8c:	0798      	lsls	r0, r3, #30
 8004e8e:	bf49      	itett	mi
 8004e90:	085b      	lsrmi	r3, r3, #1
 8004e92:	089b      	lsrpl	r3, r3, #2
 8004e94:	2001      	movmi	r0, #1
 8004e96:	600b      	strmi	r3, [r1, #0]
 8004e98:	bf5c      	itt	pl
 8004e9a:	600b      	strpl	r3, [r1, #0]
 8004e9c:	2002      	movpl	r0, #2
 8004e9e:	4770      	bx	lr
 8004ea0:	b298      	uxth	r0, r3
 8004ea2:	b9a8      	cbnz	r0, 8004ed0 <__lo0bits+0x52>
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	2010      	movs	r0, #16
 8004ea8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004eac:	bf04      	itt	eq
 8004eae:	0a1b      	lsreq	r3, r3, #8
 8004eb0:	3008      	addeq	r0, #8
 8004eb2:	071a      	lsls	r2, r3, #28
 8004eb4:	bf04      	itt	eq
 8004eb6:	091b      	lsreq	r3, r3, #4
 8004eb8:	3004      	addeq	r0, #4
 8004eba:	079a      	lsls	r2, r3, #30
 8004ebc:	bf04      	itt	eq
 8004ebe:	089b      	lsreq	r3, r3, #2
 8004ec0:	3002      	addeq	r0, #2
 8004ec2:	07da      	lsls	r2, r3, #31
 8004ec4:	d402      	bmi.n	8004ecc <__lo0bits+0x4e>
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	d006      	beq.n	8004ed8 <__lo0bits+0x5a>
 8004eca:	3001      	adds	r0, #1
 8004ecc:	600b      	str	r3, [r1, #0]
 8004ece:	4770      	bx	lr
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	e7e9      	b.n	8004ea8 <__lo0bits+0x2a>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	4770      	bx	lr
 8004ed8:	2020      	movs	r0, #32
 8004eda:	4770      	bx	lr

08004edc <__i2b>:
 8004edc:	b510      	push	{r4, lr}
 8004ede:	460c      	mov	r4, r1
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	f7ff ff27 	bl	8004d34 <_Balloc>
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6144      	str	r4, [r0, #20]
 8004eea:	6102      	str	r2, [r0, #16]
 8004eec:	bd10      	pop	{r4, pc}

08004eee <__multiply>:
 8004eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef2:	4614      	mov	r4, r2
 8004ef4:	690a      	ldr	r2, [r1, #16]
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bfb8      	it	lt
 8004efc:	460b      	movlt	r3, r1
 8004efe:	4689      	mov	r9, r1
 8004f00:	bfbc      	itt	lt
 8004f02:	46a1      	movlt	r9, r4
 8004f04:	461c      	movlt	r4, r3
 8004f06:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004f0a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004f12:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004f16:	eb07 060a 	add.w	r6, r7, sl
 8004f1a:	429e      	cmp	r6, r3
 8004f1c:	bfc8      	it	gt
 8004f1e:	3101      	addgt	r1, #1
 8004f20:	f7ff ff08 	bl	8004d34 <_Balloc>
 8004f24:	f100 0514 	add.w	r5, r0, #20
 8004f28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4543      	cmp	r3, r8
 8004f32:	d316      	bcc.n	8004f62 <__multiply+0x74>
 8004f34:	f104 0214 	add.w	r2, r4, #20
 8004f38:	f109 0114 	add.w	r1, r9, #20
 8004f3c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004f40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	9c01      	ldr	r4, [sp, #4]
 8004f48:	4294      	cmp	r4, r2
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	d80c      	bhi.n	8004f68 <__multiply+0x7a>
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	dd03      	ble.n	8004f5a <__multiply+0x6c>
 8004f52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d054      	beq.n	8005004 <__multiply+0x116>
 8004f5a:	6106      	str	r6, [r0, #16]
 8004f5c:	b003      	add	sp, #12
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	f843 2b04 	str.w	r2, [r3], #4
 8004f66:	e7e3      	b.n	8004f30 <__multiply+0x42>
 8004f68:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f6c:	3204      	adds	r2, #4
 8004f6e:	f1ba 0f00 	cmp.w	sl, #0
 8004f72:	d020      	beq.n	8004fb6 <__multiply+0xc8>
 8004f74:	46ae      	mov	lr, r5
 8004f76:	4689      	mov	r9, r1
 8004f78:	f04f 0c00 	mov.w	ip, #0
 8004f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8004f80:	f8be b000 	ldrh.w	fp, [lr]
 8004f84:	b2a3      	uxth	r3, r4
 8004f86:	fb0a b303 	mla	r3, sl, r3, fp
 8004f8a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004f8e:	f8de 4000 	ldr.w	r4, [lr]
 8004f92:	4463      	add	r3, ip
 8004f94:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004f98:	fb0a c40b 	mla	r4, sl, fp, ip
 8004f9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004fa6:	454f      	cmp	r7, r9
 8004fa8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004fac:	f84e 3b04 	str.w	r3, [lr], #4
 8004fb0:	d8e4      	bhi.n	8004f7c <__multiply+0x8e>
 8004fb2:	f8ce c000 	str.w	ip, [lr]
 8004fb6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004fba:	f1b9 0f00 	cmp.w	r9, #0
 8004fbe:	d01f      	beq.n	8005000 <__multiply+0x112>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	46ae      	mov	lr, r5
 8004fc4:	468c      	mov	ip, r1
 8004fc6:	f04f 0a00 	mov.w	sl, #0
 8004fca:	f8bc 4000 	ldrh.w	r4, [ip]
 8004fce:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004fd2:	fb09 b404 	mla	r4, r9, r4, fp
 8004fd6:	44a2      	add	sl, r4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004fde:	f84e 3b04 	str.w	r3, [lr], #4
 8004fe2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fe6:	f8be 4000 	ldrh.w	r4, [lr]
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	fb09 4303 	mla	r3, r9, r3, r4
 8004ff0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004ff4:	4567      	cmp	r7, ip
 8004ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ffa:	d8e6      	bhi.n	8004fca <__multiply+0xdc>
 8004ffc:	f8ce 3000 	str.w	r3, [lr]
 8005000:	3504      	adds	r5, #4
 8005002:	e7a0      	b.n	8004f46 <__multiply+0x58>
 8005004:	3e01      	subs	r6, #1
 8005006:	e7a2      	b.n	8004f4e <__multiply+0x60>

08005008 <__pow5mult>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4615      	mov	r5, r2
 800500e:	f012 0203 	ands.w	r2, r2, #3
 8005012:	4606      	mov	r6, r0
 8005014:	460f      	mov	r7, r1
 8005016:	d007      	beq.n	8005028 <__pow5mult+0x20>
 8005018:	3a01      	subs	r2, #1
 800501a:	4c21      	ldr	r4, [pc, #132]	; (80050a0 <__pow5mult+0x98>)
 800501c:	2300      	movs	r3, #0
 800501e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005022:	f7ff fed2 	bl	8004dca <__multadd>
 8005026:	4607      	mov	r7, r0
 8005028:	10ad      	asrs	r5, r5, #2
 800502a:	d035      	beq.n	8005098 <__pow5mult+0x90>
 800502c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800502e:	b93c      	cbnz	r4, 8005040 <__pow5mult+0x38>
 8005030:	2010      	movs	r0, #16
 8005032:	f7ff fc51 	bl	80048d8 <malloc>
 8005036:	6270      	str	r0, [r6, #36]	; 0x24
 8005038:	6044      	str	r4, [r0, #4]
 800503a:	6084      	str	r4, [r0, #8]
 800503c:	6004      	str	r4, [r0, #0]
 800503e:	60c4      	str	r4, [r0, #12]
 8005040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005048:	b94c      	cbnz	r4, 800505e <__pow5mult+0x56>
 800504a:	f240 2171 	movw	r1, #625	; 0x271
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff ff44 	bl	8004edc <__i2b>
 8005054:	2300      	movs	r3, #0
 8005056:	f8c8 0008 	str.w	r0, [r8, #8]
 800505a:	4604      	mov	r4, r0
 800505c:	6003      	str	r3, [r0, #0]
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	07eb      	lsls	r3, r5, #31
 8005064:	d50a      	bpl.n	800507c <__pow5mult+0x74>
 8005066:	4639      	mov	r1, r7
 8005068:	4622      	mov	r2, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff ff3f 	bl	8004eee <__multiply>
 8005070:	4639      	mov	r1, r7
 8005072:	4681      	mov	r9, r0
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff fe91 	bl	8004d9c <_Bfree>
 800507a:	464f      	mov	r7, r9
 800507c:	106d      	asrs	r5, r5, #1
 800507e:	d00b      	beq.n	8005098 <__pow5mult+0x90>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	b938      	cbnz	r0, 8005094 <__pow5mult+0x8c>
 8005084:	4622      	mov	r2, r4
 8005086:	4621      	mov	r1, r4
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ff30 	bl	8004eee <__multiply>
 800508e:	6020      	str	r0, [r4, #0]
 8005090:	f8c0 8000 	str.w	r8, [r0]
 8005094:	4604      	mov	r4, r0
 8005096:	e7e4      	b.n	8005062 <__pow5mult+0x5a>
 8005098:	4638      	mov	r0, r7
 800509a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509e:	bf00      	nop
 80050a0:	08005ba8 	.word	0x08005ba8

080050a4 <__lshift>:
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	460c      	mov	r4, r1
 80050aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	6849      	ldr	r1, [r1, #4]
 80050b2:	eb0a 0903 	add.w	r9, sl, r3
 80050b6:	68a3      	ldr	r3, [r4, #8]
 80050b8:	4607      	mov	r7, r0
 80050ba:	4616      	mov	r6, r2
 80050bc:	f109 0501 	add.w	r5, r9, #1
 80050c0:	42ab      	cmp	r3, r5
 80050c2:	db31      	blt.n	8005128 <__lshift+0x84>
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff fe35 	bl	8004d34 <_Balloc>
 80050ca:	2200      	movs	r2, #0
 80050cc:	4680      	mov	r8, r0
 80050ce:	f100 0314 	add.w	r3, r0, #20
 80050d2:	4611      	mov	r1, r2
 80050d4:	4552      	cmp	r2, sl
 80050d6:	db2a      	blt.n	800512e <__lshift+0x8a>
 80050d8:	6920      	ldr	r0, [r4, #16]
 80050da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050de:	f104 0114 	add.w	r1, r4, #20
 80050e2:	f016 021f 	ands.w	r2, r6, #31
 80050e6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80050ea:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80050ee:	d022      	beq.n	8005136 <__lshift+0x92>
 80050f0:	f1c2 0c20 	rsb	ip, r2, #32
 80050f4:	2000      	movs	r0, #0
 80050f6:	680e      	ldr	r6, [r1, #0]
 80050f8:	4096      	lsls	r6, r2
 80050fa:	4330      	orrs	r0, r6
 80050fc:	f843 0b04 	str.w	r0, [r3], #4
 8005100:	f851 0b04 	ldr.w	r0, [r1], #4
 8005104:	458e      	cmp	lr, r1
 8005106:	fa20 f00c 	lsr.w	r0, r0, ip
 800510a:	d8f4      	bhi.n	80050f6 <__lshift+0x52>
 800510c:	6018      	str	r0, [r3, #0]
 800510e:	b108      	cbz	r0, 8005114 <__lshift+0x70>
 8005110:	f109 0502 	add.w	r5, r9, #2
 8005114:	3d01      	subs	r5, #1
 8005116:	4638      	mov	r0, r7
 8005118:	f8c8 5010 	str.w	r5, [r8, #16]
 800511c:	4621      	mov	r1, r4
 800511e:	f7ff fe3d 	bl	8004d9c <_Bfree>
 8005122:	4640      	mov	r0, r8
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	3101      	adds	r1, #1
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	e7c8      	b.n	80050c0 <__lshift+0x1c>
 800512e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005132:	3201      	adds	r2, #1
 8005134:	e7ce      	b.n	80050d4 <__lshift+0x30>
 8005136:	3b04      	subs	r3, #4
 8005138:	f851 2b04 	ldr.w	r2, [r1], #4
 800513c:	f843 2f04 	str.w	r2, [r3, #4]!
 8005140:	458e      	cmp	lr, r1
 8005142:	d8f9      	bhi.n	8005138 <__lshift+0x94>
 8005144:	e7e6      	b.n	8005114 <__lshift+0x70>

08005146 <__mcmp>:
 8005146:	6903      	ldr	r3, [r0, #16]
 8005148:	690a      	ldr	r2, [r1, #16]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	b530      	push	{r4, r5, lr}
 800514e:	d10c      	bne.n	800516a <__mcmp+0x24>
 8005150:	0092      	lsls	r2, r2, #2
 8005152:	3014      	adds	r0, #20
 8005154:	3114      	adds	r1, #20
 8005156:	1884      	adds	r4, r0, r2
 8005158:	4411      	add	r1, r2
 800515a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800515e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005162:	4295      	cmp	r5, r2
 8005164:	d003      	beq.n	800516e <__mcmp+0x28>
 8005166:	d305      	bcc.n	8005174 <__mcmp+0x2e>
 8005168:	2301      	movs	r3, #1
 800516a:	4618      	mov	r0, r3
 800516c:	bd30      	pop	{r4, r5, pc}
 800516e:	42a0      	cmp	r0, r4
 8005170:	d3f3      	bcc.n	800515a <__mcmp+0x14>
 8005172:	e7fa      	b.n	800516a <__mcmp+0x24>
 8005174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005178:	e7f7      	b.n	800516a <__mcmp+0x24>

0800517a <__mdiff>:
 800517a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517e:	460d      	mov	r5, r1
 8005180:	4607      	mov	r7, r0
 8005182:	4611      	mov	r1, r2
 8005184:	4628      	mov	r0, r5
 8005186:	4614      	mov	r4, r2
 8005188:	f7ff ffdd 	bl	8005146 <__mcmp>
 800518c:	1e06      	subs	r6, r0, #0
 800518e:	d108      	bne.n	80051a2 <__mdiff+0x28>
 8005190:	4631      	mov	r1, r6
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff fdce 	bl	8004d34 <_Balloc>
 8005198:	2301      	movs	r3, #1
 800519a:	6103      	str	r3, [r0, #16]
 800519c:	6146      	str	r6, [r0, #20]
 800519e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a2:	bfa4      	itt	ge
 80051a4:	4623      	movge	r3, r4
 80051a6:	462c      	movge	r4, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	6861      	ldr	r1, [r4, #4]
 80051ac:	bfa6      	itte	ge
 80051ae:	461d      	movge	r5, r3
 80051b0:	2600      	movge	r6, #0
 80051b2:	2601      	movlt	r6, #1
 80051b4:	f7ff fdbe 	bl	8004d34 <_Balloc>
 80051b8:	692b      	ldr	r3, [r5, #16]
 80051ba:	60c6      	str	r6, [r0, #12]
 80051bc:	6926      	ldr	r6, [r4, #16]
 80051be:	f105 0914 	add.w	r9, r5, #20
 80051c2:	f104 0214 	add.w	r2, r4, #20
 80051c6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80051ca:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80051ce:	f100 0514 	add.w	r5, r0, #20
 80051d2:	f04f 0c00 	mov.w	ip, #0
 80051d6:	f852 ab04 	ldr.w	sl, [r2], #4
 80051da:	f859 4b04 	ldr.w	r4, [r9], #4
 80051de:	fa1c f18a 	uxtah	r1, ip, sl
 80051e2:	b2a3      	uxth	r3, r4
 80051e4:	1ac9      	subs	r1, r1, r3
 80051e6:	0c23      	lsrs	r3, r4, #16
 80051e8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80051ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80051f0:	b289      	uxth	r1, r1
 80051f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80051f6:	45c8      	cmp	r8, r9
 80051f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80051fc:	4696      	mov	lr, r2
 80051fe:	f845 3b04 	str.w	r3, [r5], #4
 8005202:	d8e8      	bhi.n	80051d6 <__mdiff+0x5c>
 8005204:	45be      	cmp	lr, r7
 8005206:	d305      	bcc.n	8005214 <__mdiff+0x9a>
 8005208:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800520c:	b18b      	cbz	r3, 8005232 <__mdiff+0xb8>
 800520e:	6106      	str	r6, [r0, #16]
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005218:	fa1c f381 	uxtah	r3, ip, r1
 800521c:	141a      	asrs	r2, r3, #16
 800521e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005222:	b29b      	uxth	r3, r3
 8005224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800522c:	f845 3b04 	str.w	r3, [r5], #4
 8005230:	e7e8      	b.n	8005204 <__mdiff+0x8a>
 8005232:	3e01      	subs	r6, #1
 8005234:	e7e8      	b.n	8005208 <__mdiff+0x8e>

08005236 <__d2b>:
 8005236:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800523a:	460e      	mov	r6, r1
 800523c:	2101      	movs	r1, #1
 800523e:	ec59 8b10 	vmov	r8, r9, d0
 8005242:	4615      	mov	r5, r2
 8005244:	f7ff fd76 	bl	8004d34 <_Balloc>
 8005248:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800524c:	4607      	mov	r7, r0
 800524e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005252:	bb34      	cbnz	r4, 80052a2 <__d2b+0x6c>
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	f1b8 0f00 	cmp.w	r8, #0
 800525a:	d027      	beq.n	80052ac <__d2b+0x76>
 800525c:	a802      	add	r0, sp, #8
 800525e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005262:	f7ff fe0c 	bl	8004e7e <__lo0bits>
 8005266:	9900      	ldr	r1, [sp, #0]
 8005268:	b1f0      	cbz	r0, 80052a8 <__d2b+0x72>
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	f1c0 0320 	rsb	r3, r0, #32
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	430b      	orrs	r3, r1
 8005276:	40c2      	lsrs	r2, r0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	9201      	str	r2, [sp, #4]
 800527c:	9b01      	ldr	r3, [sp, #4]
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2102      	movne	r1, #2
 8005286:	2101      	moveq	r1, #1
 8005288:	6139      	str	r1, [r7, #16]
 800528a:	b1c4      	cbz	r4, 80052be <__d2b+0x88>
 800528c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005290:	4404      	add	r4, r0
 8005292:	6034      	str	r4, [r6, #0]
 8005294:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005298:	6028      	str	r0, [r5, #0]
 800529a:	4638      	mov	r0, r7
 800529c:	b003      	add	sp, #12
 800529e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a6:	e7d5      	b.n	8005254 <__d2b+0x1e>
 80052a8:	6179      	str	r1, [r7, #20]
 80052aa:	e7e7      	b.n	800527c <__d2b+0x46>
 80052ac:	a801      	add	r0, sp, #4
 80052ae:	f7ff fde6 	bl	8004e7e <__lo0bits>
 80052b2:	9b01      	ldr	r3, [sp, #4]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	2101      	movs	r1, #1
 80052b8:	6139      	str	r1, [r7, #16]
 80052ba:	3020      	adds	r0, #32
 80052bc:	e7e5      	b.n	800528a <__d2b+0x54>
 80052be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80052c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80052c6:	6030      	str	r0, [r6, #0]
 80052c8:	6918      	ldr	r0, [r3, #16]
 80052ca:	f7ff fdb9 	bl	8004e40 <__hi0bits>
 80052ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80052d2:	e7e1      	b.n	8005298 <__d2b+0x62>

080052d4 <_sbrk_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4c06      	ldr	r4, [pc, #24]	; (80052f0 <_sbrk_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4605      	mov	r5, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	f000 fb86 	bl	80059f0 <_sbrk>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_sbrk_r+0x1a>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_sbrk_r+0x1a>
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	2000079c 	.word	0x2000079c

080052f4 <__ssprint_r>:
 80052f4:	6893      	ldr	r3, [r2, #8]
 80052f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	4681      	mov	r9, r0
 80052fc:	460c      	mov	r4, r1
 80052fe:	4617      	mov	r7, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d060      	beq.n	80053c6 <__ssprint_r+0xd2>
 8005304:	f04f 0b00 	mov.w	fp, #0
 8005308:	f8d2 a000 	ldr.w	sl, [r2]
 800530c:	465e      	mov	r6, fp
 800530e:	b356      	cbz	r6, 8005366 <__ssprint_r+0x72>
 8005310:	68a3      	ldr	r3, [r4, #8]
 8005312:	429e      	cmp	r6, r3
 8005314:	d344      	bcc.n	80053a0 <__ssprint_r+0xac>
 8005316:	89a2      	ldrh	r2, [r4, #12]
 8005318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800531c:	d03e      	beq.n	800539c <__ssprint_r+0xa8>
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	6921      	ldr	r1, [r4, #16]
 8005322:	eba5 0801 	sub.w	r8, r5, r1
 8005326:	6965      	ldr	r5, [r4, #20]
 8005328:	2302      	movs	r3, #2
 800532a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800532e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005332:	f108 0301 	add.w	r3, r8, #1
 8005336:	4433      	add	r3, r6
 8005338:	429d      	cmp	r5, r3
 800533a:	bf38      	it	cc
 800533c:	461d      	movcc	r5, r3
 800533e:	0553      	lsls	r3, r2, #21
 8005340:	d546      	bpl.n	80053d0 <__ssprint_r+0xdc>
 8005342:	4629      	mov	r1, r5
 8005344:	4648      	mov	r0, r9
 8005346:	f7ff facf 	bl	80048e8 <_malloc_r>
 800534a:	b998      	cbnz	r0, 8005374 <__ssprint_r+0x80>
 800534c:	230c      	movs	r3, #12
 800534e:	f8c9 3000 	str.w	r3, [r9]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005364:	e031      	b.n	80053ca <__ssprint_r+0xd6>
 8005366:	f8da b000 	ldr.w	fp, [sl]
 800536a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800536e:	f10a 0a08 	add.w	sl, sl, #8
 8005372:	e7cc      	b.n	800530e <__ssprint_r+0x1a>
 8005374:	4642      	mov	r2, r8
 8005376:	6921      	ldr	r1, [r4, #16]
 8005378:	9001      	str	r0, [sp, #4]
 800537a:	f7ff fcc3 	bl	8004d04 <memcpy>
 800537e:	89a2      	ldrh	r2, [r4, #12]
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800538a:	81a2      	strh	r2, [r4, #12]
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	6165      	str	r5, [r4, #20]
 8005390:	4443      	add	r3, r8
 8005392:	eba5 0508 	sub.w	r5, r5, r8
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	60a5      	str	r5, [r4, #8]
 800539a:	4633      	mov	r3, r6
 800539c:	429e      	cmp	r6, r3
 800539e:	d200      	bcs.n	80053a2 <__ssprint_r+0xae>
 80053a0:	4633      	mov	r3, r6
 80053a2:	461a      	mov	r2, r3
 80053a4:	4659      	mov	r1, fp
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	f000 f971 	bl	8005690 <memmove>
 80053ae:	68a2      	ldr	r2, [r4, #8]
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	60a2      	str	r2, [r4, #8]
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	1b9e      	subs	r6, r3, r6
 80053c0:	60be      	str	r6, [r7, #8]
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d1cf      	bne.n	8005366 <__ssprint_r+0x72>
 80053c6:	2000      	movs	r0, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	b003      	add	sp, #12
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	462a      	mov	r2, r5
 80053d2:	4648      	mov	r0, r9
 80053d4:	f000 f97e 	bl	80056d4 <_realloc_r>
 80053d8:	4603      	mov	r3, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1d6      	bne.n	800538c <__ssprint_r+0x98>
 80053de:	6921      	ldr	r1, [r4, #16]
 80053e0:	4648      	mov	r0, r9
 80053e2:	f000 f885 	bl	80054f0 <_free_r>
 80053e6:	e7b1      	b.n	800534c <__ssprint_r+0x58>

080053e8 <_calloc_r>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4351      	muls	r1, r2
 80053ec:	f7ff fa7c 	bl	80048e8 <_malloc_r>
 80053f0:	4604      	mov	r4, r0
 80053f2:	b198      	cbz	r0, 800541c <_calloc_r+0x34>
 80053f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80053f8:	f022 0203 	bic.w	r2, r2, #3
 80053fc:	3a04      	subs	r2, #4
 80053fe:	2a24      	cmp	r2, #36	; 0x24
 8005400:	d81b      	bhi.n	800543a <_calloc_r+0x52>
 8005402:	2a13      	cmp	r2, #19
 8005404:	d917      	bls.n	8005436 <_calloc_r+0x4e>
 8005406:	2100      	movs	r1, #0
 8005408:	2a1b      	cmp	r2, #27
 800540a:	6001      	str	r1, [r0, #0]
 800540c:	6041      	str	r1, [r0, #4]
 800540e:	d807      	bhi.n	8005420 <_calloc_r+0x38>
 8005410:	f100 0308 	add.w	r3, r0, #8
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	609a      	str	r2, [r3, #8]
 800541c:	4620      	mov	r0, r4
 800541e:	bd10      	pop	{r4, pc}
 8005420:	2a24      	cmp	r2, #36	; 0x24
 8005422:	6081      	str	r1, [r0, #8]
 8005424:	60c1      	str	r1, [r0, #12]
 8005426:	bf11      	iteee	ne
 8005428:	f100 0310 	addne.w	r3, r0, #16
 800542c:	6101      	streq	r1, [r0, #16]
 800542e:	f100 0318 	addeq.w	r3, r0, #24
 8005432:	6141      	streq	r1, [r0, #20]
 8005434:	e7ee      	b.n	8005414 <_calloc_r+0x2c>
 8005436:	4603      	mov	r3, r0
 8005438:	e7ec      	b.n	8005414 <_calloc_r+0x2c>
 800543a:	2100      	movs	r1, #0
 800543c:	f000 f942 	bl	80056c4 <memset>
 8005440:	e7ec      	b.n	800541c <_calloc_r+0x34>
	...

08005444 <_malloc_trim_r>:
 8005444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005448:	4f25      	ldr	r7, [pc, #148]	; (80054e0 <_malloc_trim_r+0x9c>)
 800544a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80054ec <_malloc_trim_r+0xa8>
 800544e:	4689      	mov	r9, r1
 8005450:	4606      	mov	r6, r0
 8005452:	f7ff fc63 	bl	8004d1c <__malloc_lock>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685d      	ldr	r5, [r3, #4]
 800545a:	f1a8 0411 	sub.w	r4, r8, #17
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	eba4 0409 	sub.w	r4, r4, r9
 8005466:	442c      	add	r4, r5
 8005468:	fbb4 f4f8 	udiv	r4, r4, r8
 800546c:	3c01      	subs	r4, #1
 800546e:	fb08 f404 	mul.w	r4, r8, r4
 8005472:	4544      	cmp	r4, r8
 8005474:	da05      	bge.n	8005482 <_malloc_trim_r+0x3e>
 8005476:	4630      	mov	r0, r6
 8005478:	f7ff fc56 	bl	8004d28 <__malloc_unlock>
 800547c:	2000      	movs	r0, #0
 800547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005482:	2100      	movs	r1, #0
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff ff25 	bl	80052d4 <_sbrk_r>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	442b      	add	r3, r5
 800548e:	4298      	cmp	r0, r3
 8005490:	d1f1      	bne.n	8005476 <_malloc_trim_r+0x32>
 8005492:	4261      	negs	r1, r4
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff ff1d 	bl	80052d4 <_sbrk_r>
 800549a:	3001      	adds	r0, #1
 800549c:	d110      	bne.n	80054c0 <_malloc_trim_r+0x7c>
 800549e:	2100      	movs	r1, #0
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7ff ff17 	bl	80052d4 <_sbrk_r>
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	1a83      	subs	r3, r0, r2
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	dde3      	ble.n	8005476 <_malloc_trim_r+0x32>
 80054ae:	490d      	ldr	r1, [pc, #52]	; (80054e4 <_malloc_trim_r+0xa0>)
 80054b0:	6809      	ldr	r1, [r1, #0]
 80054b2:	1a40      	subs	r0, r0, r1
 80054b4:	490c      	ldr	r1, [pc, #48]	; (80054e8 <_malloc_trim_r+0xa4>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6008      	str	r0, [r1, #0]
 80054bc:	6053      	str	r3, [r2, #4]
 80054be:	e7da      	b.n	8005476 <_malloc_trim_r+0x32>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <_malloc_trim_r+0xa4>)
 80054c4:	1b2d      	subs	r5, r5, r4
 80054c6:	f045 0501 	orr.w	r5, r5, #1
 80054ca:	605d      	str	r5, [r3, #4]
 80054cc:	6813      	ldr	r3, [r2, #0]
 80054ce:	4630      	mov	r0, r6
 80054d0:	1b1c      	subs	r4, r3, r4
 80054d2:	6014      	str	r4, [r2, #0]
 80054d4:	f7ff fc28 	bl	8004d28 <__malloc_unlock>
 80054d8:	2001      	movs	r0, #1
 80054da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054de:	bf00      	nop
 80054e0:	20000190 	.word	0x20000190
 80054e4:	20000598 	.word	0x20000598
 80054e8:	20000728 	.word	0x20000728
 80054ec:	00000080 	.word	0x00000080

080054f0 <_free_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	4688      	mov	r8, r1
 80054f8:	2900      	cmp	r1, #0
 80054fa:	f000 80ab 	beq.w	8005654 <_free_r+0x164>
 80054fe:	f7ff fc0d 	bl	8004d1c <__malloc_lock>
 8005502:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005506:	4d54      	ldr	r5, [pc, #336]	; (8005658 <_free_r+0x168>)
 8005508:	f022 0001 	bic.w	r0, r2, #1
 800550c:	f1a8 0308 	sub.w	r3, r8, #8
 8005510:	181f      	adds	r7, r3, r0
 8005512:	68a9      	ldr	r1, [r5, #8]
 8005514:	687e      	ldr	r6, [r7, #4]
 8005516:	428f      	cmp	r7, r1
 8005518:	f026 0603 	bic.w	r6, r6, #3
 800551c:	f002 0201 	and.w	r2, r2, #1
 8005520:	d11b      	bne.n	800555a <_free_r+0x6a>
 8005522:	4430      	add	r0, r6
 8005524:	b93a      	cbnz	r2, 8005536 <_free_r+0x46>
 8005526:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	4410      	add	r0, r2
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	60ca      	str	r2, [r1, #12]
 8005534:	6091      	str	r1, [r2, #8]
 8005536:	f040 0201 	orr.w	r2, r0, #1
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	60ab      	str	r3, [r5, #8]
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <_free_r+0x16c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4298      	cmp	r0, r3
 8005544:	d304      	bcc.n	8005550 <_free_r+0x60>
 8005546:	4b46      	ldr	r3, [pc, #280]	; (8005660 <_free_r+0x170>)
 8005548:	4620      	mov	r0, r4
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	f7ff ff7a 	bl	8005444 <_malloc_trim_r>
 8005550:	4620      	mov	r0, r4
 8005552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	f7ff bbe7 	b.w	8004d28 <__malloc_unlock>
 800555a:	607e      	str	r6, [r7, #4]
 800555c:	2a00      	cmp	r2, #0
 800555e:	d139      	bne.n	80055d4 <_free_r+0xe4>
 8005560:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005564:	1a5b      	subs	r3, r3, r1
 8005566:	4408      	add	r0, r1
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	f105 0e08 	add.w	lr, r5, #8
 800556e:	4571      	cmp	r1, lr
 8005570:	d032      	beq.n	80055d8 <_free_r+0xe8>
 8005572:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005576:	f8c1 e00c 	str.w	lr, [r1, #12]
 800557a:	f8ce 1008 	str.w	r1, [lr, #8]
 800557e:	19b9      	adds	r1, r7, r6
 8005580:	6849      	ldr	r1, [r1, #4]
 8005582:	07c9      	lsls	r1, r1, #31
 8005584:	d40a      	bmi.n	800559c <_free_r+0xac>
 8005586:	4430      	add	r0, r6
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	bb3a      	cbnz	r2, 80055dc <_free_r+0xec>
 800558c:	4e35      	ldr	r6, [pc, #212]	; (8005664 <_free_r+0x174>)
 800558e:	42b1      	cmp	r1, r6
 8005590:	d124      	bne.n	80055dc <_free_r+0xec>
 8005592:	616b      	str	r3, [r5, #20]
 8005594:	612b      	str	r3, [r5, #16]
 8005596:	2201      	movs	r2, #1
 8005598:	60d9      	str	r1, [r3, #12]
 800559a:	6099      	str	r1, [r3, #8]
 800559c:	f040 0101 	orr.w	r1, r0, #1
 80055a0:	6059      	str	r1, [r3, #4]
 80055a2:	5018      	str	r0, [r3, r0]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d1d3      	bne.n	8005550 <_free_r+0x60>
 80055a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80055ac:	d21a      	bcs.n	80055e4 <_free_r+0xf4>
 80055ae:	08c0      	lsrs	r0, r0, #3
 80055b0:	1081      	asrs	r1, r0, #2
 80055b2:	2201      	movs	r2, #1
 80055b4:	408a      	lsls	r2, r1
 80055b6:	6869      	ldr	r1, [r5, #4]
 80055b8:	3001      	adds	r0, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	606a      	str	r2, [r5, #4]
 80055be:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80055c2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80055c6:	6099      	str	r1, [r3, #8]
 80055c8:	3a08      	subs	r2, #8
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80055d0:	60cb      	str	r3, [r1, #12]
 80055d2:	e7bd      	b.n	8005550 <_free_r+0x60>
 80055d4:	2200      	movs	r2, #0
 80055d6:	e7d2      	b.n	800557e <_free_r+0x8e>
 80055d8:	2201      	movs	r2, #1
 80055da:	e7d0      	b.n	800557e <_free_r+0x8e>
 80055dc:	68fe      	ldr	r6, [r7, #12]
 80055de:	60ce      	str	r6, [r1, #12]
 80055e0:	60b1      	str	r1, [r6, #8]
 80055e2:	e7db      	b.n	800559c <_free_r+0xac>
 80055e4:	0a42      	lsrs	r2, r0, #9
 80055e6:	2a04      	cmp	r2, #4
 80055e8:	d813      	bhi.n	8005612 <_free_r+0x122>
 80055ea:	0982      	lsrs	r2, r0, #6
 80055ec:	3238      	adds	r2, #56	; 0x38
 80055ee:	1c51      	adds	r1, r2, #1
 80055f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80055f4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80055f8:	428e      	cmp	r6, r1
 80055fa:	d124      	bne.n	8005646 <_free_r+0x156>
 80055fc:	2001      	movs	r0, #1
 80055fe:	1092      	asrs	r2, r2, #2
 8005600:	fa00 f202 	lsl.w	r2, r0, r2
 8005604:	6868      	ldr	r0, [r5, #4]
 8005606:	4302      	orrs	r2, r0
 8005608:	606a      	str	r2, [r5, #4]
 800560a:	60de      	str	r6, [r3, #12]
 800560c:	6099      	str	r1, [r3, #8]
 800560e:	60b3      	str	r3, [r6, #8]
 8005610:	e7de      	b.n	80055d0 <_free_r+0xe0>
 8005612:	2a14      	cmp	r2, #20
 8005614:	d801      	bhi.n	800561a <_free_r+0x12a>
 8005616:	325b      	adds	r2, #91	; 0x5b
 8005618:	e7e9      	b.n	80055ee <_free_r+0xfe>
 800561a:	2a54      	cmp	r2, #84	; 0x54
 800561c:	d802      	bhi.n	8005624 <_free_r+0x134>
 800561e:	0b02      	lsrs	r2, r0, #12
 8005620:	326e      	adds	r2, #110	; 0x6e
 8005622:	e7e4      	b.n	80055ee <_free_r+0xfe>
 8005624:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005628:	d802      	bhi.n	8005630 <_free_r+0x140>
 800562a:	0bc2      	lsrs	r2, r0, #15
 800562c:	3277      	adds	r2, #119	; 0x77
 800562e:	e7de      	b.n	80055ee <_free_r+0xfe>
 8005630:	f240 5154 	movw	r1, #1364	; 0x554
 8005634:	428a      	cmp	r2, r1
 8005636:	bf9a      	itte	ls
 8005638:	0c82      	lsrls	r2, r0, #18
 800563a:	327c      	addls	r2, #124	; 0x7c
 800563c:	227e      	movhi	r2, #126	; 0x7e
 800563e:	e7d6      	b.n	80055ee <_free_r+0xfe>
 8005640:	6889      	ldr	r1, [r1, #8]
 8005642:	428e      	cmp	r6, r1
 8005644:	d004      	beq.n	8005650 <_free_r+0x160>
 8005646:	684a      	ldr	r2, [r1, #4]
 8005648:	f022 0203 	bic.w	r2, r2, #3
 800564c:	4290      	cmp	r0, r2
 800564e:	d3f7      	bcc.n	8005640 <_free_r+0x150>
 8005650:	68ce      	ldr	r6, [r1, #12]
 8005652:	e7da      	b.n	800560a <_free_r+0x11a>
 8005654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005658:	20000190 	.word	0x20000190
 800565c:	2000059c 	.word	0x2000059c
 8005660:	20000758 	.word	0x20000758
 8005664:	20000198 	.word	0x20000198

08005668 <__retarget_lock_acquire_recursive>:
 8005668:	4770      	bx	lr

0800566a <__retarget_lock_release_recursive>:
 800566a:	4770      	bx	lr

0800566c <__ascii_mbtowc>:
 800566c:	b082      	sub	sp, #8
 800566e:	b901      	cbnz	r1, 8005672 <__ascii_mbtowc+0x6>
 8005670:	a901      	add	r1, sp, #4
 8005672:	b142      	cbz	r2, 8005686 <__ascii_mbtowc+0x1a>
 8005674:	b14b      	cbz	r3, 800568a <__ascii_mbtowc+0x1e>
 8005676:	7813      	ldrb	r3, [r2, #0]
 8005678:	600b      	str	r3, [r1, #0]
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	1c10      	adds	r0, r2, #0
 800567e:	bf18      	it	ne
 8005680:	2001      	movne	r0, #1
 8005682:	b002      	add	sp, #8
 8005684:	4770      	bx	lr
 8005686:	4610      	mov	r0, r2
 8005688:	e7fb      	b.n	8005682 <__ascii_mbtowc+0x16>
 800568a:	f06f 0001 	mvn.w	r0, #1
 800568e:	e7f8      	b.n	8005682 <__ascii_mbtowc+0x16>

08005690 <memmove>:
 8005690:	4288      	cmp	r0, r1
 8005692:	b510      	push	{r4, lr}
 8005694:	eb01 0302 	add.w	r3, r1, r2
 8005698:	d803      	bhi.n	80056a2 <memmove+0x12>
 800569a:	1e42      	subs	r2, r0, #1
 800569c:	4299      	cmp	r1, r3
 800569e:	d10c      	bne.n	80056ba <memmove+0x2a>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	4298      	cmp	r0, r3
 80056a4:	d2f9      	bcs.n	800569a <memmove+0xa>
 80056a6:	1881      	adds	r1, r0, r2
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	42d3      	cmn	r3, r2
 80056ac:	d100      	bne.n	80056b0 <memmove+0x20>
 80056ae:	bd10      	pop	{r4, pc}
 80056b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056b8:	e7f7      	b.n	80056aa <memmove+0x1a>
 80056ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056c2:	e7eb      	b.n	800569c <memmove+0xc>

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <_realloc_r>:
 80056d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	4682      	mov	sl, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	b929      	cbnz	r1, 80056ea <_realloc_r+0x16>
 80056de:	4611      	mov	r1, r2
 80056e0:	b003      	add	sp, #12
 80056e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f7ff b8ff 	b.w	80048e8 <_malloc_r>
 80056ea:	9201      	str	r2, [sp, #4]
 80056ec:	f7ff fb16 	bl	8004d1c <__malloc_lock>
 80056f0:	9a01      	ldr	r2, [sp, #4]
 80056f2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80056f6:	f102 080b 	add.w	r8, r2, #11
 80056fa:	f1b8 0f16 	cmp.w	r8, #22
 80056fe:	f1a4 0908 	sub.w	r9, r4, #8
 8005702:	f025 0603 	bic.w	r6, r5, #3
 8005706:	d90a      	bls.n	800571e <_realloc_r+0x4a>
 8005708:	f038 0807 	bics.w	r8, r8, #7
 800570c:	d509      	bpl.n	8005722 <_realloc_r+0x4e>
 800570e:	230c      	movs	r3, #12
 8005710:	f8ca 3000 	str.w	r3, [sl]
 8005714:	2700      	movs	r7, #0
 8005716:	4638      	mov	r0, r7
 8005718:	b003      	add	sp, #12
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	f04f 0810 	mov.w	r8, #16
 8005722:	4590      	cmp	r8, r2
 8005724:	d3f3      	bcc.n	800570e <_realloc_r+0x3a>
 8005726:	45b0      	cmp	r8, r6
 8005728:	f340 8145 	ble.w	80059b6 <_realloc_r+0x2e2>
 800572c:	4ba8      	ldr	r3, [pc, #672]	; (80059d0 <_realloc_r+0x2fc>)
 800572e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005732:	eb09 0106 	add.w	r1, r9, r6
 8005736:	4571      	cmp	r1, lr
 8005738:	469b      	mov	fp, r3
 800573a:	684b      	ldr	r3, [r1, #4]
 800573c:	d005      	beq.n	800574a <_realloc_r+0x76>
 800573e:	f023 0001 	bic.w	r0, r3, #1
 8005742:	4408      	add	r0, r1
 8005744:	6840      	ldr	r0, [r0, #4]
 8005746:	07c7      	lsls	r7, r0, #31
 8005748:	d447      	bmi.n	80057da <_realloc_r+0x106>
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	4571      	cmp	r1, lr
 8005750:	eb06 0703 	add.w	r7, r6, r3
 8005754:	d119      	bne.n	800578a <_realloc_r+0xb6>
 8005756:	f108 0010 	add.w	r0, r8, #16
 800575a:	4287      	cmp	r7, r0
 800575c:	db3f      	blt.n	80057de <_realloc_r+0x10a>
 800575e:	eb09 0308 	add.w	r3, r9, r8
 8005762:	eba7 0708 	sub.w	r7, r7, r8
 8005766:	f047 0701 	orr.w	r7, r7, #1
 800576a:	f8cb 3008 	str.w	r3, [fp, #8]
 800576e:	605f      	str	r7, [r3, #4]
 8005770:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	ea43 0308 	orr.w	r3, r3, r8
 800577c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005780:	4650      	mov	r0, sl
 8005782:	f7ff fad1 	bl	8004d28 <__malloc_unlock>
 8005786:	4627      	mov	r7, r4
 8005788:	e7c5      	b.n	8005716 <_realloc_r+0x42>
 800578a:	45b8      	cmp	r8, r7
 800578c:	dc27      	bgt.n	80057de <_realloc_r+0x10a>
 800578e:	68cb      	ldr	r3, [r1, #12]
 8005790:	688a      	ldr	r2, [r1, #8]
 8005792:	60d3      	str	r3, [r2, #12]
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	eba7 0008 	sub.w	r0, r7, r8
 800579a:	280f      	cmp	r0, #15
 800579c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80057a0:	eb09 0207 	add.w	r2, r9, r7
 80057a4:	f240 8109 	bls.w	80059ba <_realloc_r+0x2e6>
 80057a8:	eb09 0108 	add.w	r1, r9, r8
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	ea43 0308 	orr.w	r3, r3, r8
 80057b4:	f040 0001 	orr.w	r0, r0, #1
 80057b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80057bc:	6048      	str	r0, [r1, #4]
 80057be:	6853      	ldr	r3, [r2, #4]
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6053      	str	r3, [r2, #4]
 80057c6:	3108      	adds	r1, #8
 80057c8:	4650      	mov	r0, sl
 80057ca:	f7ff fe91 	bl	80054f0 <_free_r>
 80057ce:	4650      	mov	r0, sl
 80057d0:	f7ff faaa 	bl	8004d28 <__malloc_unlock>
 80057d4:	f109 0708 	add.w	r7, r9, #8
 80057d8:	e79d      	b.n	8005716 <_realloc_r+0x42>
 80057da:	2300      	movs	r3, #0
 80057dc:	4619      	mov	r1, r3
 80057de:	07e8      	lsls	r0, r5, #31
 80057e0:	f100 8084 	bmi.w	80058ec <_realloc_r+0x218>
 80057e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80057e8:	eba9 0505 	sub.w	r5, r9, r5
 80057ec:	6868      	ldr	r0, [r5, #4]
 80057ee:	f020 0003 	bic.w	r0, r0, #3
 80057f2:	4430      	add	r0, r6
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d076      	beq.n	80058e6 <_realloc_r+0x212>
 80057f8:	4571      	cmp	r1, lr
 80057fa:	d150      	bne.n	800589e <_realloc_r+0x1ca>
 80057fc:	4403      	add	r3, r0
 80057fe:	f108 0110 	add.w	r1, r8, #16
 8005802:	428b      	cmp	r3, r1
 8005804:	db6f      	blt.n	80058e6 <_realloc_r+0x212>
 8005806:	462f      	mov	r7, r5
 8005808:	68ea      	ldr	r2, [r5, #12]
 800580a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800580e:	60ca      	str	r2, [r1, #12]
 8005810:	6091      	str	r1, [r2, #8]
 8005812:	1f32      	subs	r2, r6, #4
 8005814:	2a24      	cmp	r2, #36	; 0x24
 8005816:	d83b      	bhi.n	8005890 <_realloc_r+0x1bc>
 8005818:	2a13      	cmp	r2, #19
 800581a:	d936      	bls.n	800588a <_realloc_r+0x1b6>
 800581c:	6821      	ldr	r1, [r4, #0]
 800581e:	60a9      	str	r1, [r5, #8]
 8005820:	6861      	ldr	r1, [r4, #4]
 8005822:	60e9      	str	r1, [r5, #12]
 8005824:	2a1b      	cmp	r2, #27
 8005826:	d81c      	bhi.n	8005862 <_realloc_r+0x18e>
 8005828:	f105 0210 	add.w	r2, r5, #16
 800582c:	f104 0108 	add.w	r1, r4, #8
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	6010      	str	r0, [r2, #0]
 8005834:	6848      	ldr	r0, [r1, #4]
 8005836:	6050      	str	r0, [r2, #4]
 8005838:	6889      	ldr	r1, [r1, #8]
 800583a:	6091      	str	r1, [r2, #8]
 800583c:	eb05 0208 	add.w	r2, r5, r8
 8005840:	eba3 0308 	sub.w	r3, r3, r8
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	f8cb 2008 	str.w	r2, [fp, #8]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	686b      	ldr	r3, [r5, #4]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	ea43 0308 	orr.w	r3, r3, r8
 8005858:	606b      	str	r3, [r5, #4]
 800585a:	4650      	mov	r0, sl
 800585c:	f7ff fa64 	bl	8004d28 <__malloc_unlock>
 8005860:	e759      	b.n	8005716 <_realloc_r+0x42>
 8005862:	68a1      	ldr	r1, [r4, #8]
 8005864:	6129      	str	r1, [r5, #16]
 8005866:	68e1      	ldr	r1, [r4, #12]
 8005868:	6169      	str	r1, [r5, #20]
 800586a:	2a24      	cmp	r2, #36	; 0x24
 800586c:	bf01      	itttt	eq
 800586e:	6922      	ldreq	r2, [r4, #16]
 8005870:	61aa      	streq	r2, [r5, #24]
 8005872:	6960      	ldreq	r0, [r4, #20]
 8005874:	61e8      	streq	r0, [r5, #28]
 8005876:	bf19      	ittee	ne
 8005878:	f105 0218 	addne.w	r2, r5, #24
 800587c:	f104 0110 	addne.w	r1, r4, #16
 8005880:	f105 0220 	addeq.w	r2, r5, #32
 8005884:	f104 0118 	addeq.w	r1, r4, #24
 8005888:	e7d2      	b.n	8005830 <_realloc_r+0x15c>
 800588a:	463a      	mov	r2, r7
 800588c:	4621      	mov	r1, r4
 800588e:	e7cf      	b.n	8005830 <_realloc_r+0x15c>
 8005890:	4621      	mov	r1, r4
 8005892:	4638      	mov	r0, r7
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	f7ff fefb 	bl	8005690 <memmove>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	e7ce      	b.n	800583c <_realloc_r+0x168>
 800589e:	18c7      	adds	r7, r0, r3
 80058a0:	45b8      	cmp	r8, r7
 80058a2:	dc20      	bgt.n	80058e6 <_realloc_r+0x212>
 80058a4:	68cb      	ldr	r3, [r1, #12]
 80058a6:	688a      	ldr	r2, [r1, #8]
 80058a8:	60d3      	str	r3, [r2, #12]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	4628      	mov	r0, r5
 80058ae:	68eb      	ldr	r3, [r5, #12]
 80058b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80058b4:	60d3      	str	r3, [r2, #12]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	1f32      	subs	r2, r6, #4
 80058ba:	2a24      	cmp	r2, #36	; 0x24
 80058bc:	d842      	bhi.n	8005944 <_realloc_r+0x270>
 80058be:	2a13      	cmp	r2, #19
 80058c0:	d93e      	bls.n	8005940 <_realloc_r+0x26c>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	60ab      	str	r3, [r5, #8]
 80058c6:	6863      	ldr	r3, [r4, #4]
 80058c8:	60eb      	str	r3, [r5, #12]
 80058ca:	2a1b      	cmp	r2, #27
 80058cc:	d824      	bhi.n	8005918 <_realloc_r+0x244>
 80058ce:	f105 0010 	add.w	r0, r5, #16
 80058d2:	f104 0308 	add.w	r3, r4, #8
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	6002      	str	r2, [r0, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	6042      	str	r2, [r0, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	6083      	str	r3, [r0, #8]
 80058e2:	46a9      	mov	r9, r5
 80058e4:	e757      	b.n	8005796 <_realloc_r+0xc2>
 80058e6:	4580      	cmp	r8, r0
 80058e8:	4607      	mov	r7, r0
 80058ea:	dddf      	ble.n	80058ac <_realloc_r+0x1d8>
 80058ec:	4611      	mov	r1, r2
 80058ee:	4650      	mov	r0, sl
 80058f0:	f7fe fffa 	bl	80048e8 <_malloc_r>
 80058f4:	4607      	mov	r7, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0af      	beq.n	800585a <_realloc_r+0x186>
 80058fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	f1a0 0208 	sub.w	r2, r0, #8
 8005906:	444b      	add	r3, r9
 8005908:	429a      	cmp	r2, r3
 800590a:	d11f      	bne.n	800594c <_realloc_r+0x278>
 800590c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005910:	f027 0703 	bic.w	r7, r7, #3
 8005914:	4437      	add	r7, r6
 8005916:	e73e      	b.n	8005796 <_realloc_r+0xc2>
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	612b      	str	r3, [r5, #16]
 800591c:	68e3      	ldr	r3, [r4, #12]
 800591e:	616b      	str	r3, [r5, #20]
 8005920:	2a24      	cmp	r2, #36	; 0x24
 8005922:	bf01      	itttt	eq
 8005924:	6923      	ldreq	r3, [r4, #16]
 8005926:	61ab      	streq	r3, [r5, #24]
 8005928:	6962      	ldreq	r2, [r4, #20]
 800592a:	61ea      	streq	r2, [r5, #28]
 800592c:	bf19      	ittee	ne
 800592e:	f105 0018 	addne.w	r0, r5, #24
 8005932:	f104 0310 	addne.w	r3, r4, #16
 8005936:	f105 0020 	addeq.w	r0, r5, #32
 800593a:	f104 0318 	addeq.w	r3, r4, #24
 800593e:	e7ca      	b.n	80058d6 <_realloc_r+0x202>
 8005940:	4623      	mov	r3, r4
 8005942:	e7c8      	b.n	80058d6 <_realloc_r+0x202>
 8005944:	4621      	mov	r1, r4
 8005946:	f7ff fea3 	bl	8005690 <memmove>
 800594a:	e7ca      	b.n	80058e2 <_realloc_r+0x20e>
 800594c:	1f32      	subs	r2, r6, #4
 800594e:	2a24      	cmp	r2, #36	; 0x24
 8005950:	d82d      	bhi.n	80059ae <_realloc_r+0x2da>
 8005952:	2a13      	cmp	r2, #19
 8005954:	d928      	bls.n	80059a8 <_realloc_r+0x2d4>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6003      	str	r3, [r0, #0]
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	6043      	str	r3, [r0, #4]
 800595e:	2a1b      	cmp	r2, #27
 8005960:	d80e      	bhi.n	8005980 <_realloc_r+0x2ac>
 8005962:	f100 0308 	add.w	r3, r0, #8
 8005966:	f104 0208 	add.w	r2, r4, #8
 800596a:	6811      	ldr	r1, [r2, #0]
 800596c:	6019      	str	r1, [r3, #0]
 800596e:	6851      	ldr	r1, [r2, #4]
 8005970:	6059      	str	r1, [r3, #4]
 8005972:	6892      	ldr	r2, [r2, #8]
 8005974:	609a      	str	r2, [r3, #8]
 8005976:	4621      	mov	r1, r4
 8005978:	4650      	mov	r0, sl
 800597a:	f7ff fdb9 	bl	80054f0 <_free_r>
 800597e:	e76c      	b.n	800585a <_realloc_r+0x186>
 8005980:	68a3      	ldr	r3, [r4, #8]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	60c3      	str	r3, [r0, #12]
 8005988:	2a24      	cmp	r2, #36	; 0x24
 800598a:	bf01      	itttt	eq
 800598c:	6923      	ldreq	r3, [r4, #16]
 800598e:	6103      	streq	r3, [r0, #16]
 8005990:	6961      	ldreq	r1, [r4, #20]
 8005992:	6141      	streq	r1, [r0, #20]
 8005994:	bf19      	ittee	ne
 8005996:	f100 0310 	addne.w	r3, r0, #16
 800599a:	f104 0210 	addne.w	r2, r4, #16
 800599e:	f100 0318 	addeq.w	r3, r0, #24
 80059a2:	f104 0218 	addeq.w	r2, r4, #24
 80059a6:	e7e0      	b.n	800596a <_realloc_r+0x296>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4622      	mov	r2, r4
 80059ac:	e7dd      	b.n	800596a <_realloc_r+0x296>
 80059ae:	4621      	mov	r1, r4
 80059b0:	f7ff fe6e 	bl	8005690 <memmove>
 80059b4:	e7df      	b.n	8005976 <_realloc_r+0x2a2>
 80059b6:	4637      	mov	r7, r6
 80059b8:	e6ed      	b.n	8005796 <_realloc_r+0xc2>
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	431f      	orrs	r7, r3
 80059c0:	f8c9 7004 	str.w	r7, [r9, #4]
 80059c4:	6853      	ldr	r3, [r2, #4]
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6053      	str	r3, [r2, #4]
 80059cc:	e6ff      	b.n	80057ce <_realloc_r+0xfa>
 80059ce:	bf00      	nop
 80059d0:	20000190 	.word	0x20000190

080059d4 <__ascii_wctomb>:
 80059d4:	b149      	cbz	r1, 80059ea <__ascii_wctomb+0x16>
 80059d6:	2aff      	cmp	r2, #255	; 0xff
 80059d8:	bf85      	ittet	hi
 80059da:	238a      	movhi	r3, #138	; 0x8a
 80059dc:	6003      	strhi	r3, [r0, #0]
 80059de:	700a      	strbls	r2, [r1, #0]
 80059e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80059e4:	bf98      	it	ls
 80059e6:	2001      	movls	r0, #1
 80059e8:	4770      	bx	lr
 80059ea:	4608      	mov	r0, r1
 80059ec:	4770      	bx	lr
	...

080059f0 <_sbrk>:
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <_sbrk+0x14>)
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	4602      	mov	r2, r0
 80059f6:	b909      	cbnz	r1, 80059fc <_sbrk+0xc>
 80059f8:	4903      	ldr	r1, [pc, #12]	; (8005a08 <_sbrk+0x18>)
 80059fa:	6019      	str	r1, [r3, #0]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	4402      	add	r2, r0
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	4770      	bx	lr
 8005a04:	2000075c 	.word	0x2000075c
 8005a08:	200007a0 	.word	0x200007a0

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
